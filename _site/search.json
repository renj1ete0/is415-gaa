[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ren Jie’s IS415 Journal",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nHands-on Exercise 2: Choropleth Mapping with R\n\n\n\n\n\nChloropleth Mapping of Singapore Resident Planning Area / Subzone, Age, Sex and Type of Dwelling\n\n\n\n\n\n\nJan 24, 2023\n\n\nTeo Ren Jie\n\n\n27 min\n\n\n\n\n\n\n  \n\n\n\n\nIn-Class Exercise 2: Geospatial Data Wrangling\n\n\n\n\n\nVisualising proportion of functional and non-functional water pumps in Nigeria at LGA level\n\n\n\n\n\n\nJan 16, 2023\n\n\nTeo Ren Jie\n\n\n8 min\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 1: Geospatial Data Handling and Wrangling\n\n\n\n\n\nIn this exercise, I learn how to handle, perform geoprocessing and EDA using sf, tidyverse, ggplot2 and other packages.\n\n\n\n\n\n\nJan 15, 2023\n\n\nTeo Ren Jie\n\n\n11 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Teo Ren Jie",
    "section": "",
    "text": "About Me\n\n\nI’m Ren Jie, a Year 2 Information Systems Undergraduate student at the Singapore Management University, majoring in Digitalisation & Cloud Solutions (SCIS) and Urban Science (CIS).\nMy interests are in urban science and urban planning. I am excited to learn more about geospatial analytics from this course which will value-add to my individualised second major in Urban Science at the College of Integrative Studies, where I aim to utilise, integrate and interpret data from the city into innovative solutions for cities of the future.\n\n\n\nMore About This Site\n\nThis site documents my journey on learning and applying Geospatial Analytics\n\n\nFind Me\n\nConnect with me on LinkedIn or contact me through email!"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Exercises",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nHands-on Exercise 2: Geospatial Data Handling and Wrangling\n\n\n\n\n\n\n\nHands-on Exercise\n\n\n\n\nPost description\n\n\n\n\n\n\nJan 15, 2023\n\n\nTeo Ren Jie\n\n\n\n\n\n\n\n\nMy Post\n\n\n\n\n\nPost description\n\n\n\n\n\n\nMay 22, 2021\n\n\nFizz McPhee\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/test.html",
    "href": "exercises/test.html",
    "title": "My Post",
    "section": "",
    "text": "content content"
  },
  {
    "objectID": "exercises/hoex2.html",
    "href": "exercises/hoex2.html",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "Firstly, the code below will check if pacman has been installed. If it has not been installed, R will download and install it, before activating it for use during this session.\n\nif (!require('pacman', character.only = T)){\n  install.packages('pacman')\n}\n\nLoading required package: pacman\n\nlibrary('pacman')\n\nNext, pacman assists us by helping us load R packages that we require, sf, tmap and tidyverse. terra is included as it is a dependency of tmap which may not install/load if terra has not been installed prior.\n\npacman::p_load(sf, tidyverse, tmap, terra)\n\n\n\n\nThe following public datasets are used:\n\n\n\nDataset Name\nSource\n\n\n\n\nMaster Plan 2014 Subzone Boundary (Web) (MP14_SUBZONE_WEB_PL.shp)\ndata.gov.sg\n\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 (respopagesextod2011to2020.csv)\nDepartment of Statistics, Singapore\n\n\n\nThe Master Plan 2014 Subzone Boundary (Web) has been extracted to Hands-on_Ex02/data/geospatial whereas the Department of Statistics Singapore Resident dataset has been extracted to Hands-on_Ex02/data/aspatial.\n\n\n\nFirstly, we will import Master Plan 2014 Subzone Boundary (Web).\n\nmpsz = st_read(dsn = \"Hands-on_Ex02/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nFrom the above message, it tells us that the dataset contains multipolygon features, containing 323 multipolygon features and 15 fields in the mpsz simple feature data frame and is in the svy21 projected coordinates system. The bounding box provides us the x and y extents (x min, x max, y min, y max) of the data.\nWe can use mpsz to examine the contents.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nBy default, only the top 10 records are shown. To show more than 10 records, we can use a workaround below to print n = 15 records:\n\nmpsz %>% print(n = 15)\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 15 features:\n   OBJECTID SUBZONE_NO        SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1     MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1     PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3        BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8   HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3          REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7   ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9    BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2      CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13  PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7        QUEENSWAY    QTSZ07      N      QUEENSTOWN\n11       11         12       KENT RIDGE    QTSZ12      N      QUEENSTOWN\n12       12          6  ALEXANDRA NORTH    BMSZ06      N     BUKIT MERAH\n13       13          1      MARINA EAST    MESZ01      Y     MARINA EAST\n14       14          5 INSTITUTION HILL    RVSZ05      Y    RIVER VALLEY\n15       15          1   ROBERTSON QUAY    SRSZ01      Y SINGAPORE RIVER\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n11         QT CENTRAL REGION       CR 601BA309A1AAC731 2014-12-05 23464.84\n12         BM CENTRAL REGION       CR 4DC4BF8D86594CBF 2014-12-05 26548.25\n13         ME CENTRAL REGION       CR 782A2FAF53029A34 2014-12-05 32344.05\n14         RV CENTRAL REGION       CR C3C22D1EE31757BD 2014-12-05 28465.40\n15         SR CENTRAL REGION       CR DF71BB5EC3C9FFD1 2014-12-05 28416.85\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n11 29725.37   7439.548  1826848.6 MULTIPOLYGON (((23332.77 30...\n12 30519.39   2907.051   293706.4 MULTIPOLYGON (((26231.96 30...\n13 30103.25   6470.950  1844060.7 MULTIPOLYGON (((33214.62 29...\n14 30711.22   2842.526   392563.3 MULTIPOLYGON (((28481.45 30...\n15 30409.36   4995.758   506589.0 MULTIPOLYGON (((28087.34 30...\n\n\n\n\n\n\n\nTo check the coordinate system of a dataset, the st_crs() function of sf package could be used. Here, we check the coordinate system of mpsz simple feature data frame.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough the data frame has been projected in SVY21, if we look at the end of the output, it indicates that the EPSG is 9001 which is incorrect. The correct EPSG code for SVY21 should be 3414.\nIn the code chunk below, we will correct the crs to EPSG 3414.\n\nmpsz3414 <- st_set_crs(mpsz,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the crs if it has been updated.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the EPSG has been updated to 3414.\n\n\n\n\nSince population data set is in csv format, we will used read_csv() of readr package to import respopagesextod2011to2020.csv and output it to an R object called listings, which is a tibble data frame.\n\npopulation <- read_csv(\"Hands-on_Ex02/data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(population)\n\n[[1]]\n# A tibble: 984,656 × 7\n   PA         SZ                     AG     Sex     TOD                Pop  Time\n   <chr>      <chr>                  <chr>  <chr>   <chr>            <dbl> <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 1- and 2-Ro…     0  2011\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 3-Room Flats    10  2011\n 3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 4-Room Flats    30  2011\n 4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 5-Room and …    50  2011\n 5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HUDC Flats (exc…     0  2011\n 6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Landed Properti…     0  2011\n 7 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Condominiums an…    40  2011\n 8 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Others               0  2011\n 9 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 1- and 2-Ro…     0  2011\n10 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 3-Room Flats    10  2011\n# … with 984,646 more rows\n\n\nOur output shows our population tibble data frame consists of 984656 rows and 7 columns. The useful fields we would be paying attention to is the PA and SZ columns, which we will use to match to the geocodes with the Master plan dataset ."
  },
  {
    "objectID": "exercises/hoex2.html#st_geometry",
    "href": "exercises/hoex2.html#st_geometry",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.1 st_geometry()",
    "text": "2.1 st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nst_geometry() can help us obtain summarised details about a dataset about the geometry. In the case on The information provided is the same as what we have seen while importing the datasets earlier on."
  },
  {
    "objectID": "exercises/hoex2.html#glimpse",
    "href": "exercises/hoex2.html#glimpse",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.2 glimpse()",
    "text": "2.2 glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() can help us investigate what are the specific fields, its associated field data type and some sample data from the dataset to help us visualize the structure of the data."
  },
  {
    "objectID": "exercises/hoex2.html#head",
    "href": "exercises/hoex2.html#head",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.3 head()",
    "text": "2.3 head()\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nhead() can also help us obtain summarised details about a dataset as with glimpse(). Using the n=5 parameter inside function head, we are able to limit the amount of features to be shown to 5."
  },
  {
    "objectID": "exercises/hoex2.html#multi-plot-attributes",
    "href": "exercises/hoex2.html#multi-plot-attributes",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.1 Multi-plot Attributes",
    "text": "3.1 Multi-plot Attributes\nThe following code will plot multiple attributes within the dataframe up to a reasonable limit.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall"
  },
  {
    "objectID": "exercises/hoex2.html#geometry-plot",
    "href": "exercises/hoex2.html#geometry-plot",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.2 Geometry Plot",
    "text": "3.2 Geometry Plot\nRecall st_geometry from Checking Content of a Simple Data Frame from earlier? st_geometry provides the geometry of the map, where we could use plot to plot just the geomtry of the data frame.\n\nplot(st_geometry(mpsz))"
  },
  {
    "objectID": "exercises/hoex2.html#specific-attributes",
    "href": "exercises/hoex2.html#specific-attributes",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.3 Specific Attributes",
    "text": "3.3 Specific Attributes\nWe could also choose to plot a specific attribute of the data frame. The following code below will plot the PLN_AREA_N attribute.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "exercises/hoex2.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "exercises/hoex2.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.1 Assigning EPSG Code to a Simple Feature Data Frame",
    "text": "4.1 Assigning EPSG Code to a Simple Feature Data Frame\nThe coordinate system in the dataset could be wrongly assigned during the importing process or missing (missing .proj file for ESRI shapefile) when importing geospatial data into R.\n\n4.1.1 Checking the Coordinate System of the Data Frame\nTo check the coordinate system of a dataset, the st_crs() function of sf package could be used. Here, we check the coordinate system of mpsz simple feature data frame.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough the data frame has been projected in SVY21, if we look at the end of the output, it indicates that the EPSG is 9001 which is incorrect. The correct EPSG code for SVY21 should be 3414.\nIn the code chunk below, we will correct the crs to EPSG 3414.\n\nmpsz3414 <- st_set_crs(mpsz,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the crs if it has been updated.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the EPSG has been updated to 3414.\n\n\n4.1.2 Transforming from wgs84 to svy21\nIt is important in geospatial analytics to ensure that datasets are converted to projected coordinate system from the geographic coordinate system. Geographic coordinate system is not appropriate if analysis requires distance and/or area measurements.\n\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nIn the preschools data frame, it is in the wgs84 coordinate system.\nSince reprojection is necessary from wgs84 to svy21 mathematically, st_set_crs() would not be appropriate. We will utilise st_transform().\nIn the example below, we reproject the preschools dataframe to svy21 (EPSG 3414).\n\npreschools3414 <- st_transform(preschools, crs = 3414)\n\nLet’s see the content of the reprojected preschools3414 dataframe.\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the data frame is in svy21 coordinate system.\n\n\n\n\n\n\nIf the bounding box values are greater than the 0-360 decimal degree used by most geographic coordinate system, it means it is likely to be in a projected coordinate system."
  },
  {
    "objectID": "exercises/hoex2.html#importing-aspatial-data",
    "href": "exercises/hoex2.html#importing-aspatial-data",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "5.1 Importing Aspatial Data",
    "text": "5.1 Importing Aspatial Data\nSince listings data set is in csv format, we will used read_csv() of readr package to import listing.csv and output it to an R object called listings, which is a tibble data frame.\n\nlistings <- read_csv(\"Hands-on_Ex01/data/aspatial/listings.csv\")\n\nRows: 4161 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nInstead of using glimpse() as shown earlier, list() could also do the job.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   145\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   184\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 4,151 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\nOur output shows our listing tibble data frame consists of 4161 rows and 18 columns. The useful fields we would be paying attention to is the latitude and longitude columns, which are in the decimal degree format. By assumption, we assume the data is in wgs84 Geographic Coordinate System."
  },
  {
    "objectID": "exercises/hoex2.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "exercises/hoex2.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "5.2 Creating a Simple Feature Data Frame from an Aspatial Data Frame",
    "text": "5.2 Creating a Simple Feature Data Frame from an Aspatial Data Frame\nThe code below converts the listings tibble data fame into a simple feature data frame by using st_as_sf() from sf packages, which converts foreign data formats to an sf object.\n\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %>%\n  st_transform(crs = 3414)\n\nThe arguments for\n\nlistings could be any other foreign data frame to be converted\ncoords requires to provide column name of x-coordinates followed by y-coordinates. The coordinates system also needs to be provided in terms of EPSG format. EPSG:4326 is the wgs84 Geographic Coordinate System whereas EPSG:3414 is Singapore’s svy21 Projected Coordinate System.\n%>% nest st_transform() into the st_as_sf() function to convert into svy21 coordinates"
  },
  {
    "objectID": "exercises/hoex2.html#examining-simple-feature-data-frame",
    "href": "exercises/hoex2.html#examining-simple-feature-data-frame",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "5.3 Examining Simple Feature Data Frame",
    "text": "5.3 Examining Simple Feature Data Frame\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nPreviously, there were 18 columns in the aspatial data, only 17 columns exists now. Longitude and Latitude columns were dropped and a new column has been created for geometry."
  },
  {
    "objectID": "exercises/hoex2.html#buffering",
    "href": "exercises/hoex2.html#buffering",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "6.1 Buffering",
    "text": "6.1 Buffering\n\n\n\n\n\n\nScenario:\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extent of land needed to be acquired and their total area.\n\n\n\nFirstly, we utilise st_buffer() of sf package to compute the 5-metre buffers around cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist = 5,\n                            nQuadSegs = 30)\n\nWhat nQuadSegs alters is the generalisation of points to create the buffer. More segments means it is less generalised and less segments means more generalised buffers.\nNext, we calculate the area of the buffers.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nNow, we can sum the area to get total land required for the buffer.\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]"
  },
  {
    "objectID": "exercises/hoex2.html#point-in-polygon-count",
    "href": "exercises/hoex2.html#point-in-polygon-count",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "6.2 Point-in-polygon Count",
    "text": "6.2 Point-in-polygon Count\n\n\n\n\n\n\nScenario:\nA pre-school service group wants to find the number of pre-schools in each Planning Subzone.\n\n\n\nFirstly, we utilise st_intersects() of sf package to find which pre-schools falls under which planning subzone. Then, using lengths, we calculate the number of pre-schools within each planning subzone.\n\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschools3414))\n\nWe could use summary() to viewsummary statistics of the newly derived PreSch Count field.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\nWow! Here, we can see that there is at least one planning subzone with 58 pre-schools, with a mean of 5.96 pre-schools in each subzone.\nNow, let’s look at the top sub-zone with the most pre-schools.\nThe code below utilises top_n of dplyr package to look in the mpsz3414 dataframe, under the field PreSch Count for the top record\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\nHere, we can see that the top planning subzone with the most preschools is Tampines East.\n\n\n\n\n\n\nScenario:\nCalculate the density of pre-school by planning subzone\n\n\n\nFirst, the formula for density is density = count / area\nWe will first calculate the area of each subzone below:\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, we will use mutate() of dplyr package to compute density. We multiply it by 1000000 to reduce the amount of decimal points by converting it to km2 for easier handling.\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nNow, we can view the density of preschools.\n\nlist(mpsz3414$`PreSch Density`)\n\n[[1]]\nUnits: [1/m^2]\n  [1]  0.00000000  8.93150215  0.00000000  6.71784674  5.16223032  9.70516876\n  [7]  7.24989604  6.89216325  5.53101261  1.58316954  3.28434449  6.80952137\n [13]  0.00000000  2.54735962 11.84392175  0.00000000  0.00000000  0.00000000\n [19]  0.00000000  0.40657576  0.00000000  9.68631056  0.00000000  1.48058527\n [25] 10.83710054 15.70722567 35.60169297  5.47445116  6.18629982  8.20434375\n [31]  0.00000000  0.00000000  9.03949026  0.00000000  7.28645544 17.02931505\n [37] 25.35629701 15.89256712  0.00000000 11.15753677  0.00000000  8.55218466\n [43]  3.81906935  0.00000000  3.38235947  0.00000000 14.99604968  1.40732345\n [49]  8.01406205  0.00000000  0.56949216  5.86952041  3.03547315 11.71891220\n [55]  8.14148847  0.00000000  4.50504548  3.56920079  9.33487616  0.00000000\n [61]  5.62143826  0.00000000  3.14611804  9.93599725 17.95935646  0.00000000\n [67]  5.36153142  1.23223830  5.83558926  3.22047037  1.44233198  3.07398190\n [73]  2.21008233  5.73475293  0.00000000  0.00000000  1.82176954  9.49222530\n [79]  0.00000000  0.00000000  2.97422984  0.00000000  8.68525951  1.83998165\n [85]  7.18639790  0.00000000  0.00000000  5.36902632  0.00000000  2.38539919\n [91]  4.15173953  1.17625763  0.00000000  0.00000000  3.71428866  0.00000000\n [97]  0.00000000 10.30968514  0.00000000  3.52586966  6.81950547  0.00000000\n[103] 11.20672769  0.00000000  4.07884557  2.10935105  1.51390154  7.67355379\n[109] 10.89459084  9.34277714  0.00000000  0.00000000  5.19103594 10.30880422\n[115]  0.00000000  4.91199399  8.37774399 13.90186364 13.05635620  4.03408588\n[121]  4.68205034  0.00000000  0.00000000  0.00000000 10.30828105  6.59711016\n[127]  8.54111363  0.00000000  0.00000000  9.35774736  3.91277524  9.73248928\n[133]  9.52960696  4.07004471  9.01512182  0.88420004  5.85700658  9.21924053\n[139]  9.38756233  0.00000000  7.29210328 14.33152883  0.95320866  0.00000000\n[145]  1.22943315 14.14811689  0.00000000  4.82029416  4.96423679 10.81358754\n[151]  3.87478236 16.37550727  4.20286113  1.92511630  0.00000000  2.27575881\n[157]  3.78370366  0.00000000  4.54910663  9.37229330 11.20468789  0.00000000\n[163] 10.13730087  1.38998948 11.13208882  0.00000000  6.28324782 12.10849477\n[169]  1.46373505  5.42827717  2.50973772 11.03366227 10.52072865  9.49878064\n[175] 11.24580300 11.12890128 13.93950764  0.00000000  0.00000000 10.35889471\n[181]  6.12997351  8.63257212  6.52702292  0.00000000  6.45113675  8.65521161\n[187]  2.02537466  0.96587505 13.36459686  4.45419682  0.00000000  3.86526962\n[193] 12.69090170  5.93156946  1.62615585  2.07322060  7.12358161  8.11313906\n[199]  9.67642203 12.64374315  0.00000000 13.05378261  0.00000000 10.91908952\n[205]  4.47169158 10.97443928 15.73682882 10.53521767  0.00000000  7.86180592\n[211]  7.94696181  4.61489164  1.02119062  6.11811051 15.06832167 11.36765405\n[217]  7.09104861 10.31880873 11.98092893  5.46797281  0.00000000 16.45587097\n[223]  6.40125464 14.81499038  4.29058729  6.40314089  2.68546919  8.79682941\n[229]  0.47286030  2.09945890 11.21716914  3.17460839  4.01850845  0.00000000\n[235]  0.00000000  4.14472875 11.63901574 16.47133302  7.18459670  6.48975999\n[241] 10.17545246  4.63093287  9.05523476  1.03085549  2.42737742 11.58770447\n[247]  0.78643969 10.46342303 15.77874328  8.60077770  3.25580555  0.00000000\n[253] 21.90726711  5.95439968  1.62661251  0.00000000  0.00000000  4.07046653\n[259] 11.94152678 16.57069701  0.00000000  5.43686743 13.78099282 15.16440245\n[265]  0.00000000  8.46092732 14.10108710  0.00000000  0.05698650  0.00000000\n[271]  0.00000000 20.61136242 11.34007216  0.00000000 14.17732715  0.70978094\n[277]  4.41176266 34.93133940 11.45820473  0.00000000  0.00000000  7.61420607\n[283] 10.20733340 10.18622170  0.01433727  0.00000000 10.54179983  1.67883220\n[289]  0.00000000 18.40637075 23.89765810  0.78045947  9.23332461  0.00000000\n[295]  0.00000000  7.13352271  0.00000000  0.00000000  0.00000000  7.16914906\n[301]  0.00000000  0.00000000  0.13820154  0.00000000 11.25082456 17.08643178\n[307]  4.85251417  9.09591416  0.90530070 10.28168016  0.00000000  0.00000000\n[313]  0.00000000  0.25535809  0.00000000  0.00000000  1.39575809  0.00000000\n[319]  0.00000000  1.22409828  0.00000000  0.00000000  0.00000000"
  },
  {
    "objectID": "exercises/hoex2.html#investigating-pre-school-density",
    "href": "exercises/hoex2.html#investigating-pre-school-density",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "7.1 Investigating Pre School Density",
    "text": "7.1 Investigating Pre School Density\nWe can plot a histogram to investigate the distrubtion of PreSch Density.\n\n7.1.1 Histogram (hist) of mpsz3414$PreSch Density\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nhist plots a histogram quickly from the data provided in PreSch Density. However it lacks customisation capabilities. We can customise it further to add appropriate labels using ggplot2.\n\n\n7.1.2 Histogram (ggplot2) of mpsz3414$PreSch Density\n\nggplot(data=mpsz3414,\n       aes(x= as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  labs(title = \"Are pre-schools even distributed in Singapore?\",\n       subtitle = \"There are many planning sub-zones with a single pre-school on the other hand, \\n there are six planning-subzones with at least 20 pre-schools\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")\n\n\n\n\n\n\n\n\n\n\nScenario:\nUsing ggplot2, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count\n\n\n\n\nggplot(data=mpsz3414,\n       aes(x= as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) +\n  geom_point(color=\"black\",\n            fill=\"light blue\") +\n  xlim(0, 60) + \n  ylim(0, 60) +\n  labs(x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")\n\n\n\n\nHere, while the graph works without specifying xlim and ylim, we want to standardise the scales on x and y axes, hence, we specified the limits to be from 0 to 60 on both axes."
  },
  {
    "objectID": "exercises/hoex1.html",
    "href": "exercises/hoex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "",
    "text": "Firstly, the code below will check if pacman has been installed. If it has not been installed, R will download and install it, before activating it for use during this session.\n\nif (!require('pacman', character.only = T)){\n  install.packages('pacman')\n}\n\nLoading required package: pacman\n\nlibrary('pacman')\n\nNext, pacman assists us by helping us load R packages that we require, sf and tidyverse.\n\npacman::p_load(sf, tidyverse)\n\n\n\n\nFor the purpose of this exercise, the following public datasets are used:\n\n\n\nDataset Name\nSource\n\n\n\n\nMaster Plan 2014 Subzone Boundary (Web) (MP14_SUBZONE_WEB_PL.shp)\ndata.gov.sg\n\n\nPre-Schools Location (preschools-location.kml)\ndata.gov.sg\n\n\nCycling Path (CyclingPathGazette.shp)\nLTA Datamall\n\n\nLatest version of Singapore Airbnb listing data (listings.csv)\nInside Airbnb\n\n\n\nThe data has been extracted to Hands-on_Ex01/data/geospatial.\nMaster Plan and Cycling Path layers are provided in ES\nRI shapefile format, Pre-Schools Location provided in kml and Airbnb listings in csv format.\n\n\n\nThere are two shapefile (.shp) datasets, Master Plan 2014 Subzone Boundary (Web) and Cycling Path.\n\n\nFirstly, we will import Master Plan 2014 Subzone Boundary (Web). In the code below, dsn specifies the filepath where the dataset is located and layer provides the filename of the dataset excluding the file extension.\n\nmpsz = st_read(dsn = \"Hands-on_Ex01/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nFrom the above message, it tells us that the dataset contains multipolygon features, containing 323 multipolygon features and 15 fields in the mpsz simple feature data frame and is in the svy21 projected coordinates system. The bounding box provides us the x and y extents (x min, x max, y min, y max) of the data.\n\n\n\nNext, we will import Cycling Path.\n\ncyclingpath = st_read(dsn = \"Hands-on_Ex01/data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nFrom the above message, it tells us that the dataset contains mutlilinestring features, containing 2248 multilinestring features and 2 fields in the cyclingpath simple feature data frame and is in the svy21 projected coordinates system. Similarly, the bounding box provides us the x and y extents (x min, x max, y min, y max) of the data.\n\n\n\n\nThere is one kml dataset, Pre-Schools Location, that we have to import.\n\n\nIn the code below, we do not specify dsn and layer. Just the filepath and filename will suffice.\n\npreschools = st_read(\"Hands-on_Ex01/data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Hands-on_Ex01\\data\\geospatial\\preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nFrom the above message, it tells us that the dataset contains point features, containing 1359 features and 2 fields and is in the wgs84 projected coordinates system. Similarly, the bounding box provides us the x and y extents (x min, x max, y min, y max) of the data.\n\n\n\n\n\n\n\n\n\n\nDo recall that there are 2 different coordinate systems in use for the datasets here. Master Plan and Cycling Path utilises svy21 and Pre-Schools utilises wgs84."
  },
  {
    "objectID": "exercises/hoex1.html#st_geometry",
    "href": "exercises/hoex1.html#st_geometry",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "2.1 st_geometry()",
    "text": "2.1 st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nst_geometry() can help us obtain summarised details about a dataset about the geometry. In the case on The information provided is the same as what we have seen while importing the datasets earlier on."
  },
  {
    "objectID": "exercises/hoex1.html#glimpse",
    "href": "exercises/hoex1.html#glimpse",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "2.2 glimpse()",
    "text": "2.2 glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() can help us investigate what are the specific fields, its associated field data type and some sample data from the dataset to help us visualize the structure of the data."
  },
  {
    "objectID": "exercises/hoex1.html#head",
    "href": "exercises/hoex1.html#head",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "2.3 head()",
    "text": "2.3 head()\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nhead() can also help us obtain summarised details about a dataset as with glimpse(). Using the n=5 parameter inside function head, we are able to limit the amount of features to be shown to 5."
  },
  {
    "objectID": "exercises/hoex1.html#multi-plot-attributes",
    "href": "exercises/hoex1.html#multi-plot-attributes",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "3.1 Multi-plot Attributes",
    "text": "3.1 Multi-plot Attributes\nThe following code will plot multiple attributes within the dataframe up to a reasonable limit.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall"
  },
  {
    "objectID": "exercises/hoex1.html#geometry-plot",
    "href": "exercises/hoex1.html#geometry-plot",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "3.2 Geometry Plot",
    "text": "3.2 Geometry Plot\nRecall st_geometry from Checking Content of a Simple Data Frame from earlier? st_geometry provides the geometry of the map, where we could use plot to plot just the geomtry of the data frame.\n\nplot(st_geometry(mpsz))"
  },
  {
    "objectID": "exercises/hoex1.html#specific-attributes",
    "href": "exercises/hoex1.html#specific-attributes",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "3.3 Specific Attributes",
    "text": "3.3 Specific Attributes\nWe could also choose to plot a specific attribute of the data frame. The following code below will plot the PLN_AREA_N attribute.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "exercises/hoex1.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "exercises/hoex1.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "4.1 Assigning EPSG Code to a Simple Feature Data Frame",
    "text": "4.1 Assigning EPSG Code to a Simple Feature Data Frame\nThe coordinate system in the dataset could be wrongly assigned during the importing process or missing (missing .proj file for ESRI shapefile) when importing geospatial data into R.\n\n4.1.1 Checking the Coordinate System of the Data Frame\nTo check the coordinate system of a dataset, the st_crs() function of sf package could be used. Here, we check the coordinate system of mpsz simple feature data frame.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough the data frame has been projected in SVY21, if we look at the end of the output, it indicates that the EPSG is 9001 which is incorrect. The correct EPSG code for SVY21 should be 3414.\nIn the code chunk below, we will correct the crs to EPSG 3414.\n\nmpsz3414 <- st_set_crs(mpsz,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the crs if it has been updated.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the EPSG has been updated to 3414.\n\n\n4.1.2 Transforming from wgs84 to svy21\nIt is important in geospatial analytics to ensure that datasets are converted to projected coordinate system from the geographic coordinate system. Geographic coordinate system is not appropriate if analysis requires distance and/or area measurements.\n\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nIn the preschools data frame, it is in the wgs84 coordinate system.\nSince reprojection is necessary from wgs84 to svy21 mathematically, st_set_crs() would not be appropriate. We will utilise st_transform().\nIn the example below, we reproject the preschools dataframe to svy21 (EPSG 3414).\n\npreschools3414 <- st_transform(preschools, crs = 3414)\n\nLet’s see the content of the reprojected preschools3414 dataframe.\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the data frame is in svy21 coordinate system.\n\n\n\n\n\n\nIf the bounding box values are greater than the 0-360 decimal degree used by most geographic coordinate system, it means it is likely to be in a projected coordinate system."
  },
  {
    "objectID": "exercises/hoex1.html#importing-aspatial-data",
    "href": "exercises/hoex1.html#importing-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "5.1 Importing Aspatial Data",
    "text": "5.1 Importing Aspatial Data\nSince listings data set is in csv format, we will used read_csv() of readr package to import listing.csv and output it to an R object called listings, which is a tibble data frame.\n\nlistings <- read_csv(\"Hands-on_Ex01/data/aspatial/listings.csv\")\n\nRows: 4161 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nInstead of using glimpse() as shown earlier, list() could also do the job.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   145\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   184\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 4,151 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\nOur output shows our listing tibble data frame consists of 4161 rows and 18 columns. The useful fields we would be paying attention to is the latitude and longitude columns, which are in the decimal degree format. By assumption, we assume the data is in wgs84 Geographic Coordinate System."
  },
  {
    "objectID": "exercises/hoex1.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "exercises/hoex1.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "5.2 Creating a Simple Feature Data Frame from an Aspatial Data Frame",
    "text": "5.2 Creating a Simple Feature Data Frame from an Aspatial Data Frame\nThe code below converts the listings tibble data fame into a simple feature data frame by using st_as_sf() from sf packages, which converts foreign data formats to an sf object.\n\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %>%\n  st_transform(crs = 3414)\n\nThe arguments for\n\nlistings could be any other foreign data frame to be converted\ncoords requires to provide column name of x-coordinates followed by y-coordinates. The coordinates system also needs to be provided in terms of EPSG format. EPSG:4326 is the wgs84 Geographic Coordinate System whereas EPSG:3414 is Singapore’s svy21 Projected Coordinate System.\n%>% nest st_transform() into the st_as_sf() function to convert into svy21 coordinates"
  },
  {
    "objectID": "exercises/hoex1.html#examining-simple-feature-data-frame",
    "href": "exercises/hoex1.html#examining-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "5.3 Examining Simple Feature Data Frame",
    "text": "5.3 Examining Simple Feature Data Frame\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nPreviously, there were 18 columns in the aspatial data, only 17 columns exists now. Longitude and Latitude columns were dropped and a new column has been created for geometry."
  },
  {
    "objectID": "exercises/hoex1.html#buffering",
    "href": "exercises/hoex1.html#buffering",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "6.1 Buffering",
    "text": "6.1 Buffering\n\n\n\n\n\n\nScenario:\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extent of land needed to be acquired and their total area.\n\n\n\nFirstly, we utilise st_buffer() of sf package to compute the 5-metre buffers around cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist = 5,\n                            nQuadSegs = 30)\n\nWhat nQuadSegs alters is the generalisation of points to create the buffer. More segments means it is less generalised and less segments means more generalised buffers.\nNext, we calculate the area of the buffers.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nNow, we can sum the area to get total land required for the buffer.\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]"
  },
  {
    "objectID": "exercises/hoex1.html#point-in-polygon-count",
    "href": "exercises/hoex1.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "6.2 Point-in-polygon Count",
    "text": "6.2 Point-in-polygon Count\n\n\n\n\n\n\nScenario:\nA pre-school service group wants to find the number of pre-schools in each Planning Subzone.\n\n\n\nFirstly, we utilise st_intersects() of sf package to find which pre-schools falls under which planning subzone. Then, using lengths, we calculate the number of pre-schools within each planning subzone.\n\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschools3414))\n\nWe could use summary() to viewsummary statistics of the newly derived PreSch Count field.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\nWow! Here, we can see that there is at least one planning subzone with 58 pre-schools, with a mean of 5.96 pre-schools in each subzone.\nNow, let’s look at the top sub-zone with the most pre-schools.\nThe code below utilises top_n of dplyr package to look in the mpsz3414 dataframe, under the field PreSch Count for the top record\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\nHere, we can see that the top planning subzone with the most preschools is Tampines East.\n\n\n\n\n\n\nScenario:\nCalculate the density of pre-school by planning subzone\n\n\n\nFirst, the formula for density is density = count / area\nWe will first calculate the area of each subzone below:\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, we will use mutate() of dplyr package to compute density. We multiply it by 1000000 to reduce the amount of decimal points by converting it to km2 for easier handling.\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nNow, we can view the density of preschools.\n\nlist(mpsz3414$`PreSch Density`)\n\n[[1]]\nUnits: [1/m^2]\n  [1]  0.00000000  8.93150215  0.00000000  6.71784674  5.16223032  9.70516876\n  [7]  7.24989604  6.89216325  5.53101261  1.58316954  3.28434449  6.80952137\n [13]  0.00000000  2.54735962 11.84392175  0.00000000  0.00000000  0.00000000\n [19]  0.00000000  0.40657576  0.00000000  9.68631056  0.00000000  1.48058527\n [25] 10.83710054 15.70722567 35.60169297  5.47445116  6.18629982  8.20434375\n [31]  0.00000000  0.00000000  9.03949026  0.00000000  7.28645544 17.02931505\n [37] 25.35629701 15.89256712  0.00000000 11.15753677  0.00000000  8.55218466\n [43]  3.81906935  0.00000000  3.38235947  0.00000000 14.99604968  1.40732345\n [49]  8.01406205  0.00000000  0.56949216  5.86952041  3.03547315 11.71891220\n [55]  8.14148847  0.00000000  4.50504548  3.56920079  9.33487616  0.00000000\n [61]  5.62143826  0.00000000  3.14611804  9.93599725 17.95935646  0.00000000\n [67]  5.36153142  1.23223830  5.83558926  3.22047037  1.44233198  3.07398190\n [73]  2.21008233  5.73475293  0.00000000  0.00000000  1.82176954  9.49222530\n [79]  0.00000000  0.00000000  2.97422984  0.00000000  8.68525951  1.83998165\n [85]  7.18639790  0.00000000  0.00000000  5.36902632  0.00000000  2.38539919\n [91]  4.15173953  1.17625763  0.00000000  0.00000000  3.71428866  0.00000000\n [97]  0.00000000 10.30968514  0.00000000  3.52586966  6.81950547  0.00000000\n[103] 11.20672769  0.00000000  4.07884557  2.10935105  1.51390154  7.67355379\n[109] 10.89459084  9.34277714  0.00000000  0.00000000  5.19103594 10.30880422\n[115]  0.00000000  4.91199399  8.37774399 13.90186364 13.05635620  4.03408588\n[121]  4.68205034  0.00000000  0.00000000  0.00000000 10.30828105  6.59711016\n[127]  8.54111363  0.00000000  0.00000000  9.35774736  3.91277524  9.73248928\n[133]  9.52960696  4.07004471  9.01512182  0.88420004  5.85700658  9.21924053\n[139]  9.38756233  0.00000000  7.29210328 14.33152883  0.95320866  0.00000000\n[145]  1.22943315 14.14811689  0.00000000  4.82029416  4.96423679 10.81358754\n[151]  3.87478236 16.37550727  4.20286113  1.92511630  0.00000000  2.27575881\n[157]  3.78370366  0.00000000  4.54910663  9.37229330 11.20468789  0.00000000\n[163] 10.13730087  1.38998948 11.13208882  0.00000000  6.28324782 12.10849477\n[169]  1.46373505  5.42827717  2.50973772 11.03366227 10.52072865  9.49878064\n[175] 11.24580300 11.12890128 13.93950764  0.00000000  0.00000000 10.35889471\n[181]  6.12997351  8.63257212  6.52702292  0.00000000  6.45113675  8.65521161\n[187]  2.02537466  0.96587505 13.36459686  4.45419682  0.00000000  3.86526962\n[193] 12.69090170  5.93156946  1.62615585  2.07322060  7.12358161  8.11313906\n[199]  9.67642203 12.64374315  0.00000000 13.05378261  0.00000000 10.91908952\n[205]  4.47169158 10.97443928 15.73682882 10.53521767  0.00000000  7.86180592\n[211]  7.94696181  4.61489164  1.02119062  6.11811051 15.06832167 11.36765405\n[217]  7.09104861 10.31880873 11.98092893  5.46797281  0.00000000 16.45587097\n[223]  6.40125464 14.81499038  4.29058729  6.40314089  2.68546919  8.79682941\n[229]  0.47286030  2.09945890 11.21716914  3.17460839  4.01850845  0.00000000\n[235]  0.00000000  4.14472875 11.63901574 16.47133302  7.18459670  6.48975999\n[241] 10.17545246  4.63093287  9.05523476  1.03085549  2.42737742 11.58770447\n[247]  0.78643969 10.46342303 15.77874328  8.60077770  3.25580555  0.00000000\n[253] 21.90726711  5.95439968  1.62661251  0.00000000  0.00000000  4.07046653\n[259] 11.94152678 16.57069701  0.00000000  5.43686743 13.78099282 15.16440245\n[265]  0.00000000  8.46092732 14.10108710  0.00000000  0.05698650  0.00000000\n[271]  0.00000000 20.61136242 11.34007216  0.00000000 14.17732715  0.70978094\n[277]  4.41176266 34.93133940 11.45820473  0.00000000  0.00000000  7.61420607\n[283] 10.20733340 10.18622170  0.01433727  0.00000000 10.54179983  1.67883220\n[289]  0.00000000 18.40637075 23.89765810  0.78045947  9.23332461  0.00000000\n[295]  0.00000000  7.13352271  0.00000000  0.00000000  0.00000000  7.16914906\n[301]  0.00000000  0.00000000  0.13820154  0.00000000 11.25082456 17.08643178\n[307]  4.85251417  9.09591416  0.90530070 10.28168016  0.00000000  0.00000000\n[313]  0.00000000  0.25535809  0.00000000  0.00000000  1.39575809  0.00000000\n[319]  0.00000000  1.22409828  0.00000000  0.00000000  0.00000000"
  },
  {
    "objectID": "exercises/hoex1.html#investigating-pre-school-density",
    "href": "exercises/hoex1.html#investigating-pre-school-density",
    "title": "Hands-on Exercise 1: Geospatial Data Handling and Wrangling",
    "section": "7.1 Investigating Pre School Density",
    "text": "7.1 Investigating Pre School Density\nWe can plot a histogram to investigate the distrubtion of PreSch Density.\n\n7.1.1 Histogram (hist) of mpsz3414$PreSch Density\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nhist plots a histogram quickly from the data provided in PreSch Density. However it lacks customisation capabilities. We can customise it further to add appropriate labels using ggplot2.\n\n\n7.1.2 Histogram (ggplot2) of mpsz3414$PreSch Density\n\nggplot(data=mpsz3414,\n       aes(x= as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  labs(title = \"Are pre-schools even distributed in Singapore?\",\n       subtitle = \"There are many planning sub-zones with a single pre-school on the other hand, \\n there are six planning-subzones with at least 20 pre-schools\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")\n\n\n\n\n\n\n\n\n\n\nScenario:\nUsing ggplot2, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count\n\n\n\n\nggplot(data=mpsz3414,\n       aes(x= as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) +\n  geom_point(color=\"black\",\n            fill=\"light blue\") +\n  xlim(0, 60) + \n  ylim(0, 60) +\n  labs(x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")\n\n\n\n\nHere, while the graph works without specifying xlim and ylim, we want to standardise the scales on x and y axes, hence, we specified the limits to be from 0 to 60 on both axes."
  },
  {
    "objectID": "exercises/icex02.html",
    "href": "exercises/icex02.html",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the ruralcommunity, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate geospatial data wrangling methods to prepare the data for water point mapping study. For the purpose of this study, Nigeria will be used as the study country.\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nVisualising the distribution of water point by using appropriate analytical visualisation methods."
  },
  {
    "objectID": "exercises/icex02.html#st_geometry",
    "href": "exercises/icex02.html#st_geometry",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "2.1 st_geometry()",
    "text": "2.1 st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nst_geometry() can help us obtain summarised details about a dataset about the geometry. In the case on The information provided is the same as what we have seen while importing the datasets earlier on."
  },
  {
    "objectID": "exercises/icex02.html#glimpse",
    "href": "exercises/icex02.html#glimpse",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "2.2 glimpse()",
    "text": "2.2 glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() can help us investigate what are the specific fields, its associated field data type and some sample data from the dataset to help us visualize the structure of the data."
  },
  {
    "objectID": "exercises/icex02.html#head",
    "href": "exercises/icex02.html#head",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "2.3 head()",
    "text": "2.3 head()\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nhead() can also help us obtain summarised details about a dataset as with glimpse(). Using the n=5 parameter inside function head, we are able to limit the amount of features to be shown to 5."
  },
  {
    "objectID": "exercises/icex02.html#multi-plot-attributes",
    "href": "exercises/icex02.html#multi-plot-attributes",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.1 Multi-plot Attributes",
    "text": "3.1 Multi-plot Attributes\nThe following code will plot multiple attributes within the dataframe up to a reasonable limit.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall"
  },
  {
    "objectID": "exercises/icex02.html#geometry-plot",
    "href": "exercises/icex02.html#geometry-plot",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.2 Geometry Plot",
    "text": "3.2 Geometry Plot\nRecall st_geometry from Checking Content of a Simple Data Frame from earlier? st_geometry provides the geometry of the map, where we could use plot to plot just the geomtry of the data frame.\n\nplot(st_geometry(mpsz))"
  },
  {
    "objectID": "exercises/icex02.html#specific-attributes",
    "href": "exercises/icex02.html#specific-attributes",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.3 Specific Attributes",
    "text": "3.3 Specific Attributes\nWe could also choose to plot a specific attribute of the data frame. The following code below will plot the PLN_AREA_N attribute.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "exercises/icex02.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "exercises/icex02.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "4.1 Assigning EPSG Code to a Simple Feature Data Frame",
    "text": "4.1 Assigning EPSG Code to a Simple Feature Data Frame\nThe coordinate system in the dataset could be wrongly assigned during the importing process or missing (missing .proj file for ESRI shapefile) when importing geospatial data into R.\n\n4.1.1 Checking the Coordinate System of the Data Frame\nTo check the coordinate system of a dataset, the st_crs() function of sf package could be used. Here, we check the coordinate system of mpsz simple feature data frame.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough the data frame has been projected in SVY21, if we look at the end of the output, it indicates that the EPSG is 9001 which is incorrect. The correct EPSG code for SVY21 should be 3414.\nIn the code chunk below, we will correct the crs to EPSG 3414.\n\nmpsz3414 <- st_set_crs(mpsz,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the crs if it has been updated.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the EPSG has been updated to 3414.\n\n\n4.1.2 Transforming from wgs84 to svy21\nIt is important in geospatial analytics to ensure that datasets are converted to projected coordinate system from the geographic coordinate system. Geographic coordinate system is not appropriate if analysis requires distance and/or area measurements.\n\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nIn the preschools data frame, it is in the wgs84 coordinate system.\nSince reprojection is necessary from wgs84 to svy21 mathematically, st_set_crs() would not be appropriate. We will utilise st_transform().\nIn the example below, we reproject the preschools dataframe to svy21 (EPSG 3414).\n\npreschools3414 <- st_transform(preschools, crs = 3414)\n\nLet’s see the content of the reprojected preschools3414 dataframe.\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the data frame is in svy21 coordinate system.\n\n\n\n\n\n\nIf the bounding box values are greater than the 0-360 decimal degree used by most geographic coordinate system, it means it is likely to be in a projected coordinate system."
  },
  {
    "objectID": "exercises/icex02.html#importing-aspatial-data",
    "href": "exercises/icex02.html#importing-aspatial-data",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "5.1 Importing Aspatial Data",
    "text": "5.1 Importing Aspatial Data\nSince listings data set is in csv format, we will used read_csv() of readr package to import listing.csv and output it to an R object called listings, which is a tibble data frame.\n\nlistings <- read_csv(\"Hands-on_Ex01/data/aspatial/listings.csv\")\n\nRows: 4161 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nInstead of using glimpse() as shown earlier, list() could also do the job.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   145\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   184\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 4,151 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\nOur output shows our listing tibble data frame consists of 4161 rows and 18 columns. The useful fields we would be paying attention to is the latitude and longitude columns, which are in the decimal degree format. By assumption, we assume the data is in wgs84 Geographic Coordinate System."
  },
  {
    "objectID": "exercises/icex02.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "exercises/icex02.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "5.2 Creating a Simple Feature Data Frame from an Aspatial Data Frame",
    "text": "5.2 Creating a Simple Feature Data Frame from an Aspatial Data Frame\nThe code below converts the listings tibble data fame into a simple feature data frame by using st_as_sf() from sf packages, which converts foreign data formats to an sf object.\n\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 3426) %>%\n  st_transform(crs = 3414)\n\nThe arguments for\n\nlistings could be any other foreign data frame to be converted\ncoords requires to provide column name of x-coordinates followed by y-coordinates. The coordinates system also needs to be provided in terms of EPSG format. EPSG:4326 is the wgs84 Geographic Coordinate System whereas EPSG:3414 is Singapore’s svy21 Projected Coordinate System.\n%>% nest st_transform() into the st_as_sf() function to convert into svy21 coordinates"
  },
  {
    "objectID": "exercises/icex02.html#examining-simple-feature-data-frame",
    "href": "exercises/icex02.html#examining-simple-feature-data-frame",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "5.3 Examining Simple Feature Data Frame",
    "text": "5.3 Examining Simple Feature Data Frame\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (2020290 15212633), POINT (…\n\n\nPreviously, there were 18 columns in the aspatial data, only 17 columns exists now. Longitude and Latitude columns were dropped and a new column has been created for geometry."
  },
  {
    "objectID": "exercises/icex02.html#buffering",
    "href": "exercises/icex02.html#buffering",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "6.1 Buffering",
    "text": "6.1 Buffering\n\n\n\n\n\n\nScenario:\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extent of land needed to be acquired and their total area.\n\n\n\nFirstly, we utilise st_buffer() of sf package to compute the 5-metre buffers around cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist = 5,\n                            nQuadSegs = 30)\n\nWhat nQuadSegs alters is the generalisation of points to create the buffer. More segments means it is less generalised and less segments means more generalised buffers.\nNext, we calculate the area of the buffers.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nNow, we can sum the area to get total land required for the buffer.\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]"
  },
  {
    "objectID": "exercises/icex02.html#point-in-polygon-count",
    "href": "exercises/icex02.html#point-in-polygon-count",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.3 Point-in-polygon Count",
    "text": "3.3 Point-in-polygon Count\nUtilising st_intersects() of sf package and lengths, we can find how many Functional water points and Total (non-NA) water points fall under which LGA.\n\ngbnigeria26391$`Functional Count` <- lengths(st_intersects(gbnigeria26391, wpdx_func))\ngbnigeria26391$`Total Count` <- lengths(st_intersects(gbnigeria26391, wpdx_nonna))\n\nUsing summary() , we can view summary statistics of the newly derived Functional Count and Total Count fields.\n\nsummary(gbnigeria26391$`Functional Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   13.00   38.00   59.27   75.00  670.00 \n\n\n\nsummary(gbnigeria26391$`Total Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   36.25   87.00  108.95  152.50  894.00"
  },
  {
    "objectID": "exercises/icex02.html#investigating-pre-school-density",
    "href": "exercises/icex02.html#investigating-pre-school-density",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "7.1 Investigating Pre School Density",
    "text": "7.1 Investigating Pre School Density\nWe can plot a histogram to investigate the distrubtion of PreSch Density.\n\n7.1.1 Histogram (hist) of mpsz3414$PreSch Density\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nhist plots a histogram quickly from the data provided in PreSch Density. However it lacks customisation capabilities. We can customise it further to add appropriate labels using ggplot2.\n\n\n7.1.2 Histogram (ggplot2) of mpsz3414$PreSch Density\n\nggplot(data=mpsz3414,\n       aes(x= as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  labs(title = \"Are pre-schools even distributed in Singapore?\",\n       subtitle = \"There are many planning sub-zones with a single pre-school on the other hand, \\n there are six planning-subzones with at least 20 pre-schools\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")\n\n\n\n\n\n\n\n\n\n\nScenario:\nUsing ggplot2, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count\n\n\n\n\nggplot(data=mpsz3414,\n       aes(x= as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) +\n  geom_point(color=\"black\",\n            fill=\"light blue\") +\n  xlim(0, 60) + \n  ylim(0, 60) +\n  labs(x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")\n\n\n\n\nHere, while the graph works without specifying xlim and ylim, we want to standardise the scales on x and y axes, hence, we specified the limits to be from 0 to 60 on both axes."
  },
  {
    "objectID": "exercises/icex02.html#installing-and-loading-packages",
    "href": "exercises/icex02.html#installing-and-loading-packages",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "2.1 Installing and Loading Packages",
    "text": "2.1 Installing and Loading Packages\nFirstly, the code below will check if pacman has been installed. If it has not been installed, R will download and install it, before activating it for use during this session.\n\nif (!require('pacman', character.only = T)){\n  install.packages('pacman')\n}\nlibrary('pacman')\n\nNext, pacman assists us by helping us load R packages that we require, sf, tidyverse and funModeling.\n\npacman::p_load(sf, tidyverse, funModeling)"
  },
  {
    "objectID": "exercises/icex02.html#data-acquisition",
    "href": "exercises/icex02.html#data-acquisition",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "2.2 Data Acquisition",
    "text": "2.2 Data Acquisition\nFor the purpose of this exercise, the following public datasets are used:\n\n\n\nDataset Name\nSource\n\n\n\n\nWPdx+ (Water_Point_Data_Exchange_-_Plus__WPdx__.csv)\nWPdx Global Data Repositories\n\n\ngeoBoundaries Nigeria Level-2 Administrative Boundary (geoBoundaries-NGA-ADM2.shp) - UN OCHA CODs\ngeoBoundaries\n\n\n\nThe data has been extracted to In-Class_Ex02/data/geospatial."
  },
  {
    "objectID": "exercises/icex02.html#importing-geospatial-shapefile-datasets",
    "href": "exercises/icex02.html#importing-geospatial-shapefile-datasets",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "1.3 Importing Geospatial Shapefile Datasets",
    "text": "1.3 Importing Geospatial Shapefile Datasets\nThere are two shapefile (.shp) datasets, Master Plan 2014 Subzone Boundary (Web) and Cycling Path.\n\n1.3.1 Importing Master Plan 2014 Subzone Boundary (Web)\nFirstly, we will import Master Plan 2014 Subzone Boundary (Web). In the code below, dsn specifies the filepath where the dataset is located and layer provides the filename of the dataset excluding the file extension.\n\nmpsz = st_read(dsn = \"Hands-on_Ex01/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nFrom the above message, it tells us that the dataset contains multipolygon features, containing 323 multipolygon features and 15 fields in the mpsz simple feature data frame and is in the svy21 projected coordinates system. The bounding box provides us the x and y extents (x min, x max, y min, y max) of the data.\n\n\n1.3.2 Importing Cycling Path\nNext, we will import Cycling Path.\n\ncyclingpath = st_read(dsn = \"Hands-on_Ex01/data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nFrom the above message, it tells us that the dataset contains mutlilinestring features, containing 2248 multilinestring features and 2 fields in the cyclingpath simple feature data frame and is in the svy21 projected coordinates system. Similarly, the bounding box provides us the x and y extents (x min, x max, y min, y max) of the data."
  },
  {
    "objectID": "exercises/icex02.html#importing-geospatial-gis-datasets-in-kml-format",
    "href": "exercises/icex02.html#importing-geospatial-gis-datasets-in-kml-format",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "1.4 Importing Geospatial GIS Datasets in kml format",
    "text": "1.4 Importing Geospatial GIS Datasets in kml format\nThere is one kml dataset, Pre-Schools Location, that we have to import.\n\n1.4.1 Importing Pre-Schools Location\nIn the code below, we do not specify dsn and layer. Just the filepath and filename will suffice.\n\npreschools = st_read(\"Hands-on_Ex01/data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Hands-on_Ex01\\data\\geospatial\\preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nFrom the above message, it tells us that the dataset contains point features, containing 1359 features and 2 fields and is in the wgs84 projected coordinates system. Similarly, the bounding box provides us the x and y extents (x min, x max, y min, y max) of the data."
  },
  {
    "objectID": "exercises/icex02.html#additional-notes",
    "href": "exercises/icex02.html#additional-notes",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "1.5 Additional Notes",
    "text": "1.5 Additional Notes\n\n\n\n\n\n\nDo recall that there are 2 different coordinate systems in use for the datasets here. Master Plan and Cycling Path utilises svy21 and Pre-Schools utilises wgs84."
  },
  {
    "objectID": "exercises/icex02.html#geoboundaries-nigeria-level-2-administrative-boundary-dataset",
    "href": "exercises/icex02.html#geoboundaries-nigeria-level-2-administrative-boundary-dataset",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "2.3 geoBoundaries Nigeria Level-2 Administrative Boundary Dataset",
    "text": "2.3 geoBoundaries Nigeria Level-2 Administrative Boundary Dataset\n\n2.3.1 Importing geoBoundaries Nigeria Level-2 Administrative Boundary Dataset\nIn the code below, dsn specifies the filepath where the dataset is located and layer provides the filename of the dataset excluding the file extension.\n\ngbnigeria = st_read(dsn = \"In-Class_Ex02/data/geospatial\", layer = \"geoBoundaries-NGA-ADM2\")\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nFrom the above message, it tells us that the dataset contains multipolygon features, containing 774 multipolygon features and 5 fields in the gbnigeria simple feature data frame and is in the WGS84 geographic coordinates system.\n\n\n2.3.2 Checking the Coordinate Reference System\nIn the code below, we will check if the Coordinate Reference System has been specified correctly.\n\nst_crs(gbnigeria)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nAs seen above, the file has been configured correctly, having a WGS84 Geographic Coordinate System which maps to EPSG:4326.\n\n\n2.3.2 Converting the Coordinate Reference System\nIn the code below, we will convert the Geographic Coordinate Reference System from WGS84 to EPSG:26391 Projected Coordinate System.\n\ngbnigeria26391 <- st_transform(gbnigeria, crs = 26391)\n\n\nst_crs(gbnigeria26391)\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\nAfter running the code, we can confirm that the data frame has been converted to EPSG:26391 Projected Coordinate System."
  },
  {
    "objectID": "exercises/icex02.html#wpdx-aspatial-data",
    "href": "exercises/icex02.html#wpdx-aspatial-data",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "2.4 WPdx+ Aspatial Data",
    "text": "2.4 WPdx+ Aspatial Data\n\n2.4.1 Importing WPdx+ Aspatial Data\nSince WPdx+ data set is in csv format, we will use read_csv() of readr package to import Water_Point_Data_Exchange_-_Plus__WPdx__.csv and output it to an R object called wpdx.\n\nwpdx <- read_csv(\"In-Class_Ex02/data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\n\nlist(wpdx)\n\n[[1]]\n# A tibble: 95,008 × 70\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 61 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nOur output shows our wpdx tibble data frame consists of 95,008 rows and 70 columns. The useful fields we would be paying attention to is the #lat_deg and #lon_deg columns, which are in the decimal degree format. By viewing the Data Standard on wpdx’s website, we know that the latitude and longitude is in the wgs84 Geographic Coordinate System.\n\n\n2.4.2 Creating a Simple Feature Data Frame from an Aspatial Data Frame and Converting Coordinate System\nThe code below converts the wpdx tibble data fame into a simple feature data frame by using st_as_sf() from sf packages, which converts foreign data formats to an sf object. At the same time, the st_transform statement will convert the longitude, latitude Geographic Coordinate System from EPSG:4236 (WGS 84) to EPSG:26391, one of Nigeria’s Projected Coordinate Systems.\n\nwpdx_sf <- st_as_sf(wpdx,\n                    coords = c(\"#lon_deg\", \"#lat_deg\"),\n                    crs = 4326) %>%\n  st_transform(crs = 26391)\n\n\nlist(wpdx_sf)\n\n[[1]]\nSimple feature collection with 95008 features and 68 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 32536.82 ymin: 33461.24 xmax: 1292096 ymax: 1091052\nProjected CRS: Minna / Nigeria West Belt\n# A tibble: 95,008 × 69\n   row_id `#source`      #repo…¹ #stat…² #wate…³ #wate…⁴ #wate…⁵ #wate…⁶ #faci…⁷\n *  <dbl> <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3          08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta… Improv…\n 2 222071 Federal Minis… 08/16/… Yes     Boreho… Well    Mechan… Mechan… Improv…\n 3 160612 WaterAid       12/04/… Yes     Boreho… Well    Hand P… Hand P… Improv…\n 4 160669 WaterAid       12/04/… Yes     Boreho… Well    <NA>    <NA>    Improv…\n 5 160642 WaterAid       12/04/… Yes     Boreho… Well    Hand P… Hand P… Improv…\n 6 160628 WaterAid       12/04/… Yes     Boreho… Well    Hand P… Hand P… Improv…\n 7 160632 WaterAid       12/04/… Yes     Boreho… Well    Hand P… Hand P… Improv…\n 8 642747 Living Water … 10/03/… Yes     Boreho… Well    Mechan… Mechan… Improv…\n 9 642456 Living Water … 10/03/… Yes     Boreho… Well    Hand P… Hand P… Improv…\n10 641347 Living Water … 03/28/… Yes     Boreho… Well    Hand P… Hand P… Improv…\n# … with 94,998 more rows, 60 more variables: `#clean_country_name` <chr>,\n#   `#clean_adm1` <chr>, `#clean_adm2` <chr>, `#clean_adm3` <chr>,\n#   `#clean_adm4` <chr>, `#install_year` <dbl>, `#installer` <chr>,\n#   `#rehab_year` <lgl>, `#rehabilitator` <lgl>, `#management_clean` <chr>,\n#   `#status_clean` <chr>, `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>,\n#   `#activity_id` <chr>, `#scheme_id` <chr>, `#wpdx_id` <chr>, …\n\n\nPreviously, there were 70 columns in the aspatial data, only 69 columns exists now. #lat and #lon columns were dropped and a new column has been created for geometry."
  },
  {
    "objectID": "exercises/icex02.html#obtaining-functional-and-non-functional-counts",
    "href": "exercises/icex02.html#obtaining-functional-and-non-functional-counts",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.1 Obtaining Functional and Non Functional Counts",
    "text": "3.1 Obtaining Functional and Non Functional Counts\nFirst, let us have a look at the #status_clean column which stores the information about Functional and Non-Functional data points.\n\nlist(wpdx[\"#status_clean\"])\n\n[[1]]\n# A tibble: 95,008 × 1\n   `#status_clean`\n   <chr>          \n 1 <NA>           \n 2 Functional     \n 3 <NA>           \n 4 <NA>           \n 5 <NA>           \n 6 <NA>           \n 7 <NA>           \n 8 <NA>           \n 9 <NA>           \n10 <NA>           \n# … with 94,998 more rows\n\n\n\nwpdx_func <- wpdx_sf %>% filter(`#status_clean` == \"Functional\")\nwpdx_nonna <- wpdx_sf %>% filter(`#status_clean` != \"NA\")"
  },
  {
    "objectID": "exercises/icex02.html#understanding-category-labels",
    "href": "exercises/icex02.html#understanding-category-labels",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.1 Understanding Category Labels",
    "text": "3.1 Understanding Category Labels\nFirst, let us have a look at the #status_clean column which stores the information about Functional and Non-Functional data points. The code below returns all unique values that were used in the column.\n\nunique(wpdx[\"#status_clean\"])\n\n# A tibble: 9 × 1\n  `#status_clean`                 \n  <chr>                           \n1 <NA>                            \n2 Functional                      \n3 Abandoned/Decommissioned        \n4 Non-Functional                  \n5 Functional but not in use       \n6 Functional but needs repair     \n7 Abandoned                       \n8 Non functional due to dry season\n9 Non-Functional due to dry season\n\n\nAs we are interested in looking into the Proportions of Functional and Non-functional water points, we can safely disregard the NA values.\nNext, from our remaining 8 category labels, all except those marked strictly as Functional are Non-functional. These Non-functional labels could include categories marked as Abadoned, Functional but not in use (which means its non-functional at that point) and Functional but needs repair, should be classified"
  },
  {
    "objectID": "exercises/icex02.html#filtering-data",
    "href": "exercises/icex02.html#filtering-data",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.2 Filtering Data",
    "text": "3.2 Filtering Data\nWith our previous knowledge, we can filter the data to obtain functional proportion counts in each LGA level. The functional proportion counts could be obtained through Functional Proportion = Functional Count / Total Count\nHence, the code below will filter Functional Count (for functional water points) and Total Count (for water points that are not NA) into separate data frames.\n\nwpdx_func <- wpdx_sf %>% filter(`#status_clean` == \"Functional\")\nwpdx_nonna <- wpdx_sf %>% filter(`#status_clean` != \"NA\")"
  },
  {
    "objectID": "exercises/icex02.html#calculating-proportion-of-water-points",
    "href": "exercises/icex02.html#calculating-proportion-of-water-points",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.4 Calculating Proportion of Water Points",
    "text": "3.4 Calculating Proportion of Water Points\nNext, we will use mutate() of dplyr package to compute the proportion of Functional and Non- water points.\nThis is given by Functional Proportion = Functional Count / Total Count.\n\ngbnigeria26391 <- gbnigeria26391 %>%\n  mutate(`Functional Proportion` = `Functional Count`/`Total Count`)\n\nNow, we can view the summary of all LGA.\n\nsummary(gbnigeria26391$`Functional Proportion`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.3448  0.4833  0.4955  0.6387  1.0000      21 \n\n\nWhy do we see 21 NAs? In 3.2, we have already removed the NA values. Let us check the NA values that are recorded under the Functional Proportion column.\n\nlist(gbnigeria26391 %>% filter(`Functional Proportion` == \"NaN\") )\n\n[[1]]\nSimple feature collection with 21 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 101566.3 ymin: 89533.9 xmax: 1343798 ymax: 1092644\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n    shapeName    pcode level                    shapeID shapeGroup shapeType\n1    Madagali NG002010  ADM2 NGA-ADM2-13203401B61781029        NGA      ADM2\n2      Abadam NG008001  ADM2 NGA-ADM2-13203401B32056311        NGA      ADM2\n3        Bama NG008003  ADM2 NGA-ADM2-13203401B17712835        NGA      ADM2\n4      Damboa NG008007  ADM2 NGA-ADM2-13203401B45202019        NGA      ADM2\n5       Dikwa NG008008  ADM2 NGA-ADM2-13203401B80916619        NGA      ADM2\n6       Gubio NG008009  ADM2 NGA-ADM2-13203401B97417667        NGA      ADM2\n7    Guzamala NG008010  ADM2 NGA-ADM2-13203401B26924752        NGA      ADM2\n8       Gwoza NG008011  ADM2  NGA-ADM2-13203401B8862109        NGA      ADM2\n9        Kaga NG008014  ADM2 NGA-ADM2-13203401B28031404        NGA      ADM2\n10 Kala/Balge NG008015  ADM2 NGA-ADM2-13203401B85515115        NGA      ADM2\n                         geometry Functional Count Total Count\n1  MULTIPOLYGON (((1239405 783...                0           0\n2  MULTIPOLYGON (((1245549 106...                0           0\n3  MULTIPOLYGON (((1334890 876...                0           0\n4  MULTIPOLYGON (((1200101 776...                0           0\n5  MULTIPOLYGON (((1303878 886...                0           0\n6  MULTIPOLYGON (((1159707 993...                0           0\n7  MULTIPOLYGON (((1168642 102...                0           0\n8  MULTIPOLYGON (((1239405 783...                0           0\n9  MULTIPOLYGON (((1127455 815...                0           0\n10 MULTIPOLYGON (((1334890 876...                0           0\n   Functional Proportion\n1                    NaN\n2                    NaN\n3                    NaN\n4                    NaN\n5                    NaN\n6                    NaN\n7                    NaN\n8                    NaN\n9                    NaN\n10                   NaN\n\n\nOh, so from the records above, it appears that the Functional Proportion column is NA as there were no non-NA records of any water pumps within that LGA. In short, there were no records of water pumps."
  },
  {
    "objectID": "exercises/icex02.html#geospatial-plot",
    "href": "exercises/icex02.html#geospatial-plot",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "4.1 Geospatial Plot",
    "text": "4.1 Geospatial Plot\nWe can plot a simple geospatial visualisation of the map of Nigeria’s LGA to the proportion of functional to total water pumps within the LGA.\nFor white areas, these are areas where there was no data on any water pump (functional or non-functional) in the region.\n\nplot(gbnigeria26391['Functional Proportion'],main = \"Proportion Functional to Non-Functional Water Points\")"
  },
  {
    "objectID": "exercises/icex02.html#exploratory-data-analysis-eda",
    "href": "exercises/icex02.html#exploratory-data-analysis-eda",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "4.2 Exploratory Data Analysis (EDA)",
    "text": "4.2 Exploratory Data Analysis (EDA)\nWe will save the values to another variable to perform EDA.\n\ngbnigeria26391_analysis <- gbnigeria26391\n\nIn our EDA, let us calculate the area in m^2 for some correlation analysis later. Let us save it as int.\n\ngbnigeria26391_analysis$AREA <- as.numeric(st_area(gbnigeria26391_analysis))\n\nFor our EDA, we need to drop the geometry values. We will set the geometry to NULL to remove all the geometry values.\n\nst_geometry(gbnigeria26391_analysis) <- NULL \n\nBy using profiling_num of funModeling package, we will be able to get some descriptive statistics.\n\nprofiling_num(gbnigeria26391_analysis)\n\n               variable         mean      std_dev variation_coef         p_01\n1      Functional Count 5.926873e+01 7.553528e+01      1.2744541 0.000000e+00\n2           Total Count 1.089548e+02 1.030984e+02      0.9462496 0.000000e+00\n3 Functional Proportion 4.954910e-01 2.121557e-01      0.4281727 3.170909e-02\n4                  AREA 1.182254e+09 1.411630e+09      1.1940157 1.340083e+07\n          p_05         p_25         p_50         p_75         p_95         p_99\n1 1.000000e+00 1.300000e+01 3.800000e+01 7.500000e+01 1.872000e+02 3.918900e+02\n2 4.000000e+00 3.625000e+01 8.700000e+01 1.525000e+02 2.944000e+02 4.887800e+02\n3 1.758824e-01 3.448276e-01 4.832536e-01 6.387097e-01 8.792982e-01 1.000000e+00\n4 5.321743e+07 2.802043e+08 7.149905e+08 1.513378e+09 3.980630e+09 6.751858e+09\n   skewness  kurtosis          iqr                             range_98\n1 3.4927669 20.665452 6.200000e+01                          [0, 391.89]\n2 2.3395608 12.453790 1.162500e+02                          [0, 488.78]\n3 0.2596697  2.634984 2.938821e-01              [0.0317090909090909, 1]\n4 2.6998921 13.123940 1.233174e+09 [13400828.6775154, 6751858494.69934]\n                              range_80\n1                             [5, 128]\n2                          [13, 220.8]\n3             [0.229760795278037, 0.8]\n4 [115511990.291964, 2710885284.18212]\n\n\nSimilarly, using the plot_num function of funModeling package, we can plot a histogram of the numerical columns.\n\nplot_num(gbnigeria26391_analysis,bins = 10)\n\n\n\n\n\nboxplot(gbnigeria26391_analysis$`Functional Proportion`,\nmain = \"Proportion Functional to Non-Functional Water Points\",\nhorizontal = TRUE)\n\n\n\n\nFrom the numerical plots, boxplot and descriptive statistics generated, we can tell that the functional to non-functional proportion of water points is roughly bell-shaped, with a median of approximately 0.48. There are no extreme outlier values."
  },
  {
    "objectID": "exercises/hoex2.html#data-wrangling",
    "href": "exercises/hoex2.html#data-wrangling",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.1 Data Wrangling",
    "text": "2.1 Data Wrangling\nWe need to perform some data wrangling and transformation to obtain the data in a format that we want to visualise it in.\nThe specific transformation we have to perform is to group various age groups into categories as mentioned above.\nWe could use the following functions to help us:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 <- population %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nFrom the code above, as the original table groups data into more specific breakdowns such as Sex and TOD which is not required for our analysis, we use group_by to regroup the data by PA, SZ and AG.\nThe summarise function sums the various pop values under the grouped rows together.\nAfter performing the calculations, we ungroup the data. Then, by utilising pivot_wider, we specify to shift the AG labels in many rows to become a column label. This will result in PA, SZ having a singular row, with the various AG as their individual column within the row.\nmutate is used to sum various values together to obtain the desired categories that was specified earlier. select statement writes the specific column values to the new dataframe."
  },
  {
    "objectID": "exercises/hoex2.html#joining-aspatial-and-geospatial-data",
    "href": "exercises/hoex2.html#joining-aspatial-and-geospatial-data",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.2 Joining Aspatial and Geospatial Data",
    "text": "2.2 Joining Aspatial and Geospatial Data\n\n2.2.1 Standardising Fields\nThe SZ and PA columns of the aspatial dataset maps directly to the SUBZONE_N and PLN_AREA_N columns of the master plan geospatial dataset.\nHowever, while the SUBZONE_N and PLN_AREA_N values are provided in all caps, SZ and PA comes in a mixture of upper and lowercase. We have to standardise the case.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nThe mutate_at function used above allows specific columns to be specified to perform specified functions, in this case, to convert to uppercase.\n\n\n2.2.2 Merge Geospatial and Apastial Data\nSimilar to SQL, we can left_join data from popdata2020 to mpsz. They will be merged based on the common identifier if SUBZONE_N and SZ matches.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nWe will save the manipulated data into a rds file as a backup.\n\nwrite_rds(mpsz_pop2020, \"Hands-on_Ex02/data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "exercises/hoex2.html#quick-start",
    "href": "exercises/hoex2.html#quick-start",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.1 Quick Start",
    "text": "3.1 Quick Start\nThe easiest method to plot a choropleth map using tmap is using qtm().\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nFrom the code above, we can understand that:\n\ntmap_mode() toggles between static (“plot”) or interactive modes (“view)\nfill argument is used to map the attribute (ie. DEPENDENCY in this case)"
  },
  {
    "objectID": "exercises/hoex2.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "exercises/hoex2.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.2 Creating a choropleth map by using tmap’s elements",
    "text": "3.2 Creating a choropleth map by using tmap’s elements\nWhile qtm() allows one to quickly plot a choropleth map, it is rigid and does not offer much flexibility and control over the map’s elements. Hence, tmap’s drawing elements should be used instead.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n3.2.1 Drawing a Base Map\nThe basic elements to creating a tmap includes, tm_shape(), followed by other layer elements such as tm_fill() and/or tm_polygons().\nIn the code below, tm_shape() defines the input data and tm_polygons() tells\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n3.2.2 Drawing a Choropleth Map with tm_polygons()\nDrawing a choropleth map with tmap is rather simple. Simply specify the column name under tm_polygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nFrom the code above, we can understand from tm_polygons that:\n\nThe default interval binning used to draw the choropleth map is “pretty” which will be elaborated further in XX.XX.XX\nThe default colour scheme used is YlOrRd from ColorBrewer. This will be elaborated more in XX.XX.XX\nBy default, missing values are shaded in grey.\n\n\n\n3.2.3 Drawing a Choropleth Map with tm_fill() and tm_borders()\nWe can also use tm_fill() to draw a choropleth map.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nFrom the map above, we can see that the map is coloured, without any lines.\nTo introduce light borders, we can use tm_borders().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nFor tm_borders(), there are four arguments that are accepted:\n\nalpha = transparency, 0 = transparent, 1 = opaque\ncol = border color\nlwd = border line width, default is 1\nlty = border line type, default is “solid”"
  },
  {
    "objectID": "exercises/hoex2.html#data-classification-methods",
    "href": "exercises/hoex2.html#data-classification-methods",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.3 Data Classification Methods",
    "text": "3.3 Data Classification Methods\nMost choropleth maps use some form of data classification, to group large numbers of observations into classes or n number of data ranges for classification.\ntmap provides a total ten data classification methods: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nThe style argument of tm_fill() or tm_polygons() can be used to define a data classification method.\n\n3.3.1 Plotting Chloropleth Maps with Built-in Classification Methods\nThe code below uses a quantile classification method. Jenks classifies data according to the natural breaks within the data.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code below uses equal style, which creates n = 5 ranges which are equal in range.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n3.3.1.1 Differences between Classification Methods\nfixed:\nSpecify each range using the breaks argument manually. Does not require the use of n intervals.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"fixed\",\n          breaks = c(-Inf, seq(0, 10, by = 2.5), Inf) ) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nsd:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\npretty:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nkmeans:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nhclust:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nbclust:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nfisher:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nquantile:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nClassification Name\nDescription\n\n\n\n\nfixed\nBased on breaks specified\n\n\nsd\nn number of ranges, must ensure distribution is approx. normal. Measure of dispersion/dispersion (z scores)\n\n\nequal\nn number of ranges (excluding missing values), equal widths for each range, avoid if data is skewed or large outlier values (as in example above)\n\n\npretty (default)\nn number of ranges (including missing values), equal widths for each range, avoid if data is skewed or large outlier values (as in example above)\n\n\nquantile\nn number of ranges, equal number of observations in each range\n\n\nkmeans\nn number of ranges, runs euclidean distance computation between centroids and points and reassigns each points to closest cluster centroid until no change in cluster points or threshold is reached\n\n\nhclust\nn number of ranges, using divisive hierarchical clustering, splits until n number of clusters are obtained based on similarities with other points\n\n\nbclust\nn number of ranges, using bagged clustering\n\n\nfisher\nn number of ranges, using fisher clustering\n\n\njenks\nn number of ranges, based on natural breaks\n\n\n\n\n\n3.3.1.1 Differences between n ranges (using quantile)\nn = 2:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nn = 5:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nn = 10:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nn = 20:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nAs n amount of ranges increase, the colour differences between each subzone is more distinct. However, the amount of ranges depends on how fine grained the analysis has to be. Too many ranges could make it hard to pinpoint the exact colour and confuse users. Additionally, using quantile method, the outlier range (0.879 to 19.000) may mislead users as it is very similar in colour to the previous range (0.847 to 0.879)\n\n\n\n3.3.2 Plotting with Custom Breaks\nWe can specify breaks manually (as in the fixed style) instead of being automatically computed.\nFirst, we need to know our min and max ranges of the data\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nTo create custom breaks, we need to specify n+1 values to obtain n ranges as the values includes a min and max.\nThe code below creates breaks at 0.60, 0.70, 0.80, 0.90 with a min of 0 and max of 1.00.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break"
  },
  {
    "objectID": "exercises/hoex2.html#section-1",
    "href": "exercises/hoex2.html#section-1",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "3.4 Colour Scheme\n\n3.4.1 Using ColorBrewer Palettes\nTo change the colour, we can use the palette argument. Here, we will change it to the blues colour scheme.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWe can also reverse the colours using the - symbol infront of the desired color. In the below example, we use Greens.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "exercises/hoex2.html#map-layouts",
    "href": "exercises/hoex2.html#map-layouts",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.5 Map Layouts",
    "text": "3.5 Map Layouts\nA map layout contains different elements that adds up into a single map.\nOther than the objects to be mapped, map elements could include, title, scale bar, compass, margins, aspect ratios, colour settings and data classification methods.\n\n3.5.1 Map Legend\nThere are several legend options to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n3.5.2 Map Style\nMap styles could be changed using the tmap_style() function from tmap. In the example below, the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n3.5.2 Cartographic Furniture\nWe can also draw various cartographic furniture onto the map, such as the scale bar, grid and compass.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the map to the default style, we can use the code below:\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\""
  },
  {
    "objectID": "exercises/hoex2.html#drawing-small-choropleth-maps",
    "href": "exercises/hoex2.html#drawing-small-choropleth-maps",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.6 Drawing Small Choropleth Maps",
    "text": "3.6 Drawing Small Choropleth Maps\nWe can draw multiple small maps, also known as facet maps, arranged horizontally or stacked vertically to allow us to visualise how spatial relationships change with respect to another variable, such as time.\nUsing tmap, we can plot multiple small maps in three ways:\n\nassigning multiple values to at least one of the aesthetic arguments (eg. tmap_fill() or tmap_polygons())\ndefining a group-by variable in tm_facets()\ncreating multiple stand-alone maps with tmap_arrange()\n\n\n3.6.1 Assigning multiple values to at least one of the aesthetic arguments\nIn the example below, we specify multiple values using the c()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nWe can also specifically specify style and palette arguments for each map as shown below:\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n3.6.2 Defining a group-by variable in tm_facets()\nIn the example below, we create multiple maps using tm_facets(). The map is generated based on different values under the REGION_N column.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n3.6.3 Creating Multiple Maps using tmap_arrange()\nIn the example below, we create multiple maps specified individually using tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "exercises/hoex2.html#mapping-spatial-objects-meeting-a-selection-criterion",
    "href": "exercises/hoex2.html#mapping-spatial-objects-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.6 Mapping Spatial Objects Meeting a Selection Criterion",
    "text": "3.6 Mapping Spatial Objects Meeting a Selection Criterion\nInstead of creating multiple choropleth maps, we can also use the selection function to map spatial objects meeting a certain criterion. In the example below, we only map objects that are in the CENTRAL REGION.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "exercises/hoex2.html#section",
    "href": "exercises/hoex2.html#section",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "3.4 Colour Scheme\n\n3.4.1 Using ColorBrewer Palettes\nTo change the colour, we can use the palette argument. Here, we will change it to the blues colour scheme.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWe can also reverse the colours using the - symbol infront of the desired color. In the below example, we use Greens.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  }
]