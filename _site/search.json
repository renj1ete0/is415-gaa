[
  {
    "objectID": "exercises/thex02.html",
    "href": "exercises/thex02.html",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "",
    "text": "Since late December 2019, an outbreak of a novel coronavirus disease (COVID-19; previously known as 2019-nCoV) was reported in Wuhan, China, which had subsequently affected 210 countries worldwide. In general, COVID-19 is an acute resolved disease but it can also be deadly, with a 2% case fatality rate.\nThe COVID-19 vaccination in Indonesia is an ongoing mass immunisation in response to the COVID-19 pandemic in Indonesia. On 13 January 2021, the program commenced when President Joko Widodo was vaccinated at the presidential palace. In terms of total doses given, Indonesia ranks third in Asia and fifth in the world.\nAccording to wikipedia, as of 5 February 2023 at 18:00 WIB (UTC+7), 204,266,655 people had received the first dose of the vaccine and 175,131,893 people had been fully vaccinated; 69,597,474 of them had been inoculated with the booster or the third dose, while 1,585,164 had received the fourth dose. Jakarta has the highest percentage of population fully vaccinated with 103.46%, followed by Bali and Special Region of Yogyakarta with 85.45% and 83.02% respectively.\nDespite its compactness, the cumulative vaccination rate are not evenly distributed within DKI Jakarta. The question is where are the sub-districts with relatively higher number of vaccination rate and how they changed over time.\n\n\n\nExploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta.\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\n\n\nCompute the monthly vaccination rate from July 2021 to June 2022 at sub-district (also known as kelurahan in Bahasa Indonesia) level,\nPrepare the monthly vaccination rate maps by using appropriate tmap functions,\nDescribe the spatial patterns revealed by the choropleth maps (not more than 200 words).\n\n\n\n\nWith reference to the vaccination rate maps prepared in ESDA:\n\nCompute local Gi* values of the monthly vaccination rate,\nDisplay the Gi* maps of the monthly vaccination rate. The maps should only display the significant (i.e. p-value < 0.05)\nWith reference to the analysis results, draw statistical conclusions (not more than 250 words).\n\n\n\n\nWith reference to the local Gi* values of the vaccination rate maps prepared in the previous section:\n\nPerform Mann-Kendall Test by using the spatio-temporal local Gi* values,\nSelect three sub-districts and describe the temporal trends revealed (not more than 250 words), and\nPrepared a EHSA map of the Gi* values of vaccination rate. The maps should only display the significant (i.e. p-value < 0.05).\nWith reference to the EHSA map prepared, describe the spatial patterns revelaed. (not more than 250 words)."
  },
  {
    "objectID": "exercises/thex02.html#data-acquisition",
    "href": "exercises/thex02.html#data-acquisition",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "2.1 Data Acquisition",
    "text": "2.1 Data Acquisition\nThe following datasets would be used to study the spatial-temporal geographical distribution of vaccination rates in Jarkata, Indonesia, between June 2021 to May 2022.\n\n\n\nDataset Name\nSource\n\n\n\n\nVaccination Data from June 2021 to May 2022 in Jarkata, Indonesia\nRiwayat File Vaksinasi DKI Jakarta\n\n\nDKI Jakarta Administration Boundary 2019\nIndonesia Geospatial Portal"
  },
  {
    "objectID": "exercises/thex02.html#installing-and-loading-packages",
    "href": "exercises/thex02.html#installing-and-loading-packages",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "2.2 Installing and Loading Packages",
    "text": "2.2 Installing and Loading Packages\nNext, pacman assists us by helping us load R packages that we require, sf, tidyverse and funModeling.\n\npacman::p_load(readxl,funModeling, sf, tidyverse, tmap, sfdep, gifski)\n\nThe following packages assists us to accomplish the following:\n\nreadxl assists us in importing .xlsx aspatial data without having to convert to .csv\nfunModeling helps us with performing quick Data Exploration in R\nsf helps to import, manage and process vector-based geospatial data in R\ntidyverse which includes readr to import delimited text file, tidyr for tidying data and dplyr for wrangling data\ntmap provides functions to allow us to plot high quality static or interactive maps using leaflet API\ngifski helps us to handle the GIF animation for tmap"
  },
  {
    "objectID": "exercises/thex02.html#geospatial-dataset",
    "href": "exercises/thex02.html#geospatial-dataset",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "3.1 Geospatial Dataset",
    "text": "3.1 Geospatial Dataset\n\n3.1.1 Importing Geospatial Dataset\nFirstly, in the code chunk below, we will import the geospatial dataset for Jarkata,\nIn the code below, dsn specifies the filepath where the dataset is located and layer provides the filename of the dataset excluding the file extension.\nWe will also convert the dataset from WGS84 Geographic Coordinate System to EPSG::23837 (DGN95) which is the national Projected Coordinate System for Jarkata.\n\njkt = st_read(dsn = \"Take-Home_Ex02/data/geospatial\", layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\") %>% st_transform(crs = 23837)\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Take-Home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\n\n\n\n3.1.2 Preparing Geospatial Dataset\nLet us view the dataset columns:\n\nhead(jkt, 1)\n\nSimple feature collection with 1 feature and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -765269.9 ymin: 811640 xmax: -764544.3 ymax: 812335.7\nProjected CRS: DGN95 / Indonesia TM-3 zone 50.1\n  OBJECT_ID  KODE_DESA      DESA   KODE    PROVINSI      KAB_KOTA  KECAMATAN\n1     25477 3173031006 KEAGUNGAN 317303 DKI JAKARTA JAKARTA BARAT TAMAN SARI\n  DESA_KELUR JUMLAH_PEN JUMLAH_KK LUAS_WILAY KEPADATAN PERPINDAHA JUMLAH_MEN\n1  KEAGUNGAN      21609      7255       0.36     60504        102         68\n  PERUBAHAN WAJIB_KTP SILAM KRISTEN KHATOLIK HINDU BUDHA KONGHUCU KEPERCAYAA\n1     20464     16027 15735    2042      927    15  2888        2          0\n   PRIA WANITA BELUM_KAWI KAWIN CERAI_HIDU CERAI_MATI   U0   U5  U10  U15  U20\n1 11049  10560      10193 10652        255        509 1572 1751 1703 1493 1542\n   U25  U30  U35  U40  U45  U50  U55 U60 U65 U70 U75 TIDAK_BELU BELUM_TAMA\n1 1665 1819 1932 1828 1600 1408 1146 836 587 312 415       3426       1964\n  TAMAT_SD SLTP SLTA DIPLOMA_I DIPLOMA_II DIPLOMA_IV STRATA_II STRATA_III\n1     2265 3660 8463        81        428       1244        74          4\n  BELUM_TIDA APARATUR_P TENAGA_PEN WIRASWASTA PERTANIAN NELAYAN AGAMA_DAN\n1       3927         81         70       8974         1       0         6\n  PELAJAR_MA TENAGA_KES PENSIUNAN LAINNYA    GENERATED KODE_DES_1 BELUM_\n1       4018         28        57    4447 30 Juni 2019 3173031006   3099\n  MENGUR_ PELAJAR_ PENSIUNA_1 PEGAWAI_ TENTARA KEPOLISIAN PERDAG_ PETANI\n1    4447     3254         80       48       4         10      31      0\n  PETERN_ NELAYAN_1 INDUSTR_ KONSTR_ TRANSP_ KARYAW_ KARYAW1 KARYAW1_1\n1       0         1        7       3       2    6735       9         0\n  KARYAW1_12 BURUH BURUH_ BURUH1 BURUH1_1 PEMBANT_ TUKANG TUKANG_1 TUKANG_12\n1         23   515      1      0        0        1      0        1         0\n  TUKANG__13 TUKANG__14 TUKANG__15 TUKANG__16 TUKANG__17 PENATA PENATA_\n1          1          0          1          7          1      0       0\n  PENATA1_1 MEKANIK SENIMAN_ TABIB PARAJI_ PERANCA_ PENTER_ IMAM_M PENDETA\n1         0      11        4     1       0        0       1      0       2\n  PASTOR WARTAWAN USTADZ JURU_M PROMOT ANGGOTA_ ANGGOTA1 ANGGOTA1_1 PRESIDEN\n1      0        7      6      0      0        0        0          0        0\n  WAKIL_PRES ANGGOTA1_2 ANGGOTA1_3 DUTA_B GUBERNUR WAKIL_GUBE BUPATI WAKIL_BUPA\n1          0          0          0      0        0          0      0          0\n  WALIKOTA WAKIL_WALI ANGGOTA1_4 ANGGOTA1_5 DOSEN GURU PILOT PENGACARA_ NOTARIS\n1        0          0          0          0     3   72     1          4       0\n  ARSITEK AKUNTA_ KONSUL_ DOKTER BIDAN PERAWAT APOTEK_ PSIKIATER PENYIA_\n1       1       1       1     16     3       7       0         0       0\n  PENYIA1 PELAUT PENELITI SOPIR PIALAN PARANORMAL PEDAGA_ PERANG_ KEPALA_\n1       0      0        0    65      0          0     379       0       0\n  BIARAW_ WIRASWAST_ LAINNYA_12 LUAS_DESA KODE_DES_3 DESA_KEL_1 KODE_12\n1       0       1370         94     25476 3173031006  KEAGUNGAN  317303\n                        geometry\n1 MULTIPOLYGON (((-764674.9 8...\n\n\nThe dataset above a variety of information, a breakdown by subdistrict level of the religion, demographic information, education, occupation etc.\nIn our analysis, we only require information related to the population count, subdistrict and district information and geometry information. Hence, we will only filter and retain information from index 0 to 9.\n\njkt <- jkt[0:9]\nhead(jkt, 1)\n\nSimple feature collection with 1 feature and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -765269.9 ymin: 811640 xmax: -764544.3 ymax: 812335.7\nProjected CRS: DGN95 / Indonesia TM-3 zone 50.1\n  OBJECT_ID  KODE_DESA      DESA   KODE    PROVINSI      KAB_KOTA  KECAMATAN\n1     25477 3173031006 KEAGUNGAN 317303 DKI JAKARTA JAKARTA BARAT TAMAN SARI\n  DESA_KELUR JUMLAH_PEN                       geometry\n1  KEAGUNGAN      21609 MULTIPOLYGON (((-764674.9 8...\n\n\nNext, we will recode information from Bahasa Indonesia to English for easier processing, using rename() of dplyr.\n\njkt <- jkt %>% rename(\"SubDistrictCode\" = \"KODE_DESA\",\n                      \"SubDistrict\" = \"DESA\",\n                      \"Code\" = \"KODE\",\n                       \"Province\" = \"PROVINSI\",\n                      \"City\" = \"KAB_KOTA\",\n                      \"District\" = \"KECAMATAN\",\n                      \"SubDistrictName\" = \"DESA_KELUR\",\n                      \"TotalPop\" = \"JUMLAH_PEN\")\njkt\n\nSimple feature collection with 269 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -814909.7 ymin: 787584.9 xmax: -747172.2 ymax: 919446.7\nProjected CRS: DGN95 / Indonesia TM-3 zone 50.1\nFirst 10 features:\n   OBJECT_ID SubDistrictCode        SubDistrict   Code    Province\n1      25477      3173031006          KEAGUNGAN 317303 DKI JAKARTA\n2      25478      3173031007             GLODOK 317303 DKI JAKARTA\n3      25397      3171031003      HARAPAN MULIA 317103 DKI JAKARTA\n4      25400      3171031006       CEMPAKA BARU 317103 DKI JAKARTA\n5      25378      3101011001     PULAU PANGGANG 310101 DKI JAKARTA\n6      25379      3101011002       PULAU KELAPA 310101 DKI JAKARTA\n7      25390      3171021001         PASAR BARU 317102 DKI JAKARTA\n8      25382      3101021002       PULAU TIDUNG 310102 DKI JAKARTA\n9      25391      3171021002       KARANG ANYAR 317102 DKI JAKARTA\n10     25394      3171021005 MANGGA DUA SELATAN 317102 DKI JAKARTA\n               City                  District    SubDistrictName TotalPop\n1     JAKARTA BARAT                TAMAN SARI          KEAGUNGAN    21609\n2     JAKARTA BARAT                TAMAN SARI             GLODOK     9069\n3     JAKARTA PUSAT                 KEMAYORAN      HARAPAN MULIA    29085\n4     JAKARTA PUSAT                 KEMAYORAN       CEMPAKA BARU    41913\n5  KEPULAUAN SERIBU    KEPULAUAN SERIBU UTARA     PULAU PANGGANG     6947\n6  KEPULAUAN SERIBU    KEPULAUAN SERIBU UTARA       PULAU KELAPA     7059\n7     JAKARTA PUSAT               SAWAH BESAR         PASAR BARU    15793\n8  KEPULAUAN SERIBU KEPULAUAN SERIBU SELATAN.       PULAU TIDUNG     5891\n9     JAKARTA PUSAT               SAWAH BESAR       KARANG ANYAR    33383\n10    JAKARTA PUSAT               SAWAH BESAR MANGGA DUA SELATAN    35906\n                         geometry\n1  MULTIPOLYGON (((-764674.9 8...\n2  MULTIPOLYGON (((-764859.9 8...\n3  MULTIPOLYGON (((-760021.3 8...\n4  MULTIPOLYGON (((-759415 810...\n5  MULTIPOLYGON (((-796698.3 8...\n6  MULTIPOLYGON (((-795419 870...\n7  MULTIPOLYGON (((-762362.7 8...\n8  MULTIPOLYGON (((-801734.4 8...\n9  MULTIPOLYGON (((-762950.3 8...\n10 MULTIPOLYGON (((-762822.4 8...\n\n\nNext, let us quickly plot the jkt geospatial data\n\ntmap_mode(\"plot\")\ntm_shape(jkt) +\n  tm_borders()\n\n\n\n\nWe can see there are many small dots to the top and left of the main Jarkata region. Those are outer islands. In this analysis, we will exclude the outer islands of Jarkata from our analysis.\nNow, let us try to identify how to identify and remove the outer islands. Below, we will plot City.\n\ntmap_mode(\"view\")\ntm_shape(jkt) +\n  tm_fill(\"City\", \n          alpha = 0.2) +\n  tm_borders()\n\n\n\n\n\n\nFrom our map above, we can tell that the outer islands are denoted by KEPULAUAN SERIBU which means Thousand Islands.\nHowever, we also spot some missing values. We will fill them in first before removing the outer islands.\n\nfilter(jkt, is.na(jkt$City))\n\nSimple feature collection with 2 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -761893.4 ymin: 811733.2 xmax: -759659.1 ymax: 812745.6\nProjected CRS: DGN95 / Indonesia TM-3 zone 50.1\n  OBJECT_ID SubDistrictCode      SubDistrict   Code    Province City District\n1     25645        31888888     DANAU SUNTER 318888 DKI JAKARTA <NA>     <NA>\n2     25646        31888888 DANAU SUNTER DLL 318888 DKI JAKARTA <NA>     <NA>\n  SubDistrictName TotalPop                       geometry\n1            <NA>        0 MULTIPOLYGON (((-759659.1 8...\n2            <NA>        0 MULTIPOLYGON (((-760863.5 8...\n\n\nFrom the output above, we can gather that there are two Villages with NA values:\n\nDANAU SUNTER (OBJECT_ID 25645)\nDANAU SUNTER DLL (OBJECT_ID 25646)\n\nBy comparing the information from the Geospatial Information Agency of Indonesia (Badan Informasi Geospasial), we now know that these two villages are part of Pademangan Timur based on the screenshot from the website below:\n\nNow, let find out what is the OBJECT_ID of the village PADEMANGAN TIMUR where we are supposed to merge the two other villages (DANAU SUNTER and DANAU SUNTER DLL) into.\n\njkt %>% filter((jkt$SubDistrictName) == \"PADEMANGAN TIMUR\")\n\nSimple feature collection with 1 feature and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -762223.7 ymin: 811885.3 xmax: -760240.1 ymax: 814736.4\nProjected CRS: DGN95 / Indonesia TM-3 zone 50.1\n  OBJECT_ID SubDistrictCode      SubDistrict   Code    Province          City\n1     25453      3172051001 PADEMANGAN TIMUR 317205 DKI JAKARTA JAKARTA UTARA\n    District  SubDistrictName TotalPop                       geometry\n1 PADEMANGAN PADEMANGAN TIMUR    45083 MULTIPOLYGON (((-760244.6 8...\n\n\nThe OBJECT_ID is 25453.\nLet’s plot a map of how the three states would look like before we merge them:\n\ntmap_mode(\"plot\")\ntm_shape(filter(jkt, jkt$OBJECT_ID == 25453 | jkt$OBJECT_ID == 25645 | jkt$OBJECT_ID == 25646)) +\n  tm_fill(\"SubDistrict\") +\n  tm_borders()\n\n\n\n\nNow, let us merge the regions together using the code chunk below using the st_union() function of sf:\n\nmerged_25453 <-\nst_union(filter(jkt,jkt$OBJECT_ID == 25453), filter(jkt,jkt$OBJECT_ID == 25645))[0:9]\n\nmerged_25453 <- st_union(merged_25453, filter(jkt, jkt$OBJECT_ID == 25646))[0:9]\n\nlist(merged_25453)\n\n[[1]]\nSimple feature collection with 1 feature and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -762223.7 ymin: 811733.2 xmax: -759659.1 ymax: 814736.4\nProjected CRS: DGN95 / Indonesia TM-3 zone 50.1\n  OBJECT_ID SubDistrictCode      SubDistrict   Code    Province          City\n1     25453      3172051001 PADEMANGAN TIMUR 317205 DKI JAKARTA JAKARTA UTARA\n    District  SubDistrictName TotalPop                       geometry\n1 PADEMANGAN PADEMANGAN TIMUR    45083 POLYGON ((-760404.9 811968....\n\n\nThe attributes of PADEMANGAN TIMUR still matches the data from before.\n\ntmap_mode(\"plot\")\ntm_shape(merged_25453) +\n  tm_fill(\"SubDistrict\") +\n  tm_borders()\n\n\n\n\nWe have successfully merged the 3 geometries together.\nNow, let us remove the NA records (filtering by default will remove NA values), KEPULAUAN SERIBU which removes the outer islands before we delete and reinsert the PADEMANGAN TIMUR stored in merged_25453 variable.\nWe check how many outer islands are there to be removed:\n\nfilter(jkt, jkt$City == \"KEPULAUAN SERIBU\")\n\nSimple feature collection with 6 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -814909.7 ymin: 824270.9 xmax: -761447 ymax: 919446.7\nProjected CRS: DGN95 / Indonesia TM-3 zone 50.1\n  OBJECT_ID SubDistrictCode       SubDistrict   Code    Province\n1     25378      3101011001    PULAU PANGGANG 310101 DKI JAKARTA\n2     25379      3101011002      PULAU KELAPA 310101 DKI JAKARTA\n3     25382      3101021002      PULAU TIDUNG 310102 DKI JAKARTA\n4     25383      3101021003        PULAU PARI 310102 DKI JAKARTA\n5     25380      3101011003     PULAU HARAPAN 310101 DKI JAKARTA\n6     25381      3101021001 PULAU UNTUNG JAWA 310102 DKI JAKARTA\n              City                  District   SubDistrictName TotalPop\n1 KEPULAUAN SERIBU    KEPULAUAN SERIBU UTARA    PULAU PANGGANG     6947\n2 KEPULAUAN SERIBU    KEPULAUAN SERIBU UTARA      PULAU KELAPA     7059\n3 KEPULAUAN SERIBU KEPULAUAN SERIBU SELATAN.      PULAU TIDUNG     5891\n4 KEPULAUAN SERIBU KEPULAUAN SERIBU SELATAN.        PULAU PARI     3524\n5 KEPULAUAN SERIBU    KEPULAUAN SERIBU UTARA     PULAU HARAPAN     2579\n6 KEPULAUAN SERIBU KEPULAUAN SERIBU SELATAN. PULAU UNTUNG JAWA     2436\n                        geometry\n1 MULTIPOLYGON (((-796698.3 8...\n2 MULTIPOLYGON (((-795419 870...\n3 MULTIPOLYGON (((-801734.4 8...\n4 MULTIPOLYGON (((-786095.1 8...\n5 MULTIPOLYGON (((-795768.5 8...\n6 MULTIPOLYGON (((-778934.5 8...\n\n\nThere are 6 outer islands. Together with the 2 villages with NA city district and removing PADEMANGAN TIMUR, we should see 260 features remaining.\n\njkt <- jkt %>% filter(jkt$City != \"KEPULAUAN SERIBU\" & jkt$OBJECT_ID != 25453)\njkt\n\nSimple feature collection with 260 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -779259.9 ymin: 787584.9 xmax: -747172.2 ymax: 819039\nProjected CRS: DGN95 / Indonesia TM-3 zone 50.1\nFirst 10 features:\n   OBJECT_ID SubDistrictCode        SubDistrict   Code    Province\n1      25477      3173031006          KEAGUNGAN 317303 DKI JAKARTA\n2      25478      3173031007             GLODOK 317303 DKI JAKARTA\n3      25397      3171031003      HARAPAN MULIA 317103 DKI JAKARTA\n4      25400      3171031006       CEMPAKA BARU 317103 DKI JAKARTA\n5      25390      3171021001         PASAR BARU 317102 DKI JAKARTA\n6      25391      3171021002       KARANG ANYAR 317102 DKI JAKARTA\n7      25394      3171021005 MANGGA DUA SELATAN 317102 DKI JAKARTA\n8      25386      3171011003       PETOJO UTARA 317101 DKI JAKARTA\n9      25403      3171041001              SENEN 317104 DKI JAKARTA\n10     25408      3171041006             BUNGUR 317104 DKI JAKARTA\n            City    District    SubDistrictName TotalPop\n1  JAKARTA BARAT  TAMAN SARI          KEAGUNGAN    21609\n2  JAKARTA BARAT  TAMAN SARI             GLODOK     9069\n3  JAKARTA PUSAT   KEMAYORAN      HARAPAN MULIA    29085\n4  JAKARTA PUSAT   KEMAYORAN       CEMPAKA BARU    41913\n5  JAKARTA PUSAT SAWAH BESAR         PASAR BARU    15793\n6  JAKARTA PUSAT SAWAH BESAR       KARANG ANYAR    33383\n7  JAKARTA PUSAT SAWAH BESAR MANGGA DUA SELATAN    35906\n8  JAKARTA PUSAT      GAMBIR       PETOJO UTARA    21828\n9  JAKARTA PUSAT       SENEN              SENEN     8643\n10 JAKARTA PUSAT       SENEN             BUNGUR    23001\n                         geometry\n1  MULTIPOLYGON (((-764674.9 8...\n2  MULTIPOLYGON (((-764859.9 8...\n3  MULTIPOLYGON (((-760021.3 8...\n4  MULTIPOLYGON (((-759415 810...\n5  MULTIPOLYGON (((-762362.7 8...\n6  MULTIPOLYGON (((-762950.3 8...\n7  MULTIPOLYGON (((-762822.4 8...\n8  MULTIPOLYGON (((-764144 810...\n9  MULTIPOLYGON (((-761646.2 8...\n10 MULTIPOLYGON (((-761014.1 8...\n\n\nYes, there are only 260 features remaining. Now, let us add the updated feature back into the jkt dataframe using rbind() which allows us to merge two sf dataframe objects together.\n\njkt <- rbind(jkt, merged_25453)\n\nNow, let us plot a map to see if the map has been properly fixed.\n\ntmap_mode(\"plot\")\ntm_shape(jkt) +\n  tm_fill(\"City\") +\n  tm_borders()\n\n\n\n\nNow, we are ready to perform other tasks."
  },
  {
    "objectID": "exercises/thex02.html#importing-aspatial-datsets",
    "href": "exercises/thex02.html#importing-aspatial-datsets",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "3.2 Importing Aspatial Datsets",
    "text": "3.2 Importing Aspatial Datsets\nNext, we will import the aspatial datasets\n\nvac_202106 <- read_excel(\"Take-Home_Ex02/data/aspatial/20210630.xlsx\")\nvac_202107 <- read_excel(\"Take-Home_Ex02/data/aspatial/20210731.xlsx\")\nvac_202108 <- read_excel(\"Take-Home_Ex02/data/aspatial/20210831.xlsx\")\nvac_202109 <- read_excel(\"Take-Home_Ex02/data/aspatial/20210930.xlsx\")\nvac_202110 <- read_excel(\"Take-Home_Ex02/data/aspatial/20211031.xlsx\")\nvac_202111 <- read_excel(\"Take-Home_Ex02/data/aspatial/20211130.xlsx\")\nvac_202201 <- read_excel(\"Take-Home_Ex02/data/aspatial/20211231.xlsx\")\nvac_202202 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220227.xlsx\")\nvac_202203 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220331.xlsx\")\nvac_202204 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220430.xlsx\")\nvac_202205 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220531.xlsx\")\n\nLet’s have a look at one of the asptial dataset files and it’s columns:\n\nhead(vac_202106, 1)\n\n# A tibble: 1 × 21\n  KODE KELURAH…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n  <chr>          <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 <NA>           <NA>    <NA>    TOTAL   7739060 5113425 2623759 1179448 3803207\n# … with 12 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ren Jie’s IS415 Journal",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nTake-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata\n\n\n\n\n\nConducting a Spatial-Temporal Analysis of COVID-19 trends at Sub-district level in Jarkata, Indonesia between June 2021 to May 2022\n\n\n\n\n\n\nMar 1, 2023\n\n\nTeo Ren Jie\n\n\n28 min\n\n\n\n\n\n\n  \n\n\n\n\nIn-Class Exercise 7: Spatial Weights and Applications\n\n\n\n\n\nComputing Contiguity and Distance-Based Weights in Hunan, China\n\n\n\n\n\n\nFeb 20, 2023\n\n\nTeo Ren Jie\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nTeo Ren Jie\n\n\n8 min\n\n\n\n\n\n\n  \n\n\n\n\nIn-Class Exercise 6: Spatial Weights and Applications\n\n\n\n\n\nComputing Contiguity and Distance-Based Weights in Hunan, China\n\n\n\n\n\n\nFeb 13, 2023\n\n\nTeo Ren Jie\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\nIn-Class Exercise 5: Local Colocation Quotients\n\n\n\n\n\nCalculating and Visualising the Local Colocation of 7-Eleven and Family Mart Convenience Store Chains in Taipei\n\n\n\n\n\n\nFeb 6, 2023\n\n\nTeo Ren Jie\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nIn-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods\n\n\n\n\n\nSpatial Point Pattern Analysis of Distribution of Childcare Centres in Singapore\n\n\n\n\n\n\nJan 30, 2023\n\n\nTeo Ren Jie\n\n\n12 min\n\n\n\n\n\n\n  \n\n\n\n\nTake-Home Exercise 01: Water Points in Osun, Nigeria\n\n\n\n\n\nCalculating and discovering the spatial point patterns and geographical distribution of functional and non-functional water points in Osun, Nigeria\n\n\n\n\n\n\nJan 30, 2023\n\n\nTeo Ren Jie\n\n\n25 min\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods\n\n\n\n\n\nSpatial Point Pattern Analysis of Distribution of Childcare Centres in Singapore\n\n\n\n\n\n\nJan 29, 2023\n\n\nTeo Ren Jie\n\n\n19 min\n\n\n\n\n\n\n  \n\n\n\n\nIn-Class Exercise 3: Analytical Mapping\n\n\n\n\n\nVisualising Functional and Non-Functional Water Pumps in Nigeria at LGA level\n\n\n\n\n\n\nJan 25, 2023\n\n\nTeo Ren Jie\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 2: Choropleth Mapping with R\n\n\n\n\n\nChloropleth Mapping of Singapore Resident Planning Area / Subzone, Age, Sex and Type of Dwelling\n\n\n\n\n\n\nJan 24, 2023\n\n\nTeo Ren Jie\n\n\n27 min\n\n\n\n\n\n\n  \n\n\n\n\nIn-Class Exercise 2: Geospatial Data Wrangling\n\n\n\n\n\nVisualising proportion of functional and non-functional water pumps in Nigeria at LGA level\n\n\n\n\n\n\nJan 16, 2023\n\n\nTeo Ren Jie\n\n\n10 min\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 1: Geospatial Data Handling and Wrangling\n\n\n\n\n\nIn this exercise, I learn how to handle, perform geoprocessing and EDA using sf, tidyverse, ggplot2 and other packages.\n\n\n\n\n\n\nJan 15, 2023\n\n\nTeo Ren Jie\n\n\n11 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/thex02.html#context",
    "href": "exercises/thex02.html#context",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "2.3 Context",
    "text": "2.3 Context\nIn Indonesia, the subdivisions in Indonesia is denoted as follows, this will be important for our analysis as we will be interested in looking at spatio-temporal data of COVID-19 vaccinations at sub-district level which will be mapped to Level 4, Rural or Urban Villages (Desa or Kelurahan).\n\n\n\n\n\n\n\nLevel of Administration\nName (English) / Name (Bahasa Indonesia)\n\n\n\n\nLevel 1\nProvince / Provinsi\n\n\nLevel 2\nCities / Kota\n\n\nLevel 3\nDistricts / Kecamantan\n\n\nLevel 4\nRural or Urban Villages / Desa or Kelurahan"
  },
  {
    "objectID": "exercises/icex06.html",
    "href": "exercises/icex06.html",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "",
    "text": "Pacman assists us by helping us load R packages that we require, sf, sfdep, tidyverse and tmap.\n\npacman::p_load(tidyverse, tmap, sf, sfdep)\n\n\n\n\nThe following datasets are used:\n\n\n\nDataset Name\nSource\n\n\n\n\nHunan (Hunan.shp)\nProf Kam\n\n\nHunan 2021 (Hunan-2021.csv)\nProf Kam"
  },
  {
    "objectID": "exercises/icex06.html#importing-spatial-data",
    "href": "exercises/icex06.html#importing-spatial-data",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "2.1 Importing Spatial Data",
    "text": "2.1 Importing Spatial Data\nWe will use st_read() of sf package to import the three geospatial datasets.\n\nhunan <- st_read(dsn = \"In-Class_Ex06/data/geospatial\", layer = \"hunan\")\n\nReading layer `hunan' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan_2012 <- read_csv(\"In-Class_Ex06/data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "exercises/icex06.html#combining-both-data-frame-by-using-left-join",
    "href": "exercises/icex06.html#combining-both-data-frame-by-using-left-join",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "2.2 Combining both data frame by using left join",
    "text": "2.2 Combining both data frame by using left join\n\nhunan_GDPPC <- left_join(hunan, hunan_2012) %>%\n  select(1:4, 7, 15)\n\nJoining, by = \"County\"\n\n\nIf two columns have the same name, they will automatically be joined, else, the following code has to be specified after the dataframes to be joined. A == B"
  },
  {
    "objectID": "exercises/icex06.html#contiguity-neighbours-methods",
    "href": "exercises/icex06.html#contiguity-neighbours-methods",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "4.1 Contiguity Neighbours Methods",
    "text": "4.1 Contiguity Neighbours Methods\n\n4.1.1 Queen’s Method\nIn the code chunk below st_contiguity() is used to derive a contiguity neighbour list by using Queen’s method.\n\nnb_queen <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\nThe code chunk below prints the neighbours found using the Queen’s method:\n\nsummary(nb_queen)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n    nb          NAME_2               ID_3          NAME_3         \n NULL:NULL   Length:88          Min.   :21098   Length:88         \n             Class :character   1st Qu.:21125   Class :character  \n             Mode  :character   Median :21150   Mode  :character  \n                                Mean   :21150                     \n                                3rd Qu.:21174                     \n                                Max.   :21201                     \n  ENGTYPE_3            County              GDPPC                geometry \n Length:88          Length:88          Min.   : 8497   POLYGON      :88  \n Class :character   Class :character   1st Qu.:14566   epsg:4326    : 0  \n Mode  :character   Mode  :character   Median :20433   +proj=long...: 0  \n                                       Mean   :24405                     \n                                       3rd Qu.:27224                     \n                                       Max.   :88656                     \n\n\n\n\n4.1.2 Rook’s Method\n\nnb_rook <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry, queen = FALSE),\n         .before = 1)\n\nThe code chunk below prints the neighbours found using the Rook’s method:\n\nsummary(nb_rook)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n    nb          NAME_2               ID_3          NAME_3         \n NULL:NULL   Length:88          Min.   :21098   Length:88         \n             Class :character   1st Qu.:21125   Class :character  \n             Mode  :character   Median :21150   Mode  :character  \n                                Mean   :21150                     \n                                3rd Qu.:21174                     \n                                Max.   :21201                     \n  ENGTYPE_3            County              GDPPC                geometry \n Length:88          Length:88          Min.   : 8497   POLYGON      :88  \n Class :character   Class :character   1st Qu.:14566   epsg:4326    : 0  \n Mode  :character   Mode  :character   Median :20433   +proj=long...: 0  \n                                       Mean   :24405                     \n                                       3rd Qu.:27224                     \n                                       Max.   :88656"
  },
  {
    "objectID": "exercises/icex06.html#contiguity-weights-queens-method",
    "href": "exercises/icex06.html#contiguity-weights-queens-method",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "5.1 Contiguity Weights: Queen’s Method",
    "text": "5.1 Contiguity Weights: Queen’s Method\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb),\n         .before = 1)\n\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "exercises/icex06.html#contiguity-weights-rooks-method",
    "href": "exercises/icex06.html#contiguity-weights-rooks-method",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "5.2 Contiguity Weights: Rook’s Method",
    "text": "5.2 Contiguity Weights: Rook’s Method\n\nwm_r <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry, queen = FALSE),\n         wt = st_weights(nb),\n         .before = 1)\n\n\nwm_r\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                           nb\n1                3, 4, 57, 85\n2              57, 58, 78, 85\n3                 1, 4, 5, 85\n4                  1, 3, 5, 6\n5                 3, 4, 6, 85\n6            4, 5, 69, 75, 85\n7              67, 71, 74, 84\n8   9, 46, 47, 56, 78, 80, 86\n9       8, 66, 68, 78, 84, 86\n10 16, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                       0.25, 0.25, 0.25, 0.25\n2                                                       0.25, 0.25, 0.25, 0.25\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "exercises/icex06.html#deriving-fixed-distance-weights",
    "href": "exercises/icex06.html#deriving-fixed-distance-weights",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "6.1 Deriving Fixed Distance Weights",
    "text": "6.1 Deriving Fixed Distance Weights\nBefore we can derive the fixed distance weights, we need to determine the upper limit for distance band using the code chunk below\n\ngeo <- sf::st_geometry((hunan_GDPPC))\nnb <- st_knn(geo, longlat = TRUE)\n\n! Polygon provided. Using point on surface.\n\n\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n\ndists <- unlist(st_nb_dists(geo, nb))\n\n! Polygon provided. Using point on surface.\n\n\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n\n\nFrom the code chunk above, we can know that:\nst_nb_dists() of sfdep is used to calculate nearest neighbour distance. It outputs a list of distances for each observation’s neighbours list.\nunlist() of Base R is used to return output as vector so the summary statistics of nearest neighbour distances can be derived\nNow, let’s derived the summary statistics of nearest neighbour distances vector (ie. dists) by using the code chunk below:\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n\n\nFrom the code chunk above, we know that the maximum nearest neighbour distance is 65.80km. By using a threshold value of 66km, we can ensure that each area has at least one neighbour.\nNow, we will go ahead to compute the fixed distance weights using the code chunk below.\n\nwm_fd <- hunan_GDPPC %>% \n  mutate(nb = st_dist_band(geometry, upper = 66),\n         wt = st_weights(nb),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n\n\nFrom the code above, we can know that:\nst_dists_band() of sfdep is used to identity neighbours based on a distance band. Output is a list of neighbours\nst_weights() is used to calculate polygon spatial weights of nb list.\n\nthe default style argument is set to “W” for row standardised weights and\nthe default allow_zero is set to TRUE, assigns zero as lagged value to zone without neighbours\n\nLet us examine the dataframe of the fixed distance weights\n\nwm_fd\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                       nb\n1      2, 3, 4, 5, 57, 64\n2       1, 57, 58, 78, 85\n3             1, 4, 5, 57\n4              1, 3, 5, 6\n5          1, 3, 4, 6, 69\n6                4, 5, 69\n7              67, 71, 84\n8       9, 46, 47, 78, 80\n9   8, 46, 66, 68, 84, 86\n10 16, 20, 22, 70, 72, 73\n                                                                 wt   NAME_2\n1  0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667  Changde\n2                                           0.2, 0.2, 0.2, 0.2, 0.2  Changde\n3                                            0.25, 0.25, 0.25, 0.25  Changde\n4                                            0.25, 0.25, 0.25, 0.25  Changde\n5                                           0.2, 0.2, 0.2, 0.2, 0.2  Changde\n6                                   0.3333333, 0.3333333, 0.3333333  Changde\n7                                   0.3333333, 0.3333333, 0.3333333 Changsha\n8                                           0.2, 0.2, 0.2, 0.2, 0.2 Changsha\n9  0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667 Changsha\n10 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667 Chenzhou\n    ID_3    NAME_3   ENGTYPE_3    County GDPPC                       geometry\n1  21098   Anxiang      County   Anxiang 23667 POLYGON ((112.0625 29.75523...\n2  21100   Hanshou      County   Hanshou 20981 POLYGON ((112.2288 29.11684...\n3  21101    Jinshi County City    Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4  21102        Li      County        Li 24473 POLYGON ((111.3731 29.94649...\n5  21103     Linli      County     Linli 25554 POLYGON ((111.6324 29.76288...\n6  21104    Shimen      County    Shimen 27137 POLYGON ((110.8825 30.11675...\n7  21109   Liuyang County City   Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  21110 Ningxiang      County Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  21111 Wangcheng      County Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10 21112     Anren      County     Anren 12761 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "exercises/icex06.html#deriving-adaptive-distance-weights",
    "href": "exercises/icex06.html#deriving-adaptive-distance-weights",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "6.2 Deriving Adaptive Distance Weights",
    "text": "6.2 Deriving Adaptive Distance Weights\n\nwm_ad <- hunan_GDPPC %>%\n  mutate(nb = st_knn(geometry,\n                     k = 8),\n         wt = st_weights(nb),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n\n\nFrom the code above, we can learn that:\nst_knn() of sfdep is used to identify neighbours based on k (ie. k = 8 indicates 8 nearest neighbours). Output similarly is a list of neighbours (ie. nb)\nst_weights() is used to calculate polygon spatial weights of nb list. Note\n\nthe default style argument is set to “W” for row standardised weights and\nthe default allow_zero is set to TRUE, assigns zero as lagged value to zone without neighbours\n\n\nwm_ad\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1      2, 3, 4, 5, 57, 58, 64, 76\n2     1, 3, 8, 57, 58, 68, 78, 85\n3       1, 2, 4, 5, 6, 57, 64, 85\n4       1, 2, 3, 5, 6, 57, 64, 69\n5       1, 2, 3, 4, 6, 57, 69, 85\n6       1, 2, 3, 4, 5, 69, 75, 85\n7   9, 66, 67, 68, 71, 74, 84, 86\n8    2, 9, 35, 46, 47, 78, 80, 86\n9   8, 46, 47, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                       wt   NAME_2  ID_3\n1  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21098\n2  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21100\n3  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21101\n4  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21102\n5  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21103\n6  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21104\n7  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21109\n8  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21110\n9  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21111\n10 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Chenzhou 21112\n      NAME_3   ENGTYPE_3    County GDPPC                       geometry\n1    Anxiang      County   Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou      County   Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi County City    Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li      County        Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli      County     Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen      County    Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang County City   Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang      County Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng      County Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren      County     Anren 12761 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "exercises/icex06.html#deriving-inverse-distance-weights",
    "href": "exercises/icex06.html#deriving-inverse-distance-weights",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "6.3 Deriving Inverse Distance Weights",
    "text": "6.3 Deriving Inverse Distance Weights\n\nwm_idw <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n\n\nFrom the code above, we can learn that:\nst_contiguity() of sfdep is used to identify neighbours by contiguity criteria. The output is a list of neighbours (ie. nb)\nst_inverse_distance() is used to calculate inverse distance weights of neighbours on the nb list\nNote:\n\nthe default style argument is set to “W” for row standardised weights and\nthe default allow_zero is set to TRUE, assigns zero as lagged value to zone without neighbours\n\n\nwm_idw\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                              wts\n1                                      0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857\n2                                      0.01526149, 0.01601100, 0.01911052, 0.02327058, 0.01591694\n3                                                  0.03515537, 0.04581089, 0.04116397, 0.01208437\n4                                                  0.02176677, 0.04581089, 0.04637578, 0.01585302\n5                                                  0.04116397, 0.04637578, 0.01896212, 0.01351099\n6                                      0.01585302, 0.01896212, 0.02710909, 0.01140718, 0.01080890\n7                                                  0.01621067, 0.01536702, 0.01133628, 0.01836488\n8              0.01930410, 0.02675555, 0.02151751, 0.01076895, 0.02608065, 0.01519804, 0.01337412\n9                          0.01930410, 0.01651371, 0.01798519, 0.01473155, 0.03015561, 0.01612293\n10 0.02737233, 0.01390810, 0.01458881, 0.02156771, 0.02419268, 0.02350470, 0.01784174, 0.01621545\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "exercises/icex05.html",
    "href": "exercises/icex05.html",
    "title": "In-Class Exercise 5: Local Colocation Quotients",
    "section": "",
    "text": "Firstly, the code below will check if pacman has been installed. If it has not been installed, R will download and install it, before activating it for use during this session.\n\nif (!require('pacman', character.only = T)){\n  install.packages('pacman')\n}\n\nLoading required package: pacman\n\nlibrary('pacman')\n\nNext, pacman assists us by helping us load R packages that we require, sf, tidyverse and tmap.\n\npacman::p_load(tidyverse, tmap, sf, sfdep)\n\n\n\n\n\nstudyArea <- st_read(dsn = \"In-Class_Ex05/data\", layer = \"study_area\") %>%\n  st_transform(crs = 3829)\n\nReading layer `study_area' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(dsn = \"In-Class_Ex05/data\", layer = \"stores\") %>%\n  st_transform(crs = 3829)\n\nReading layer `stores' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n\n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(stores) +\n  tm_dots(col = \"Name\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\ntm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe polygon layers should always be above the dots. The geospatial layers are rendered in sequence, hence if polygons are rendered after the dots (ie. dots are ontop of the polygon code), the dots might be coverd by the polygon line/fill."
  },
  {
    "objectID": "exercises/icex07.html",
    "href": "exercises/icex07.html",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "",
    "text": "Pacman assists us by helping us load R packages that we require, sf, sfdep, tidyverse, plotly and tmap.\n\npacman::p_load(tidyverse, tmap, sf, sfdep, plotly)\n\nPlotly helps to make our charts interactive.\n\n\n\nThe following datasets are used:\n\n\n\nDataset Name\nSource\n\n\n\n\nHunan (Hunan.shp)\nProf Kam\n\n\nHunan 2021 (Hunan-2021.csv)\nProf Kam"
  },
  {
    "objectID": "exercises/icex07.html#importing-spatial-data",
    "href": "exercises/icex07.html#importing-spatial-data",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "2.1 Importing Spatial Data",
    "text": "2.1 Importing Spatial Data\nWe will use st_read() of sf package to import the three geospatial datasets.\n\nhunan <- st_read(dsn = \"In-Class_Ex07/data/geospatial\", layer = \"hunan\")\n\nReading layer `hunan' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan_2012 <- read_csv(\"In-Class_Ex07/data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "exercises/icex07.html#combining-both-data-frame-by-using-left-join",
    "href": "exercises/icex07.html#combining-both-data-frame-by-using-left-join",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "2.2 Combining both data frame by using left join",
    "text": "2.2 Combining both data frame by using left join\n\nhunan_GDPPC <- left_join(hunan, hunan_2012) %>%\n  select(1:4, 7, 15)\n\nJoining, by = \"County\"\n\n\nIf two columns have the same name, they will automatically be joined, else, the following code has to be specified after the dataframes to be joined. A == B"
  },
  {
    "objectID": "exercises/icex07.html#contiguity-neighbours-methods",
    "href": "exercises/icex07.html#contiguity-neighbours-methods",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "4.1 Contiguity Neighbours Methods",
    "text": "4.1 Contiguity Neighbours Methods\n\n4.1.1 Queen’s Method\nIn the code chunk below st_contiguity() is used to derive a contiguity neighbour list by using Queen’s method.\n\nnb_queen <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before = 1)\n\nThe code chunk below prints the neighbours found using the Queen’s method:\n\nsummary(nb_queen)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n    nb       wt.Length  wt.Class  wt.Mode    NAME_2               ID_3      \n NULL:NULL    5       -none-   numeric    Length:88          Min.   :21098  \n              5       -none-   numeric    Class :character   1st Qu.:21125  \n              4       -none-   numeric    Mode  :character   Median :21150  \n              4       -none-   numeric                       Mean   :21150  \n              4       -none-   numeric                       3rd Qu.:21174  \n              5       -none-   numeric                       Max.   :21201  \n              4       -none-   numeric                                      \n              7       -none-   numeric                                      \n              6       -none-   numeric                                      \n              8       -none-   numeric                                      \n              3       -none-   numeric                                      \n              5       -none-   numeric                                      \n              4       -none-   numeric                                      \n              3       -none-   numeric                                      \n              4       -none-   numeric                                      \n              5       -none-   numeric                                      \n              7       -none-   numeric                                      \n              5       -none-   numeric                                      \n              6       -none-   numeric                                      \n              7       -none-   numeric                                      \n              5       -none-   numeric                                      \n              5       -none-   numeric                                      \n              7       -none-   numeric                                      \n              5       -none-   numeric                                      \n              5       -none-   numeric                                      \n              4       -none-   numeric                                      \n              3       -none-   numeric                                      \n              5       -none-   numeric                                      \n              3       -none-   numeric                                      \n              1       -none-   numeric                                      \n              8       -none-   numeric                                      \n              8       -none-   numeric                                      \n              5       -none-   numeric                                      \n              3       -none-   numeric                                      \n              6       -none-   numeric                                      \n              6       -none-   numeric                                      \n              4       -none-   numeric                                      \n              4       -none-   numeric                                      \n              5       -none-   numeric                                      \n              6       -none-   numeric                                      \n              6       -none-   numeric                                      \n              7       -none-   numeric                                      \n              6       -none-   numeric                                      \n              4       -none-   numeric                                      \n              6       -none-   numeric                                      \n              3       -none-   numeric                                      \n              5       -none-   numeric                                      \n              5       -none-   numeric                                      \n              4       -none-   numeric                                      \n              5       -none-   numeric                                      \n              3       -none-   numeric                                      \n              5       -none-   numeric                                      \n              3       -none-   numeric                                      \n              6       -none-   numeric                                      \n              5       -none-   numeric                                      \n              7       -none-   numeric                                      \n              6       -none-   numeric                                      \n              5       -none-   numeric                                      \n              4       -none-   numeric                                      \n              4       -none-   numeric                                      \n              7       -none-   numeric                                      \n              3       -none-   numeric                                      \n              4       -none-   numeric                                      \n              2       -none-   numeric                                      \n              1       -none-   numeric                                      \n              5       -none-   numeric                                      \n              4       -none-   numeric                                      \n              5       -none-   numeric                                      \n              3       -none-   numeric                                      \n              3       -none-   numeric                                      \n              3       -none-   numeric                                      \n              5       -none-   numeric                                      \n              5       -none-   numeric                                      \n              6       -none-   numeric                                      \n              6       -none-   numeric                                      \n              7       -none-   numeric                                      \n              7       -none-   numeric                                      \n              7       -none-   numeric                                      \n              7       -none-   numeric                                      \n              8       -none-   numeric                                      \n              6       -none-   numeric                                      \n              5       -none-   numeric                                      \n              9       -none-   numeric                                      \n              6       -none-   numeric                                      \n             11       -none-   numeric                                      \n              9       -none-   numeric                                      \n              4       -none-   numeric                                      \n              2       -none-   numeric                                      \n    NAME_3           ENGTYPE_3            County              GDPPC      \n Length:88          Length:88          Length:88          Min.   : 8497  \n Class :character   Class :character   Class :character   1st Qu.:14566  \n Mode  :character   Mode  :character   Mode  :character   Median :20433  \n                                                          Mean   :24405  \n                                                          3rd Qu.:27224  \n                                                          Max.   :88656  \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n          geometry \n POLYGON      :88  \n epsg:4326    : 0  \n +proj=long...: 0"
  },
  {
    "objectID": "exercises/icex07.html#contiguity-weights-queens-method",
    "href": "exercises/icex07.html#contiguity-weights-queens-method",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "5.1 Contiguity Weights: Queen’s Method",
    "text": "5.1 Contiguity Weights: Queen’s Method\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb),\n         .before = 1)\n\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "exercises/icex07.html#contiguity-weights-rooks-method",
    "href": "exercises/icex07.html#contiguity-weights-rooks-method",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "5.2 Contiguity Weights: Rook’s Method",
    "text": "5.2 Contiguity Weights: Rook’s Method\n\nwm_r <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry, queen = FALSE),\n         wt = st_weights(nb),\n         .before = 1)\n\n\nwm_r\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                           nb\n1                3, 4, 57, 85\n2              57, 58, 78, 85\n3                 1, 4, 5, 85\n4                  1, 3, 5, 6\n5                 3, 4, 6, 85\n6            4, 5, 69, 75, 85\n7              67, 71, 74, 84\n8   9, 46, 47, 56, 78, 80, 86\n9       8, 66, 68, 78, 84, 86\n10 16, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                       0.25, 0.25, 0.25, 0.25\n2                                                       0.25, 0.25, 0.25, 0.25\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "exercises/icex07.html#performing-global-morans-i-test",
    "href": "exercises/icex07.html#performing-global-morans-i-test",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "6.1 Performing Global Moran’s I Test",
    "text": "6.1 Performing Global Moran’s I Test\n\nmoranI <- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n\n\n\n\n\nNote\n\n\n\nTypically global_moran test is not run, we can just run the global_moran_test as shown below\n\n\nPerforming Global Moran I Test\n\nglobal_moran_test(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nSince p-value < 0.05, we reject the null hypothesis. We observe clustering at the Moran I statistic is > 0."
  },
  {
    "objectID": "exercises/icex07.html#performing-global-moran-i-permutation-test",
    "href": "exercises/icex07.html#performing-global-moran-i-permutation-test",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "6.2 Performing Global Moran I Permutation Test",
    "text": "6.2 Performing Global Moran I Permutation Test\nIn Global Moran I test, it is called permutation test, but in other cases, it might be called Monte Carlo Simulation.\nIn the code below, we set a particular seed to ensure our results are reproducible.\nIf we run nsim = 99 we are actually running 100 simulations, the more simulations, especially if observations are small, the more stable the results.\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "exercises/icex07.html#computing-local-morans-i",
    "href": "exercises/icex07.html#computing-local-morans-i",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "7.1 Computing Local Moran’s I",
    "text": "7.1 Computing Local Moran’s I\n\nlisa <- wm_q %>%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n    .before = 1) %>%\n  unnest(local_moran)\nlisa\n\nSimple feature collection with 88 features and 20 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 21\n         ii        eii   var_ii    z_ii    p_ii p_ii_…¹ p_fol…² skewn…³ kurtosis\n      <dbl>      <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>\n 1 -0.00147  0.00177    4.18e-4 -0.158  0.874      0.82    0.41  -0.812  0.652  \n 2  0.0259   0.00641    1.05e-2  0.190  0.849      0.96    0.48  -1.09   1.89   \n 3 -0.0120  -0.0374     1.02e-1  0.0796 0.937      0.76    0.38   0.824  0.0461 \n 4  0.00102 -0.0000349  4.37e-6  0.506  0.613      0.64    0.32   1.04   1.61   \n 5  0.0148  -0.00340    1.65e-3  0.449  0.654      0.5     0.25   1.64   3.96   \n 6 -0.0388  -0.00339    5.45e-3 -0.480  0.631      0.82    0.41   0.614 -0.264  \n 7  3.37    -0.198      1.41e+0  3.00   0.00266    0.08    0.04   1.46   2.74   \n 8  1.56    -0.265      8.04e-1  2.04   0.0417     0.08    0.04   0.459 -0.519  \n 9  4.42     0.0450     1.79e+0  3.27   0.00108    0.02    0.01   0.746 -0.00582\n10 -0.399   -0.0505     8.59e-2 -1.19   0.234      0.28    0.14  -0.685  0.134  \n# … with 78 more rows, 12 more variables: mean <fct>, median <fct>,\n#   pysal <fct>, nb <nb>, wt <list>, NAME_2 <chr>, ID_3 <int>, NAME_3 <chr>,\n#   ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>, geometry <POLYGON [°]>, and\n#   abbreviated variable names ¹​p_ii_sim, ²​p_folded_sim, ³​skewness\n\n\n\n\n\n\n\n\nNote\n\n\n\nunnest is necessary to be able to plot the data. unnest is to unnest the values from a list to be able to plot it on tmap\n\n\nIn general, for lisa var, the mean or pysal should be the same, we can use either to plot the graph. In general, we do not need to use median unless we are concerned about non-normality assumptions."
  },
  {
    "objectID": "exercises/icex07.html#visualising-local-morans-i",
    "href": "exercises/icex07.html#visualising-local-morans-i",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "7.2 Visualising Local Moran’s I",
    "text": "7.2 Visualising Local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\n\n\n\nWe avoid using p_ii under lisa as it was not run over several simulations, we would prefer to use p_ii_sim instead.\n\nlisa_sig <- lisa %>% filter(p_ii < 0.05) # to modify code to plot non-significant values as a class itself also\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() + \n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_view(set.zoom.limits = c(6,8))\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "exercises/icex07.html#visualising-p-value-of-hcsa",
    "href": "exercises/icex07.html#visualising-p-value-of-hcsa",
    "title": "In-Class Exercise 7: Spatial Weights and Applications",
    "section": "8.1 Visualising p-value of HCSA",
    "text": "8.1 Visualising p-value of HCSA\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))"
  },
  {
    "objectID": "exercises/icex04.html",
    "href": "exercises/icex04.html",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\nevents such as crime, traffic accident and disease onset, or\nbusiness services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of spatstat, this In Class exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?\n\n\n\n\nFirstly, the code below will check if pacman has been installed. If it has not been installed, R will download and install it, before activating it for use during this session.\n\nif (!require('pacman', character.only = T)){\n  install.packages('pacman')\n}\n\nLoading required package: pacman\n\nlibrary('pacman')\n\nNext, pacman assists us by helping us load R packages that we require, sf, tidyverse and tmap.\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)\n\n\n\n\nThe following public datasets are used:\n\n\n\nDataset Name\nSource\n\n\n\n\nMaster Plan 2014 Subzone Boundary (Web) (MP14_SUBZONE_WEB_PL.shp)\ndata.gov.sg\n\n\nPre-Schools Location (preschools-location.geojson)\ndata.gov.sg\n\n\nCoastal Outline (CostalOutline.shp)\nProf Kam - SLA"
  },
  {
    "objectID": "exercises/icex04.html#importing-spatial-data",
    "href": "exercises/icex04.html#importing-spatial-data",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "2.1 Importing Spatial Data",
    "text": "2.1 Importing Spatial Data\nWe will use st_read() of sf package to import the three geospatial datasets.\n\nchildcare_sf <- st_read(dsn = \"In-Class_Ex04/data/geospatial/child-care-services-geojson.geojson\")\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex04\\data\\geospatial\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"In-Class_Ex04/data/geospatial\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"In-Class_Ex04/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "exercises/icex04.html#inspect-and-reproject-coordinate-system",
    "href": "exercises/icex04.html#inspect-and-reproject-coordinate-system",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "2.2 Inspect and Reproject Coordinate System",
    "text": "2.2 Inspect and Reproject Coordinate System\n\n2.2.1 Childcare Dataset\nFirst, we inspect the crs of the sf dataframe.\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nThe ID provided is EPSG:4326 which matches the intended WGS84 Coordinate reference. We will now convert the CRS from WGS84 Geographic Coordinate System to SVY21 Projected Coordinate System for further analysis.\n\nchildcare_sf <- st_transform(childcare_sf , crs = 3414)\n\n\n\n2.2.2 Coastal Outline Dataset\nFirst, we inspect the crs of the sf dataframe.\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe ID provided is EPSG:9001 which does not match the intended Projected CRS input of SVY21. Now, we correct the CRS ID using the code below.\n\nsg_sf <- st_set_crs(sg_sf,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check if the CRS ID has been set correctly:\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n2.2.3 Master Plan Subzone Dataset\nFirst, we inspect the crs of the sf dataframe.\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe ID provided is EPSG:9001 which does not match the intended Projected CRS input of SVY21. Now, we correct the CRS ID using the code below.\n\nmpsz_sf <- st_set_crs(mpsz_sf,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check if the CRS ID has been set correctly:\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "exercises/icex04.html#mapping-the-geospatial-datasets",
    "href": "exercises/icex04.html#mapping-the-geospatial-datasets",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "2.3 Mapping the Geospatial Datasets",
    "text": "2.3 Mapping the Geospatial Datasets\nAfter checking the CRS of each geospatial data frame, we can plot a map to see their spatial patterns.\n\n2.3.1 Static Map\nFirst, we will create a static map to get a general feel of the dataset.\n\nchildcare_sf\n\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name\n1   kml_1\n2   kml_2\n3   kml_3\n4   kml_4\n5   kml_5\n6   kml_6\n7   kml_7\n8   kml_8\n9   kml_9\n10 kml_10\nescription\n1                     <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>760742</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>742, YISHUN AVENUE 5, #01 - 470, SINGAPORE 760742</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>AVERBEL CHILD DEVELOPMENT CENTRE PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>AEA27114446235CE</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n2                                                        <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>159053</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>20, LENGKOK BAHRU, #02 - 05, SINGAPORE 159053</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>AWWA LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>86B24416FB1663C6</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n3                            <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>556912</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>22, LI HWAN VIEW, GOLDEN HILL ESTATE, SINGAPORE 556912</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>BABIES BY-THE-PARK PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>F971CBBA973E1AE5</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n4                     <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>569139</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>3, ANG MO KIO STREET 62, #01 - 36, LINK@AMK, SINGAPORE 569139</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>Baby Elk Infant Care Pte Ltd</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>86A4F25D1C7C9D85</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n5                                               <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>467961</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>22A, KEW DRIVE, SINGAPORE 467961</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>BABYPLANET MONTESSORI PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>CFE3F056F8171C7B</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n6                                           <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>598523</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>3 Jalan Kakatua, JURONG PARK, SINGAPORE 598523</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>BAMBINI CHILDCARE LLP</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>2B4F0B285ED28C4A</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n7                              <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>160131</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>131, JALAN BUKIT MERAH, #01 - 1591, SINGAPORE 160131</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>BAMBINI MONTESSORI PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>F62A225197813BBD</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n8                        <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>543319</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>319C, ANCHORVALE DRIVE, #01 - 66, SINGAPORE 543319</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>BERRY TREE PRESCHOOL PRIVATE LIMITED</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>AE242159867D5EB2</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n9  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>750511</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>511, CANBERRA ROAD, #03 - 02, SEMBAWANG MART, SINGAPORE 750511</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>BERRY TREE PRESCHOOL@SEMBAWANG PRIVATE LIMITED</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>C1456F97A17ED64A</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n10                    <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>823195</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>195C, PUNGGOL ROAD, #01 - 532, THE PERIWINKLE, SINGAPORE 823195</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>BERRY TREE@PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>4F6A8FCA467C3437</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n                        geometry\n1   POINT Z (27976.73 45716.7 0)\n2     POINT Z (25824 29900.09 0)\n3  POINT Z (31399.04 37416.36 0)\n4   POINT Z (29268.43 40942.1 0)\n5  POINT Z (41217.74 33554.94 0)\n6  POINT Z (20644.07 36118.78 0)\n7  POINT Z (27427.95 29182.36 0)\n8  POINT Z (34378.47 41423.03 0)\n9  POINT Z (26467.04 48384.34 0)\n10 POINT Z (36173.81 42550.33 0)\n\n\n\ntm_shape(sg_sf)+\n  tm_polygons() +\ntm_shape(mpsz_sf) +\n  tm_polygons() +\ntm_shape(childcare_sf) +\n  tm_dots() +\ntmap_options(check.and.fix = TRUE)\n\nWarning: The shape sg_sf is invalid. See sf::st_is_valid\n\n\nWarning: The shape mpsz_sf is invalid. See sf::st_is_valid\n\n\n\n\n\nHere, we do not see any anomalies, all the geospatial points are within the map’s context, which means that the reference system and coordinate values are referred to the similar spatial context.\nWe can also prepare a pin map (interactive) by using the code below\n\ntmap_mode('view') +\ntm_shape(childcare_sf) +\n  tm_dots(alph = 0.5, size = 0.01) +\n  tm_view(set.zoom.limits = c(11, 14))\n\ntmap mode set to interactive viewing\n\n\n\n\n\n\n\nFrom the interactive map above, we can see that tmap is ustilising the leaflet for R API, which allows us to interact, navigate, zoom and query each simple feature. Changing the background of the map is also possible.\nBy using alph = 0.5 it allows us to plot the dots. The setting will allow for dots to be translucent so that we can tell if\nAfter setting the tmap_mode() to view we need to remember to switch it back to plot."
  },
  {
    "objectID": "exercises/icex04.html#converting-sf-dataframes-to-sps-spatial-class",
    "href": "exercises/icex04.html#converting-sf-dataframes-to-sps-spatial-class",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.1 Converting sf Dataframes to sp’s Spatial* Class",
    "text": "3.1 Converting sf Dataframes to sp’s Spatial* Class\nWhile simple feature data frame is gaining in popularity, many geospatial analysis packages still require the input geospatial data in sp’s Spatial* classes. We will convert the sf data frames to sp’s Spatial* Class below.\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\nNow, let’s view the information of the Spatial* classes below:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nNow, they have been correctly converted into sp’s Spatial* classes."
  },
  {
    "objectID": "exercises/icex04.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "exercises/icex04.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.2 Converting the Spatial* Class into Generic sp Format",
    "text": "3.2 Converting the Spatial* Class into Generic sp Format\nspstat requires the analytical data to be in ppp object form. As there is no direct method to convert Spatial* classes to ppp object, we need to convert the Spatial* classes into an intermediate Spatial object first.\nThecode below converts Spatial* Classes into generic sp objects\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\nNext, we can check the sp object properties.\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\nComparing the sp object and Spatial* Classes, the variables, names, min and max values are omitted from the sp object but present in Spatial* Classes."
  },
  {
    "objectID": "exercises/icex04.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "exercises/icex04.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.3 Converting the Generic sp Format into spatstat’s ppp Format",
    "text": "3.3 Converting the Generic sp Format into spatstat’s ppp Format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\nNow, let us plot childcare_ppp and examine the difference\n\nplot(childcare_ppp)\n\n\n\n\nWe can take a quick look at the summary statistics of the newly created ppp object by using the code below:\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nNote the warning message about duplicates. The statistical methodology used for spatial points pattern processes is based largely on the assumption that processes are simple, that means that the points cannot be coincident."
  },
  {
    "objectID": "exercises/icex04.html#handling-duplicated-points",
    "href": "exercises/icex04.html#handling-duplicated-points",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.4 Handling duplicated points",
    "text": "3.4 Handling duplicated points\nWe can check the duplication in a ppp object using the code below\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of coincident points, we can use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\nThe output shows that there are 128 duplicated point events.\nTo view the locations of the duplicated point events, we can plot the childcare dataset by using the code chunk below.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) +\n  tm_dots(alpha = 0.4,\n          size = 0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nFrom the interactive map above, you can see that the duplicated points have points that are darker in color, as the transparency of 1 point has been set to an alpha of 0.4, two overlapping points will make it more opaque.\nThere are a few ways to overcome this problem:\n\nDelete the duplicates. However, some useful point events will be lost\njittering. Adds small perturrbations to duplicate points so that they do not occupy the same exact space\nMake each point “unique” and then attach duplicates of points to the patterns as marks, as attributes of the points. Then we can use analytical techniques that take into account the marks.\n\nWe use the second approach, jittering to manipulate the points below\n\nchildcare_ppp_jit <- rjitter(childcare_ppp,\n                             retry = TRUE,\n                             nsim = 1,\n                             drop = TRUE)\n\nNow, let’s check the if there are still any duplicated points below\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "exercises/icex04.html#creating-owin-object",
    "href": "exercises/icex04.html#creating-owin-object",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.5 Creating owin object",
    "text": "3.5 Creating owin object\nWhen analysing spatial point patterns, it is good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code cunk below is used to convert the sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin <- as(sg_sp, \"owin\")\n\nThe output object can be displayed by using plot() function.\n\nplot(sg_owin)\n\n\n\n\nand summary() function of Base R.\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414"
  },
  {
    "objectID": "exercises/icex04.html#combining-point-events-object-and-owin-object",
    "href": "exercises/icex04.html#combining-point-events-object-and-owin-object",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.6 Combining Point Events Object and owin Object",
    "text": "3.6 Combining Point Events Object and owin Object\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore using the code below\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)\n\n\n\n\n\n3.6.1 Extracting Study Areas\nThe code below will help us to extract the target planning areas\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Punggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n3.6.2 Converting the Spatial Point Data Frame into Generic sp Format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\n3.6.3 Creating owin Object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n3.6.4 Combining Childcare Points and the Study Area\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nWe use rescale() to transform the units of measurement from metre to kilometre\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nNow, we will plot the four study areas and locations of childcare centres\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "exercises/icex04.html#analysing-spatial-point-process-using-g-function",
    "href": "exercises/icex04.html#analysing-spatial-point-process-using-g-function",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 Analysing Spatial Point Process Using G-Function",
    "text": "4.1 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of distances from an arbitary event to its nearest event. Here, we will use G-function estimation (Gest()) and Monte Carlo simulation test (envelope()) to perform the analysis.\n\n4.1.1 Choa Chu Kang Planning Area\n\n4.1.1.1 Computing G-Function Estimation\nThe code below is used to compute G-function using Gest() of spatstat package.\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n4.1.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, we will conduct a hypothesis test. The hypothesis and test are shown below:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n4.1.2 Tampines Planning Area\n\n4.1.2.1 Computing G-function estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n4.1.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, we will conduct a hypothesis test. The hypothesis and test are shown below:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "exercises/icex04.html#analysing-spatial-point-process-using-f-function",
    "href": "exercises/icex04.html#analysing-spatial-point-process-using-f-function",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.2 Analysing Spatial Point Process Using F-Function",
    "text": "4.2 Analysing Spatial Point Process Using F-Function\n\n4.2.1 Choa Chu Kang planning area\n\n4.2.1.1 Computing F-function estimation\nThe code below is used to compute F-function using Fest() of spatstat package.\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n4.2.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, we will conduct a hypothesis test. The hypothesis and test are shown below:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n4.2.2 Tampines Planning Area\n\n4.2.2.1 Computing K-function estimation\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n4.2.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, we will conduct a hypothesis test. The hypothesis and test are shown below:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "exercises/icex04.html#analysing-spatial-point-process-using-l-function",
    "href": "exercises/icex04.html#analysing-spatial-point-process-using-l-function",
    "title": "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.3 Analysing Spatial Point Process Using L-Function",
    "text": "4.3 Analysing Spatial Point Process Using L-Function\nIn this section, we will use Lest() of spatstat to compute L Function estimation and also perform Monte Carlo simulation test using envelope() of spatstat.\n\n4.3.1 Choa Chu Kang planning area\n\n4.3.1.1 Computing L Function Estimation\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n4.3.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, we will conduct a hypothesis test. The hypothesis and test are shown below:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n4.3.2 Tampines Planning Area\n\n4.3.2.1 Computing L Function Estimate\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n4.3.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, we will conduct a hypothesis test. The hypothesis and test are shown below:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\nWe can plot the model using the code below:\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "exercises/thex02.html#aspatial-data",
    "href": "exercises/thex02.html#aspatial-data",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "3.2 Aspatial Data",
    "text": "3.2 Aspatial Data\n\n3.2.1 Importing Aspatial Datsets\nNext, we will import the aspatial datasets\n\nvac_202106 <- read_excel(\"Take-Home_Ex02/data/aspatial/20210630.xlsx\")\nvac_202107 <- read_excel(\"Take-Home_Ex02/data/aspatial/20210731.xlsx\")\nvac_202108 <- read_excel(\"Take-Home_Ex02/data/aspatial/20210831.xlsx\")\nvac_202109 <- read_excel(\"Take-Home_Ex02/data/aspatial/20210930.xlsx\")\nvac_202110 <- read_excel(\"Take-Home_Ex02/data/aspatial/20211031.xlsx\")\nvac_202111 <- read_excel(\"Take-Home_Ex02/data/aspatial/20211130.xlsx\")\nvac_202112 <- read_excel(\"Take-Home_Ex02/data/aspatial/20211231.xlsx\")\nvac_202201 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220131.xlsx\")\nvac_202202 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220227.xlsx\")\nvac_202203 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220331.xlsx\")\nvac_202204 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220430.xlsx\")\nvac_202205 <- read_excel(\"Take-Home_Ex02/data/aspatial/20220531.xlsx\")\n\n\n\n3.2.2 Preparing Aspatial Data\nLet’s have a look at one of the asptial dataset files and it’s columns:\n\nvac_202106\n\n# A tibble: 268 × 21\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   7739060 5113425 2623759 1179448 3803207\n 2 3172051003    JAKART… PADEMA… ANCOL     20393   13394    6992    3277   10269\n 3 3173041007    JAKART… TAMBORA ANGKE     25785   16743    9033    3217   12250\n 4 3175041005    JAKART… KRAMAT… BALE K…   25158   19068    6082    2636    8718\n 5 3175031003    JAKART… JATINE… BALI M…    8683    5816    2864    1512    4376\n 6 3175101006    JAKART… CIPAYU… BAMBU …   22768   15575    7189    3977   11166\n 7 3174031002    JAKART… MAMPAN… BANGKA    18930   12655    6269    2699    8968\n 8 3175051002    JAKART… PASAR … BARU      20267   11481    8769    4668   13437\n 9 3175041004    JAKART… KRAMAT… BATU A…   41389   30601   10777    5234   16011\n10 3171071002    JAKART… TANAH … BENDUN…   19008   11660    7341    3561   10902\n# … with 258 more rows, 12 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n\nThe dataset contains many columns, telling us about the specific breakdown of vaccinatation rates by targeted population (SASARAN), yet to be vaccinated (BELUM VAKSIN), breakdowns of vaccination and doses taken by different user groups and total number of vaccinations.\nSince we are only interested in visualising and analysing the monthly vaccination rate in Jarkata, we only require the targeted population (SASARAN) and yet to be vaccinated (BELUM VAKSIN) columns and derive the formula:\n\n\n\n\n\n\nNote\n\n\n\nPercentage of the cumulative vaccination rate = (targeted / total population)\n\n\nLet us also check what City Areas (WILAYAH KOTA) the dataset contains:\n\nunique(vac_202106$`WILAYAH KOTA`)\n\n[1] NA                   \"JAKARTA UTARA\"      \"JAKARTA BARAT\"     \n[4] \"JAKARTA TIMUR\"      \"JAKARTA SELATAN\"    \"JAKARTA PUSAT\"     \n[7] \"KAB.ADM.KEP.SERIBU\"\n\n\nSince we do not want the outer islands, we should remove values with City Area KAB.ADM.KEP.SERIBU.\nAlso, we can see there is an NA value, attributed to the first row which contains the Total count, which we want to remove.\nLet’s check how many rows we should expect in our tidied dataframe per month:\n\nvac_202106 %>% filter(vac_202106$`WILAYAH KOTA` != \"KAB.ADM.KEP.SERIBU\")\n\n# A tibble: 261 × 21\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 3172051003    JAKART… PADEMA… ANCOL     20393   13394    6992    3277   10269\n 2 3173041007    JAKART… TAMBORA ANGKE     25785   16743    9033    3217   12250\n 3 3175041005    JAKART… KRAMAT… BALE K…   25158   19068    6082    2636    8718\n 4 3175031003    JAKART… JATINE… BALI M…    8683    5816    2864    1512    4376\n 5 3175101006    JAKART… CIPAYU… BAMBU …   22768   15575    7189    3977   11166\n 6 3174031002    JAKART… MAMPAN… BANGKA    18930   12655    6269    2699    8968\n 7 3175051002    JAKART… PASAR … BARU      20267   11481    8769    4668   13437\n 8 3175041004    JAKART… KRAMAT… BATU A…   41389   30601   10777    5234   16011\n 9 3171071002    JAKART… TANAH … BENDUN…   19008   11660    7341    3561   10902\n10 3175031002    JAKART… JATINE… BIDARA…   32331   23675    8652    4030   12682\n# … with 251 more rows, 12 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code block above tells us we are expecting 261 rows per month, a total of 3132 rows for our combined vaccination dataset over 12 months\n\n\nThe creates a function proc_data() which processes the imported dataset to do the following:\n\nRemove the “Total” row\nRemove the outer islands records\nDrop unnecessary columns not required for processing\nRecode Bahasa Indonesia column names to English for easy processing\nAdd a period column which indicates the month\nCalculate vaccination rate (VaccinationRate) utilising formula stated above\nMerge the geometry from jkt into the new dataframe\n\n\nproc_data <- function(df, date){\n    df <- filter(df, df$KELURAHAN != \"TOTAL\")\n    df <- filter(df, df$`WILAYAH KOTA` != \"KAB.ADM.KEP.SERIBU\")\n    new_df <- left_join(jkt, df,\n                          by = c(\"SubDistrictCode\" = \"KODE KELURAHAN\"))\n    \n    # recode column names to english\n    new_df <- new_df %>% rename(\n                      \"CityArea\" = \"WILAYAH KOTA\",\n                      \"TargetPop\" = \"SASARAN\",\n                      \"YetToBeVac\" = \"BELUM VAKSIN\")\n    \n    new_df <- new_df[,c(\"OBJECT_ID\",\n                   \"SubDistrictCode\",\n                   \"SubDistrict\",\n                   \"Code\",\n                   \"Province\",\n                   \"City\",\n                   \"District\",\n                   \"SubDistrictName\",\n                   \"TotalPop\",\n                   \"CityArea\",\n                   \"TargetPop\",\n                   \"YetToBeVac\"\n                   )]\n    \n    new_df$period = date\n    \n    new_df <- new_df %>%\n      mutate(VaccinationRate = (new_df$TargetPop - new_df$YetToBeVac) / new_df$TargetPop)\n    \n    return (new_df)\n}\n\nThe code chunk below assists us in the vaccination processing the raw vaccination data to create an sf object with geometry using the proc_data() function we have created earlier above.\n\nproc2106 <- proc_data(vac_202106, 202106)\nproc2107 <- proc_data(vac_202107, 202107)\nproc2108 <- proc_data(vac_202108, 202108)\nproc2109 <- proc_data(vac_202109, 202109)\nproc2110 <- proc_data(vac_202110, 202110)\nproc2111 <- proc_data(vac_202111, 202111)\nproc2112 <- proc_data(vac_202112, 202112)\nproc2201 <- proc_data(vac_202201, 202201)\nproc2202 <- proc_data(vac_202202, 202202)\nproc2203 <- proc_data(vac_202203, 202203)\nproc2204 <- proc_data(vac_202204, 202204)\nproc2205 <- proc_data(vac_202205, 202205)\n\nUsing rbind() we merge all sf objects of each month into a singular sf object.\n\ncombined_jkt_vac <- rbind(proc2106, proc2107, proc2108, proc2109, proc2110, proc2111, proc2112, proc2201, proc2202, proc2203, proc2204, proc2205)\n\nLet us inspect the combined_jkt_vac sf object now.\n\nglimpse(combined_jkt_vac)\n\nRows: 3,132\nColumns: 15\n$ OBJECT_ID       <dbl> 25477, 25478, 25397, 25400, 25390, 25391, 25394, 25386…\n$ SubDistrictCode <chr> \"3173031006\", \"3173031007\", \"3171031003\", \"3171031006\"…\n$ SubDistrict     <chr> \"KEAGUNGAN\", \"GLODOK\", \"HARAPAN MULIA\", \"CEMPAKA BARU\"…\n$ Code            <dbl> 317303, 317303, 317103, 317103, 317102, 317102, 317102…\n$ Province        <chr> \"DKI JAKARTA\", \"DKI JAKARTA\", \"DKI JAKARTA\", \"DKI JAKA…\n$ City            <chr> \"JAKARTA BARAT\", \"JAKARTA BARAT\", \"JAKARTA PUSAT\", \"JA…\n$ District        <chr> \"TAMAN SARI\", \"TAMAN SARI\", \"KEMAYORAN\", \"KEMAYORAN\", …\n$ SubDistrictName <chr> \"KEAGUNGAN\", \"GLODOK\", \"HARAPAN MULIA\", \"CEMPAKA BARU\"…\n$ TotalPop        <dbl> 21609, 9069, 29085, 41913, 15793, 33383, 35906, 21828,…\n$ CityArea        <chr> \"JAKARTA BARAT\", \"JAKARTA BARAT\", \"JAKARTA PUSAT\", \"JA…\n$ TargetPop       <dbl> 15262, 7192, 19987, 27330, 11656, 23056, 24940, 16084,…\n$ YetToBeVac      <dbl> 10407, 3622, 13778, 18618, 6162, 15233, 16405, 10609, …\n$ period          <dbl> 202106, 202106, 202106, 202106, 202106, 202106, 202106…\n$ VaccinationRate <dbl> 0.3181103, 0.4963849, 0.3106519, 0.3187706, 0.4713452,…\n$ geometry        <MULTIPOLYGON [m]> MULTIPOLYGON (((-764674.9 8..., MULTIPOLY…\n\n\nChecking back with our previous calculations, we have 3132 rows here, hence, the data preparation has been done correctly!"
  },
  {
    "objectID": "exercises/thex02.html#gathering-requisite-data",
    "href": "exercises/thex02.html#gathering-requisite-data",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "5.1 Gathering Requisite Data",
    "text": "5.1 Gathering Requisite Data\nWe will create another function to come up with the data format required for the spacetime cube:\nThe creates a function proc_timeseries_raw_data() which processes the imported dataset to do the following:\n\nRemove the “Total” row\nRemove the outer islands records\nDrop unnecessary columns not required for processing\nRecode Bahasa Indonesia column names to English for easy processing\nAdd a period column which indicates the month\nCalculate vaccination rate (VaccinationRate) utilising formula stated above\n\n\nproc_timeseries_raw_data <- function(df, date){\n    df <- filter(df, df$KELURAHAN != \"TOTAL\")\n    df <- filter(df, df$`WILAYAH KOTA` != \"KAB.ADM.KEP.SERIBU\")\n    \n    # recode column names to english\n    new_df <- df %>% rename(\n                      \"SubDistrict\" = \"KELURAHAN\",\n                      \"SubDistrictCode\" = \"KODE KELURAHAN\",\n                      \"CityArea\" = \"WILAYAH KOTA\",\n                      \"TargetPop\" = \"SASARAN\",\n                      \"YetToBeVac\" = \"BELUM VAKSIN\")\n    \n    new_df <- new_df[,c(\n                   \"SubDistrictCode\",\n                   \"SubDistrict\",\n                   \"CityArea\",\n                   \"TargetPop\",\n                   \"YetToBeVac\"\n                   )]\n    \n    new_df$period = date\n    \n    new_df <- new_df %>%\n      mutate(VaccinationRate = (new_df$TargetPop - new_df$YetToBeVac) / new_df$TargetPop)\n    \n    return (new_df)\n}\n\nThe code chunk below uses the proc_timeseries_raw_data() function to process the original imported vaccination data into data usable for the time series cube. We will use rbind() to combine all the tables together\n\njkt_vac <-\nrbind(proc_timeseries_raw_data(vac_202106, 202106),\n      proc_timeseries_raw_data(vac_202107, 202107),\n      proc_timeseries_raw_data(vac_202108, 202108),\n      proc_timeseries_raw_data(vac_202109, 202109),\n      proc_timeseries_raw_data(vac_202110, 202110),\n      proc_timeseries_raw_data(vac_202111, 202111),\n      proc_timeseries_raw_data(vac_202112, 202112),\n      proc_timeseries_raw_data(vac_202201, 202201),\n      proc_timeseries_raw_data(vac_202202, 202202),\n      proc_timeseries_raw_data(vac_202203, 202203),\n      proc_timeseries_raw_data(vac_202204, 202204),\n      proc_timeseries_raw_data(vac_202205, 202205)\n      )\n\nWe will also reload the map and perform the required transformations that were done above. The only difference in jkt_geo is that we will just drop the two polygons which has no City, District or Subdistrict filled in instead of merging to PADEMANGAN TIMUR:\n\nDANAU SUNTER (OBJECT_ID 25645)\nDANAU SUNTER DLL (OBJECT_ID 25646)\n\nThis is done as there would be errors in computing the weights later on using the originally merged geometry.\n\njkt_geo <- st_read(dsn = \"Take-Home_Ex02/data/geospatial\", layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\") %>% st_transform(crs = 23837) \n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Take-Home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\njkt_geo  <- jkt_geo[0:9] \njkt_geo <- jkt_geo %>% rename(\"SubDistrictCode\" = \"KODE_DESA\",\n                      \"SubDistrict\" = \"DESA\",\n                      \"Code\" = \"KODE\",\n                       \"Province\" = \"PROVINSI\",\n                      \"City\" = \"KAB_KOTA\",\n                      \"District\" = \"KECAMATAN\",\n                      \"SubDistrictName\" = \"DESA_KELUR\",\n                      \"TotalPop\" = \"JUMLAH_PEN\") \njkt_geo <- jkt_geo %>% \n  filter(jkt_geo$City != \"KEPULAUAN SERIBU\")"
  },
  {
    "objectID": "exercises/thex02.html#creating-spatio-temporal-time-series-cube",
    "href": "exercises/thex02.html#creating-spatio-temporal-time-series-cube",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "5.2 Creating Spatio-Temporal Time Series Cube",
    "text": "5.2 Creating Spatio-Temporal Time Series Cube\nUsing the code below, we will use spacetime() of sfdep package to create a spatio-temporal cube\n\njkt_st <- spacetime(.data = jkt_vac, .geometry = jkt_geo,\n                    .loc_col = \"SubDistrictCode\",\n                    .time_col = \"period\")\n\nNext, we will check if the spacetime cube has been created correctly with the code below:\n\nis_spacetime_cube(jkt_st)\n\n[1] TRUE\n\n\nThe TRUE return means that the jkt_st space time cube has been created successfully."
  },
  {
    "objectID": "exercises/thex02.html#computing-gi",
    "href": "exercises/thex02.html#computing-gi",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "6.1 Computing Gi*",
    "text": "6.1 Computing Gi*\nNext, we will compute the local Gi* statistics\n\n6.1.1 Deriving Spatial Weights\nUsing the code chunk below, we will be able to identify neighbours and derive inverse distance weights, which will be necessary to compute the local GI* statistics.\n\njkt_nb <- jkt_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\nNow, let us check the variable jkt_nb\n\nhead(jkt_nb)\n\n# A tibble: 6 × 9\n  SubDistrictCode SubDistrict CityA…¹ Targe…² YetTo…³ period Vacci…⁴ nb    wt   \n  <chr>           <chr>       <chr>     <dbl>   <dbl>  <dbl>   <dbl> <lis> <lis>\n1 3173031006      KEAGUNGAN   JAKART…   15262   10407 202106   0.318 <int> <dbl>\n2 3173031007      GLODOK      JAKART…    7192    3622 202106   0.496 <int> <dbl>\n3 3171031003      HARAPAN MU… JAKART…   19987   13778 202106   0.311 <int> <dbl>\n4 3171031006      CEMPAKA BA… JAKART…   27330   18618 202106   0.319 <int> <dbl>\n5 3171021001      PASAR BARU  JAKART…   11656    6162 202106   0.471 <int> <dbl>\n6 3171021002      KARANG ANY… JAKART…   23056   15233 202106   0.339 <int> <dbl>\n# … with abbreviated variable names ¹​CityArea, ²​TargetPop, ³​YetToBeVac,\n#   ⁴​VaccinationRate\n\n\nWe can see that the neighbour (nb) and weights (wt) has been calculated.\n\n\n6.1.2 Computing Gi* Values\nUtilising the code chunk below, we use local_gstar_perm() of sfdep package and group by period to manually calculate the local GI* statistic for each subdistrict. After which, we can use unnest() to unnest the gi_star column of the new dataframe.\n\ngistars <- jkt_nb %>%\n  group_by(period) %>%\n  mutate(gi_star = local_gstar_perm(\n    VaccinationRate, nb, wt)) %>%\n  tidyr::unnest(gi_star)\n\nWith the statistic, we can merge our geometry to be able to plot and see the statistical trends of the local GI* statistic\n\ngistar_map <- left_join(jkt_geo, gistars,\n                          by = c(\"SubDistrictCode\" = \"SubDistrictCode\"))\n\nWe create the tmap plot for gi_star statistic. Note we use p_sim to used the simulated values and used fixed style and breaks to plot the values that were P < 0.05 which are areas that are significant.\n\ngistar_map <- gistar_map %>% mutate(`P-Value` = case_when(p_sim < 0.05 ~ '< 0.05',  p_sim >= 0.05 ~ 'Not-Significant'))\n\ngistar_tmap <-\n  tm_shape(gistar_map) + \n    tm_fill(\"P-Value\") +\n    tm_borders(lwd = 0.1) +\n    tm_facets(along = \"period\", free.coords = FALSE)\n\nNow, we plot the tmap plot of areas where the Gi* statistic is significant.\n\ngistar_tmap\n\n\n\n\n=============\n\n\n\n\n\n=======\n\n\n\n\n\n=======\n\n\n\n\n\n======\n\n\n\n\n\n=======\n\n\n\n\n\n=======\n\n\n\n\n\n======\n\n\n\n\n\n=======\n\n\n\n\n\n=======\n\n\n\n\n\n======\n\n\n\n\n\n=======\n\n\n\n\n\nWhat it means is that for values in yellow, since the P Value is <0.05 which is significant, we know that the area is significantly either associated with higher or lower vaccination rate values than the surrounding areas.\nThe Central Jarkata region consistently remained as significantly different from its surrounding regions throughout the 12 months. From about October 2021 onwards until May 2022, we can see most of Jarkata Selatan’s subdistricts are significant. Part of Jarkata Timur’s subdistricts, particularly those in the middle and south of the city area are significant too.\nNow, we will conduct a Emerging Hot Spot Analysis to conclusively tell if the area that is significant is a cold or hot spot."
  },
  {
    "objectID": "exercises/thex02.html#mann-kendall-test",
    "href": "exercises/thex02.html#mann-kendall-test",
    "title": "Take-Home Exercise 02: Spatio-Temporal Analysis of COVID-19 Vaccination Trends in Jarkata",
    "section": "7.1 Mann-Kendall Test",
    "text": "7.1 Mann-Kendall Test\nWe utilise the group_by and MannKendall() function to perform the Mann-Kendall test to identify if the Vaccination Rates are increasing or decreasing over time.\n\nehsa <- gistars %>%\n  group_by(SubDistrict) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n\n\n7.1.0.1 Selecting 3 Districts to Evaluate the Temporal Trends Revealed\nHypothesis:\nH0: No monotonic trend in series\nH1: A trend exists, it can be positive, negative, or non-null\n\nKAPUK MUARA (3172011003)\n\nplotdata <- gistars %>% \n  ungroup() %>% \n  filter(SubDistrictCode == \"3172011003\") |> \n  select(SubDistrict, period, gi_star)\n\nggplot(data = plotdata, \n       aes(x = period, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\nFirstly, we can see theres a sharp upward and then gradual downward trend.\n\n#ehsa %>% filter(location == 3172011003) \n\nNext, since the p_value < 0.05, we can reject the null hypothesis that there is no monotonic trend. Hence, we can conclude that we can say that the vaccination rate for Kapuk Muara is significantly a osciliating hotspot trend.\nHALIM PERDANA KUSUMA (3175081004)\n\nplotdata <- gistars %>% \n  ungroup() %>% \n  filter(SubDistrictCode == 3175081004) |> \n  select(SubDistrict, period, gi_star)\n\nggplot(data = plotdata, \n       aes(x = period, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\nFirstly, we can see theres mostly a general upward trend most of the time. Meaning that the vaccination rates are increasing.\n\n#ehsa %>% filter(location == 3175081004) \n\nNext, since the p_value < 0.05, we can reject the null hypothesis that there is no monotonic trend. Hence, we can conclude that we can say that the vaccination rate for Halim Perdana Kusuma is significantly a osciliating hotspot trend.\nKEBON MELATI (3171071005)\n\nplotdata <- gistars %>% \n  ungroup() %>% \n  filter(SubDistrictCode == \"3171071005\") |> \n  select(SubDistrict, period, gi_star)\n\nggplot(data = plotdata, \n       aes(x = period, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\nFirstly, we can see theres mostly a downward trend of vaccination most of the time.\n\n#ehsa %>% filter(location == \"3171071005\") \n\nNext, since the p-value is not < 0.05, we cannot reject the null hypothesis. Hence, the trend is signifcant and there is no monotonic trend.\n\n\n\n7.1.1 Arranging to Show Significant Emerging Hot/Cold Spots\n\nemerging <- ehsa %>%\n  arrange(sl, abs(tau)) %>%\n  slice(1:5)\n\n\n\n7.1.2 Performing Emerging Hotspot Analysis\nUtilising the emerging_hotspot_analysis() function of sfdep, it tasks a space time object jkt_st which we created before and the variable name which we are interested in VaccinationRate.\nBy default we leave k = 1 which is for time lag. nsim in this case is number of simulations to be performed, the more simulations the more stable the result.\n\nehsa <- emerging_hotspot_analysis(\n  x = jkt_st, \n  .var = \"VaccinationRate\", \n  k = 1, \n  nsim = 99\n)\n\n\n\n7.1.3 Visualising the Distribution of EHSA Classes\nUsing the code chunk below, we use ggplot2 functions to see the distribution of EHSA classes in a bar chart.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\nHere, we can see most subdistricts are an oscilating hotspot meaning that statistically, many of these hotspots are a statistically significant cold spot during a prior month and less than 90% of the months, it has been a statistically significant hot spot. We can verify this as in the previous chloropleth map plotted, the vaccination rates changed at different rates, hence, a subdistrict’s which is initially lower could become higher than other subdistricts surrounding it int he next month.\nSecondly, many of the subdistricts were sporadic cold spots, which means that they have these subdistricts have a history of being on and off-again cold spots, less than 90% of the months it has been statistically cold spots and it has never been a significant hot spot.\nBy 90% of months, given that there are 12 months, 90% would mean requiring to be a significant hot or cold spot for at least 11 out of the 12 months.\n\n\n7.1.4 Visualising EHSA\nNow, we will join the EHSA values with the geometry of Jarkata subdistrict map to see the distribution.\n\njkt_ehsa <- left_join(jkt_geo, ehsa,\n                          by = c(\"SubDistrictCode\" = \"location\"))\n\nNext, we will plot the map, we utilise mutate to filter non-significant values out as non-significant. Significant values with P-value < 0.05 will have its its hot or cold spot pattern indicated.\n\nehsa_sig <- jkt_ehsa\nehsa_sig <- ehsa_sig %>% mutate(classification = case_when(\n    `p_value` >= 0.05 ~ \"not-Significant\", \n    TRUE ~ classification \n))\ntmap_mode(\"plot\")\ntm_shape(jkt_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nFrom the EHSA Map, we can see that:\n\nThere are three states where no pattern is detected. These means that they do not fall into any of the hot spot or cold spot categories.\nThere are no subdistrict that is persistently hot or cold as compared to its surrounding subdistricts. This means that no one subdistrict has had a consistently higher vaccination rate than its neighbours\nOscillating Hotspots, coldspots and sporadic coldspots subdistricts are interspersed between each other. These cause their patterns to change as one subdistrict affects the other.\nThere are subdistricts where it is not significant to tell the EHSA patterns, these regions are commonly located around neighbours that are all some variant of coldspot or hotspot, hence, their vaccination rates might be similar to that of its neighbours."
  }
]