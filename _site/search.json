[
  {
    "objectID": "exercises/icex10.html",
    "href": "exercises/icex10.html",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "",
    "text": "Pacman assists us by helping us load R packages that we require, sf, SpatialAcc, tidyverse, reshape2, ggstatplot and tmap.\n\npacman::p_load(tmap, SpatialAcc, sf, ggstatsplot, reshape2, tidyverse, fca)\n\n\n\n\nThe following datasets are used:\n\n\n\nDataset Name\nSource\n\n\n\n\nURA Master Plan 2014 Subzone Boundary\ndata.gov.sg\n\n\n250m Hexagon GIS Data\nProf Kam\n\n\nEldercare\nProf Kam\n\n\nOD Matrix\nProf Kam"
  },
  {
    "objectID": "exercises/icex10.html#importing-geospatial-data",
    "href": "exercises/icex10.html#importing-geospatial-data",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "2.1 Importing Geospatial Data",
    "text": "2.1 Importing Geospatial Data\nUsing the code chunks below with st_read(), we will import the three datasets we require for our analysis.\n\nmpsz <- st_read(dsn = \"In-Class_Ex10/data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nhexagons <- st_read(dsn = \"In-Class_Ex10/data/geospatial\", layer = \"hexagons\") \n\nReading layer `hexagons' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n\n\neldercare <- st_read(dsn = \"In-Class_Ex10/data/geospatial\", layer = \"ELDERCARE\") \n\nReading layer `ELDERCARE' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\In-Class_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "exercises/icex10.html#updating-crs-information",
    "href": "exercises/icex10.html#updating-crs-information",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "2.2 Updating CRS Information",
    "text": "2.2 Updating CRS Information\nNext, since the imported data is in EPSG:4326 (WGS84), we need to convert it from Geodetic Coordinate System to Projected Coordinate System in EPSG:3414 (SVY21). The code chunk below will do that:\n\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)\n\nNext, we will verify if the CRS has been updated successfully to SVY21.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nYes, the CRS has been updated successfully to SVY21."
  },
  {
    "objectID": "exercises/icex10.html#cleaning-and-verifying-crs-information",
    "href": "exercises/icex10.html#cleaning-and-verifying-crs-information",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "2.3 Cleaning and Verifying CRS Information",
    "text": "2.3 Cleaning and Verifying CRS Information\nAs there are many redundant fields in both the eldercare and hexagons dataset, we will reduce the amount of columns to those necessary for our analysis. Next, we will create two columns, capacity for eldercare and demand for hexagons with a constant value of 100 for exercise purposes.\nNote that we should use the exact capacity and demand values in real world scenarios.\n\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  mutate(capacity = 100)\n\n\nhexagons <- hexagons %>%\n  select(fid) %>%\n  mutate(demand = 100)"
  },
  {
    "objectID": "exercises/icex10.html#importing-distance-matrix",
    "href": "exercises/icex10.html#importing-distance-matrix",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "3.1 Importing Distance Matrix",
    "text": "3.1 Importing Distance Matrix\nNext, we will use read_csv() to import the distance matrix for our analysis. The imported object is a tibble dataframe called ODMatrix\n\nODMatrix <- read_csv(\"In-Class_Ex10/data/aspatial/OD_Matrix.csv\", skip = 0)\n\nRows: 375000 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (6): origin_id, destination_id, entry_cost, network_cost, exit_cost, tot...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "exercises/icex10.html#tidying-distance-matrix",
    "href": "exercises/icex10.html#tidying-distance-matrix",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "3.2 Tidying Distance Matrix",
    "text": "3.2 Tidying Distance Matrix\nBy selecting the necessary columns and pivot_wider(), we convert the data into an OD matrix where the destination_ids are the column fields and origin_ids are the row fields.\n\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  pivot_wider(names_from = destination_id, values_from = total_cost)%>%\n  select(c(-c('origin_id')))\n\nAs SVY21 is in metres, we will convert it to kilometres by dividing by 1000.\n\ndistmat_km <- as.matrix(distmat/1000)"
  },
  {
    "objectID": "exercises/icex10.html#computing-hansens-accessibility",
    "href": "exercises/icex10.html#computing-hansens-accessibility",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "4.1 Computing Hansen’s Accessibility",
    "text": "4.1 Computing Hansen’s Accessibility\n\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 2, \n                            family = \"Hansen\"))\n\nThe default field name is very long, let us rename it to accHansen.\n\ncolnames(acc_Hansen) <- \"accHansen\"\n\nNext, we will convert it into tibble format using the code below:\n\nacc_Hansen <- as_tibble(acc_Hansen)\n\nLastly, we use bind_cols() to joint the acc_Hansen tibble dataframe with the hexagons simple features dataframe below:\n\n\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)"
  },
  {
    "objectID": "exercises/icex10.html#visualising-hansens-accessibility",
    "href": "exercises/icex10.html#visualising-hansens-accessibility",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "4.2 Visualising Hansen’s Accessibility",
    "text": "4.2 Visualising Hansen’s Accessibility\n\n4.2.1 Extracting Map Extents\nFirstly, we will extract the map extents using the hexagons simple dataframe using st_bbox()\n\nmapex <- st_bbox(hexagons)\n\nUsing the code chunk below, we create a high quality cartographic map of accessibility to eldercare in Singapore.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "exercises/thex03.html",
    "href": "exercises/thex03.html",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "",
    "text": "<add context>\nbal bla we are lookign at 5 storey HDB bla bla\n\n\n\nABC\n\n\n\nIn this take-home exercise, you are tasked to predict HDB resale prices at the sub-market level (i.e. HDB 3-room, HDB 4-room and HDB 5-room) for the month of January and February 2023 in Singapore. The predictive models must be built by using by using conventional OLS method and GWR methods. You are also required to compare the performance of the conventional OLS method versus the geographical weighted methods."
  },
  {
    "objectID": "exercises/thex03.html#installing-and-loading-packages",
    "href": "exercises/thex03.html#installing-and-loading-packages",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "2.1 Installing and Loading Packages",
    "text": "2.1 Installing and Loading Packages\nNext, pacman assists us by helping us load R packages that we require, sf, tidyverse and funModeling.\n\npacman::p_load(readxl, sf, tidyverse, tmap, sfdep, gifski, httr, jsonlite, onemapsgapi, rvest)\n\nThe following packages assists us to accomplish the following:\n\nreadxl assists us in importing .xlsx aspatial data without having to convert to .csv\nsf helps to import, manage and process vector-based geospatial data in R\ntidyverse which includes readr to import delimited text file, tidyr for tidying data and dplyr for wrangling data\ntmap provides functions to allow us to plot high quality static or interactive maps using leaflet API\ngifski helps us to handle the GIF animation for tmap"
  },
  {
    "objectID": "exercises/thex03.html#section",
    "href": "exercises/thex03.html#section",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "2.2 ",
    "text": "2.2"
  },
  {
    "objectID": "exercises/thex03.html#data-acquisition",
    "href": "exercises/thex03.html#data-acquisition",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "2.3 Data Acquisition",
    "text": "2.3 Data Acquisition\nThe following datasets would be used to create the predictive models using conventional OLS and GWR methods for HDB Resale Prices.\n\n\n\nDataset Type\nDataset Name\nRemarks\nSource\n\n\n\n\nGeospatial\nURA Master Plan 2019 Subzone Boundary\nFor visualisation purposes and extract Central Area\nProf Kam\n\n\nAspatial\nHDB Resale Flat Prices\n\ndata.gov.sg\n\n\nAspatial\nHDB MUP/HIP Status\nManual Web Scraping\nhdb.gov.sg\n\n\nAspatial\nShopping Malls\nManual web scraping\nwikipedia.org : List of Shopping Malls in Singapore\n\n\nGeospatial\nChildcare\n\nonemap.sg Themes\n\n\nGeospatial\nKindergartens\n\nonemap.sg Themes\n\n\nGeospatial\nEldercare\n\nonemap.sg Themes\n\n\nGeospatial\nFoodcourt/Hawker\n\nonemap.sg Themes\n\n\nGeospatial\nSupermarket\n\nonemap.sg\n\n\nGeospatial\nCurrent and Future MRT/LRT Stations\nExcludes Cross Region Line Punggol Branch\ndata.gov.sg\n\n\n-\nFuture MRT Station (CRL Punggol Branch)\nManually merge into MRT/LRT Station Dataset\nwikipedia.org : Elias MRT Stn\nwikipedia.org : Riveria MRT Stn\n\n\nGeospatial\nMRT/LRT Railway Line\nFilter elevated sections of MRT line\ndata.gov.sg\n\n\nGeospatial\nBus Stops\n\ndatamall.lta.gov.sg\n\n\nGeospatial\nParks\nWe consider the rail corridor, nature reserves and parks as parks as they are for leisure purposes.\nAlso, we will prefer polygons of parks as we can calculate the actual proximity to the edges of the parks instead of to an arbitary point in the centre of the park.\ndata.gov.sg\n\n\nGeospatial\nPrimary Schools\nRequires special handling\nonemap.sg json\n\n\nAspatial\nCHAS Clinics\nExtracted using Excel from PDF\nchas.sg"
  },
  {
    "objectID": "exercises/thex03.html#data-fields",
    "href": "exercises/thex03.html#data-fields",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "2.4 Data Fields",
    "text": "2.4 Data Fields\nThe data fields we are looking to incorporate and work with in our predictive models includes:\n\nStructural FactorsLocational Factors\n\n\n\nArea of the unit\nFloor level\nRemaining lease\nAge of the unit\nMain Upgrading Program (MUP) completed\n\nExtracted MUP and Home Improvment Programme (HIP) data from HDB website\nFor HDB units that has received HIP, their home value may be affected positively than a similar aged flat that has not received it\n\nFlat Model (eg. DBSS/Standard/Premium)\n\nDesign Build Sell Scheme (DBSS) flats may call for a higher value than regular HDB flats as they are designed, build and sold by 3rd party developers although they are still HDB Flats. They are supposed to be better than premium flats\nPremium flats which come with pre-installed fittings and furnishings over standard apartments which comes with none\nReference: https://www.teoalida.com/singapore/hdbflattypes/\n\nFlat Multi-storey (Maisonette or Loft)\n\nSome homeowners may prefer multi-story HDBs over single-story ones\n\n\n\n\n\nProximity to CBD\nProximity to eldercare\nProximity to foodcourt/hawker centres\nProximity to MRT\nProximity to park\nProximity to good primary school\nProximity to shopping mall\nProximity to supermarket\nNumbers of kindergartens within 350m\nNumbers of childcare centres within 350m\nNumbers of bus stop within 350m\nNumbers of primary school within 1km\nProximity to Overhead MRT Line [noise concern]\n\nThe closer a HDB unit is to the MRT track, the home value might be affected due to noise concerns. We measure the proximity of HDB units using its euclidean distance to the closest part of the MRT track if it is less than 300metres away.\n\nProximity to Overhead LRT Line (similar to MRT line)\nNumber of Future MRT stops within 800m (10min walk)\n\nHere, I want to explore how the resale values of HDBs could be affected by future MRT stations that are announced but not yet built. Home owners may be enticed to buy houses near future MRT lines in hopes that the house values will increase and also due to increased connectivity\n\nNumber of LRT Stops within 350m\n\nThe metric is necessary as LRT serves as a feeder within the town and is typically used short-haul vs MRT which is between various towns. The 350m metric is derived from Bus Stops differentiates the weight between a LRT stop and MRT stop especially if the LRT stop is far away from the MRT stop in towns such as Sengkang, Punggol and Pasir Ris"
  },
  {
    "objectID": "exercises/thex03.html#importing-retrieving-obtaining-data",
    "href": "exercises/thex03.html#importing-retrieving-obtaining-data",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "3.1 Importing / Retrieving / Obtaining Data",
    "text": "3.1 Importing / Retrieving / Obtaining Data\n\n3.1.1 Retrieving Data from API Calls\nThere are some data that we need to retreive using API calls from onemap.sg. OneMap offers additional data from different government agencies through Themes. For R, the onemapsgapi package helps us with the API calls with onemap.sg servers to obtain the data we require.\nUsing onemapsgapi is pretty simple as shown below:\n\ntoken <- \"\" # enter authentication token obtained from onemap\nsearch_themes(token, \"<searchterm>\") %>% print(n=Inf)\ntibble <- get_theme(token, \"<queryname>\")\nsf <- st_as_sf(tibble, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n\nsearch_themes() - Search for various thematic layers provided by onemap (eg. Parks). A tibble dataframe will be provided with more details of the layer, such as the THEMENAME, QUERYNAME, ICON, CATEGORY and THEME_OWNER\nget_theme() - Using the desired theme’s QUERYNAME obtained from search_themes(), we can obtain the thematic data in a tibble dataframe. We will need to use st_as_sf to specify the Lat, Lng and crs to obtain it as a sf dataframe.\n\nListed below are a list of layers we need to obtain:\n\nChildcare\nKindergartens\nEldercare\nFoodcourt/Hawker Centres\n\nIn the code block below, we will assume to have used search_themes() to pick the specific themes we want, to load them. The justification will be listed below.\n\nObtain DataRDS Scripts (Save)\n\n\nChildcare\n\nchildcare_tibble <- get_theme(token, \"childcare\")\nchildcare_sf <- st_as_sf(childcare_tibble, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\nKindergartens\n\nkindergartens_tibble <- get_theme(token, \"kindergartens\")\nkindergartens_sf <- st_as_sf(kindergartens_tibble, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\nEldercare\n\neldercare_tibble <- get_theme(token, \"eldercare\")\neldercare_sf <- st_as_sf(eldercare_tibble, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\nFoodcourt/Hawker Centre\n\nhawker_tibble <- get_theme(token, \"hawkercentre_new\")\nhawker_sf <- st_as_sf(hawker_tibble, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n\n\n\nwrite_rds(childcare_sf, \"Take-Home_Ex03/rds/childcare_sf.rds\")\nwrite_rds(kindergartens_sf, \"Take-Home_Ex03/rds/kindergartens_sf.rds\")\nwrite_rds(eldercare_sf, \"Take-Home_Ex03/rds/eldercare_sf.rds\")\nwrite_rds(hawker_sf, \"Take-Home_Ex03/rds/hawker_sf.rds\")\n\n\n\n\n\n\n3.1.2 Obtaining Schools Data\nObtaining school data from OneMap is a bit tricky, it was not available through OneMap themes or a download link through the OneMap website. However, through clicking through the Query Schools function on the map using using ‘Inspect Element’, we could see that a GET request is called to obtain the map data as json (as seen in the screenshot below):\n\nBy opening the link, we could see that it is an undocumented public API that OneMap uses to retrieve map data regarding Primary Schools. The results are in json as shown below:\n\nThe data has been downloaded and will be processed into tibble format using json_lite fromJSON() which will import the JSON file and convert it into tibble dataframe.\n\nschools_tibble <- fromJSON(\"Take-Home_Ex03/geospatial/retrieveAllSchools.json\")[[\"SearchResults\"]]\nglimpse(schools_tibble)\n\nRows: 182\nColumns: 16\n$ PageCount       <chr> \"0\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ SCHOOLNAME      <chr> NA, \"ADMIRALTY PRIMARY SCHOOL\", \"AHMAD IBRAHIM PRIMARY…\n$ SCH_HSE_BLK_NUM <chr> NA, \"11\", \"10\", \"100\", \"2A\", \"31\", \"19\", \"20\", \"16\", \"…\n$ HSE_BLK_NUM     <chr> NA, \"11\", \"10\", \"100\", \"2A\", \"31\", \"19\", \"20\", \"16\", \"…\n$ SCH_POSTAL_CODE <chr> NA, \"738907\", \"768643\", \"579646\", \"159016\", \"544969\", …\n$ POSTAL_CODE     <chr> NA, \"738907\", \"768643\", \"579646\", \"159016\", \"544969\", …\n$ SCH_ROAD_NAME   <chr> NA, \"WOODLANDS CIRCLE\", \"YISHUN STREET 11\", \"BRIGHT HI…\n$ ROAD_NAME       <chr> NA, \"WOODLANDS CIRCLE\", \"YISHUN STREET 11\", \"BRIGHT HI…\n$ HYPERLINK       <chr> NA, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n$ MOREINFO        <chr> NA, \"https://www.moe.gov.sg/schoolfinder\", \"https://ww…\n$ SCH_Y_ADDR      <chr> NA, \"47189.878696414\", \"46161.200044157\", \"38079.99126…\n$ SCH_X_ADDR      <chr> NA, \"24322.522067992\", \"27932.207851114\", \"27956.93877…\n$ LATITUDE        <chr> NA, \"1.4430427398237\", \"1.4337399845972\", \"1.360656435…\n$ LONGITUDE       <chr> NA, \"103.80027282363\", \"103.83270940173\", \"103.8329316…\n$ GEOMETRY        <chr> NA, \"iwxG{ipxRXm@p@UsBcGsE|AdBdFFCNCNEPAPAN@P@RDPH@@\",…\n$ SCH_TEXT        <chr> NA, \"Admiralty Pri Sch\", \"Ahmad Ibrahim Pri Sch\", \"Ai …\n\n\nAs we can see the want to exclude the column PageCount and the first row as it is not relavant to our dataset. The code chunk below will perform the above for us:\n\nschools_tibble <- select(schools_tibble,-\"PageCount\")\nschools_tibble <- schools_tibble[-1,]\n\nNext, we will convert the tibble dataframe to sf dataframe. Since X and Y coordinates are provided for us (SVY21) in the columns SCH_Y_ADDR and SCH_X_ADDR, we will use them instead of the Lng and Lat as SVY21 (Projected Coordinate System) will allow us to perform our analysis directly.\n\nschools_sf_3414 <- st_as_sf(schools_tibble, coords=c(\"SCH_X_ADDR\", \"SCH_Y_ADDR\"), crs=3414)\n\nNow, we will save the data imported as RDS file format (R Data Serialisation).\n\nwrite_rds(schools_sf_3414, \"Take-Home_Ex03/rds/schools_sf_3414.rds\")\n\n\n\n3.1.3 Importing Geospatial Data\n\nDownloadedOther Data (RDS)\n\n\nMaster Plan Subzone 2019\n\nmpsz = st_read(dsn = \"Take-Home_Ex03/geospatial\", layer=\"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Take-Home_Ex03\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nCurrent and Future MRT/LRT Stations\n\ngeo_mrt_lrt_stn = st_read(dsn = \"Take-Home_Ex03/geospatial/master-plan-2019-rail-station-layer-kml.kml\")\n\nReading layer `G_MP19_RAIL_STN_PL' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Take-Home_Ex03\\geospatial\\master-plan-2019-rail-station-layer-kml.kml' \n  using driver `KML'\nSimple feature collection with 257 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6363 ymin: 1.251433 xmax: 104.0051 ymax: 1.449548\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nMRT/LRT Railway Line\n\ngeo_railway_line = st_read(dsn = \"Take-Home_Ex03/geospatial/rail-line.kml\")\n\nReading layer `G_MP19_RAIL_LINE_LI' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Take-Home_Ex03\\geospatial\\rail-line.kml' \n  using driver `KML'\nSimple feature collection with 1366 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6352 ymin: 1.251689 xmax: 104.0201 ymax: 1.45265\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nBus Stops\n\ngeo_bus_stop = st_read(dsn = \"Take-Home_Ex03/geospatial\", layer=\"BusStop\")\n\nReading layer `BusStop' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Take-Home_Ex03\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nParks\n\ngeo_parks = st_read(dsn = \"Take-Home_Ex03/geospatial/nparks-parks-and-nature-reserves-kml.kml\")\n\nReading layer `NParks_Parks' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Take-Home_Ex03\\geospatial\\nparks-parks-and-nature-reserves-kml.kml' \n  using driver `KML'\nSimple feature collection with 421 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XYZ\nBounding box:  xmin: 103.6925 ymin: 1.2115 xmax: 104.0544 ymax: 1.46419\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nSupermarket\n\ngeo_supermarkets = st_read(dsn = \"Take-Home_Ex03/geospatial\", layer=\"Supermarkets\")\n\nReading layer `Supermarkets' from data source \n  `C:\\renjie-teo\\IS415-GAA\\exercises\\Take-Home_Ex03\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 526 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4901.188 ymin: 25529.08 xmax: 46948.22 ymax: 49233.6\nProjected CRS: SVY21\n\n\n\n\n\ngeo_schools <- read_rds(\"Take-Home_Ex03/rds/schools_sf_3414.rds\")\ngeo_childcare <- read_rds(\"Take-Home_Ex03/rds/childcare_sf.rds\")\ngeo_eldercare <- read_rds(\"Take-Home_Ex03/rds/eldercare_sf.rds\")\ngeo_hawker <- read_rds(\"Take-Home_Ex03/rds/hawker_sf.rds\")\ngeo_kindergartens <- read_rds(\"Take-Home_Ex03/rds/kindergartens_sf.rds\")"
  },
  {
    "objectID": "exercises/thex03.html#transforming-coordinate-systems",
    "href": "exercises/thex03.html#transforming-coordinate-systems",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "3.2 Transforming Coordinate Systems",
    "text": "3.2 Transforming Coordinate Systems\nFor datasets in WGS84 Geodetic Coordinate System, we need to convert them to SVY21 Projected Coordinate System to perform our analysis. Inferring form the information above, we will use the code chunk below to confirm all of them.\n\nTransformCheck\n\n\nWe use st_zm() on the kml datasets to remove the Z dimensions which will cause issues with analysis later as XY and XYZ data do not work well with one another.\n\nmpsz <- st_transform(mpsz,3414)\ngeo_mrt_lrt_stn <- st_transform(st_zm(geo_mrt_lrt_stn),3414)\ngeo_railway_line <- st_transform(st_zm(geo_railway_line),3414)\ngeo_parks <- st_transform(st_zm(geo_parks),3414)\ngeo_supermarkets <- st_transform(geo_supermarkets,3414)\ngeo_childcare <- st_transform(geo_childcare,3414)\ngeo_eldercare <- st_transform(geo_eldercare,3414)\ngeo_hawker <- st_transform(geo_hawker,3414)\ngeo_kindergartens <- st_transform(geo_kindergartens,3414)\n\n\n\nBus Stop\n\nst_crs(geo_bus_stop)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nOh, the CRS was not set properly and reflected as EPSG:9001\n\ngeo_bus_stop <- st_set_crs(geo_bus_stop, 3414)\nst_crs(geo_bus_stop)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nDone!\nMaster Plan Subzone 2019\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nCurrent and Future MRT/LRT Stations\n\ngeo_mrt_lrt_stn\n\nSimple feature collection with 257 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 6071.311 ymin: 26002.6 xmax: 47112.64 ymax: 47909.19\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name\n1   kml_1\n2   kml_2\n3   kml_3\n4   kml_4\n5   kml_5\n6   kml_6\n7   kml_7\n8   kml_8\n9   kml_9\n10 kml_10\n                                                                                                                                                                                                                                                                                                                                                                                                                                   Description\n1        <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>LRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>PUNGGOL CENTRAL</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>5ED154CD47409638</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n2                <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>LRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>KANGKAR</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>B4ACD980B1469EC8</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n3               <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>UNDERGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>SENGKANG</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>632967D234F4FBC1</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n4          <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>LRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>PUNGGOL POINT</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>933DB538DAED1131</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n5               <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>LRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>TONGKANG</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>85E14C78B24F5DA1</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n6               <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>LRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>THANGGAM</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>37F224D49C361EFD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n7             <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>LRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>CORAL EDGE</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>A49DD0F3F8F5B582</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n8  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>UNDERGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>SERANGOON INTERCHANGE</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>10AD56727C54F2E3</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n9                <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>LRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>RENJONG</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>EA8A90EE63391CC1</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n10 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>UNDERGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>SERANGOON INTERCHANGE</td> </tr><tr bgcolor=\"\"> <th>INC_CRC</th> <td>E7D5531A772135B5</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>FMEL_UPD_D</th> <td>20191209180316</td> </tr></table></center>\n                         geometry\n1  MULTIPOLYGON (((35733.24 43...\n2  MULTIPOLYGON (((35663.22 40...\n3  MULTIPOLYGON (((34864.22 41...\n4  MULTIPOLYGON (((36122.13 44...\n5  MULTIPOLYGON (((33877.4 412...\n6  MULTIPOLYGON (((32716.21 42...\n7  MULTIPOLYGON (((36786.93 41...\n8  MULTIPOLYGON (((32441.88 36...\n9  MULTIPOLYGON (((34382.66 40...\n10 MULTIPOLYGON (((32244.31 36...\n\n\nMRT/LRT Railway Line\n\ngeo_railway_line\n\nSimple feature collection with 1366 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 5950.856 ymin: 26030.91 xmax: 48791.81 ymax: 48252.23\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name\n1   kml_1\n2   kml_2\n3   kml_3\n4   kml_4\n5   kml_5\n6   kml_6\n7   kml_7\n8   kml_8\n9   kml_9\n10 kml_10\n                                                                                                                                                                                                                                                                                                                                                          Description\n1  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>19247B0E0E15AF87</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n2  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>UNDERGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>66F16A9502E84AAB</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n3  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>UNDERGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>33321452CB2EF3CA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n4  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>4E3C7F23EFA39E37</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n5  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>F49903A9C3D88B3E</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n6  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>68F669414248D951</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n7  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>ABOVEGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>DCF940C0F51904A8</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n8  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>UNDERGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>F9EF3225D6023E91</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n9  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>UNDERGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>CFEF0AB02AC53C6F</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n10 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>GRND_LEVEL</th> <td>UNDERGROUND</td> </tr><tr bgcolor=\"\"> <th>RAIL_TYPE</th> <td>MRT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>636B424340907BC5</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191209172332</td> </tr></table></center>\n                         geometry\n1  MULTILINESTRING ((20846.61 ...\n2  MULTILINESTRING ((32943 373...\n3  MULTILINESTRING ((32810.33 ...\n4  MULTILINESTRING ((28086.31 ...\n5  MULTILINESTRING ((28080.58 ...\n6  MULTILINESTRING ((27410.68 ...\n7  MULTILINESTRING ((27414.85 ...\n8  MULTILINESTRING ((31030.73 ...\n9  MULTILINESTRING ((30543.79 ...\n10 MULTILINESTRING ((30410.42 ...\n\n\nParks\n\ngeo_parks\n\nSimple feature collection with 421 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 12328.7 ymin: 21587.04 xmax: 52607.43 ymax: 49528.21\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                    Name\n1         JANGGUS GARDEN\n2     JLN LIMAU MANIS PG\n3         GARDEN VIEW PG\n4       THOMSON GREEN PG\n5           JLN RIANG PG\n6   MEI HWAN CRESCENT PG\n7          FULTON AVE PG\n8      MIMOSA TERRACE PG\n9  JLN GENENG INTERIM PK\n10        LENTOR WALK PG\nescription\n1                <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>JANGGUS GARDEN</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>JANGGUS GARDEN</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NS524</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n2        <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>JLN LIMAU MANIS PG</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>JLN LIMAU MANIS PG</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>EC508</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n3                <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>GARDEN VIEW PG</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>GARDEN VIEW PG</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NA527</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n4            <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>THOMSON GREEN PG</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>THOMSON GREEN PG</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NA520</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n5                    <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>JLN RIANG PG</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>JLN RIANG PG</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NA528</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n6    <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>MEI HWAN CRESCENT PG</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>MEI HWAN CRESCENT PG</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NA529</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n7                  <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>FULTON AVE PG</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>FULTON AVE PG</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NA538</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n8          <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>MIMOSA TERRACE PG</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>MIMOSA TERRACE PG</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NP535</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n9  <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>JLN GENENG INTERIM PK</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>JLN GENENG INTERIM PK</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NP542</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n10               <html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"> <head> <META http-equiv=\"Content-Type\" content=\"text/html\"> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> </head> <body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\"> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\"> <tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\"> <td>LENTOR WALK PG</td> </tr> <tr> <td> <table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\"> <tr> <td>NAME</td> <td>LENTOR WALK PG</td> </tr> <tr bgcolor=\"#D4E4F3\"> <td>N_RESERVE</td> <td>0</td> </tr> <tr> <td>L_CODE</td> <td>NS507</td> </tr> </table> </td> </tr> </table> </body><script type=\"text/javascript\"> function changeImage(attElement, nameElement) { document.getElementById('imageAttachment').src = attElement; document.getElementById('imageName').innerHTML = nameElement;} </script></html>\n                         geometry\n1  MULTIPOLYGON (((28392.92 48...\n2  MULTIPOLYGON (((40884.8 340...\n3  MULTIPOLYGON (((31620.74 38...\n4  MULTIPOLYGON (((27933.92 40...\n5  MULTIPOLYGON (((31788.91 36...\n6  MULTIPOLYGON (((31158.85 37...\n7  MULTIPOLYGON (((28040.56 38...\n8  MULTIPOLYGON (((31060.33 40...\n9  MULTIPOLYGON (((33302.65 37...\n10 MULTIPOLYGON (((28561.53 41...\n\n\nSupermarkets\n\ngeo_supermarkets\n\nSimple feature collection with 526 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4901.188 ymin: 25529.08 xmax: 46948.22 ymax: 49233.6\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                                      LIC_NAME BLK_HOUSE             STR_NAME\n1  LI LI CHENG SUPERMARKET (PUNGGOL) PTE. LTD.      273C        PUNGGOL PLACE\n2              SHENG SIONG SUPERMARKET PTE LTD        11 UPPER BOON KENG ROAD\n3        COLD STORAGE SINGAPORE (1983) PTE LTD       683     HOUGANG AVENUE 8\n4        COLD STORAGE SINGAPORE (1983) PTE LTD       631 BEDOK RESERVOIR ROAD\n5                      YES SUPERMARKET PTE LTD      201B   TAMPINES STREET 21\n6                   SUZYAMEER FROZEN PTE. LTD.      201D   TAMPINES STREET 21\n7                            G8 MART PTE. LTD.       421 ANG MO KIO AVENUE 10\n8              SHENG SIONG SUPERMARKET PTE LTD       233  ANG MO KIO AVENUE 3\n9             PRIME SUPERMARKET (1996) PTE LTD       106     HOUGANG AVENUE 1\n10                                TAN KWEE ENG       327     YISHUN RING ROAD\n   UNIT_NO POSTCODE      LIC_NO          INC_CRC FMEL_UPD_D\n1      884   823273 NE12I65N000 3DE8AF6E76F9D3D4 2017-11-29\n2      901   380011  E73010V000 F361759A8261CD6E 2017-11-29\n3      903   530683 NE11909C000 1DC69902E02077CE 2017-11-29\n4      954   470631  S02210X000 4E2560154B58BA38 2017-11-29\n5     1091   522201  S02037J000 559A9A00D9FF8A55 2017-11-29\n6     1161   524201 NE08357A000 1D32060098628881 2017-11-29\n7     1161   560421 CE13401C000 E83AE5A9842F67BC 2017-11-29\n8     1168   560233 CE04334P000 08D1E417EB224327 2017-11-29\n9     1213   530106  S02059X000 3DA5C840D472C779 2017-11-29\n10    1320   760327  B02041C000 FBB8A845FD8ADDC4 2017-11-29\n                    geometry\n1  POINT (35561.22 42685.17)\n2  POINT (32184.01 32947.46)\n3  POINT (33903.48 39480.46)\n4  POINT (37083.82 35017.47)\n5   POINT (41320.3 37283.82)\n6  POINT (41384.47 37152.14)\n7  POINT (30186.63 38602.77)\n8  POINT (28380.83 38842.16)\n9  POINT (34383.76 37311.19)\n10 POINT (29010.23 45755.51)\n\n\nChildcare\n\ngeo_childcare\n\nSimple feature collection with 1925 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,925 × 6\n   NAME                DESCR…¹ ADDRE…² ADDRE…³ ICON_…⁴            geometry\n * <chr>               <chr>   <chr>   <chr>   <chr>           <POINT [m]>\n 1 APOLLO INTERNATION… Child … 467903  44, LI… onemap… (40985.94 33848.38)\n 2 APPLE TREE PLAYHOU… Child … 768019  1, NOR… onemap… (28308.65 45530.47)\n 3 Appleland Montesso… Child … 650165  165, B… onemap… (17828.84 36607.36)\n 4 APPLELAND PLAYHOUSE Child … 103104  104C, … onemap… (25579.73 29221.89)\n 5 APRICOT ACADEMY (L… Child … 449290  5000G,… onemap… (38981.02 32483.41)\n 6 Arise Preschool     Child … 589240  2B Hin… onemap…    (21588.47 36307)\n 7 Artemis Preskool @… Child … 521866  866A T… onemap…  (39239.78 37501.4)\n 8 Artemis Preskool @… Child … 341115  115A, … onemap… (32389.52 35403.72)\n 9 ARTS JUNIOR MONTES… Child … 159640  11, CH… onemap… (25554.36 30090.82)\n10 Arts Kidz Pre-Scho… Child … 88702   10 Rae… onemap…    (28004.17 28442)\n# … with 1,915 more rows, and abbreviated variable names ¹​DESCRIPTION,\n#   ²​ADDRESSPOSTALCODE, ³​ADDRESSSTREETNAME, ⁴​ICON_NAME\n\n\nEldercare\n\ngeo_eldercare\n\nSimple feature collection with 133 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 133 × 5\n   NAME                        ADDRE…¹ ADDRE…² ICON_…³            geometry\n * <chr>                       <chr>   <chr>   <chr>           <POINT [m]>\n 1 Yuhua Senior Activity Cent… 601318  318A J… onemap… (16614.08 36639.12)\n 2 THK SAC @ Kaki Bukit        462509  Blk 50… onemap… (38803.81 35098.77)\n 3 THK SAC @ Boon Lay          640190  Blk 19… onemap… (14481.92 36357.61)\n 4 PEACE-Connect Senior Activ… 190005  5 Beac… onemap… (31505.35 31853.52)\n 5 THK SAC @ Beo Crescent      160044  Blk 44… onemap… (27218.35 30135.49)\n 6 Silver ACE @ Bukit Merah    160117  Blk 11… onemap… (27278.94 29350.17)\n 7 Lions Befrienders Senior A… 523499  499C T… onemap… (41665.14 37956.92)\n 8 Care Corner Senior Activit… 731569  569A C… onemap… (23147.94 45761.17)\n 9 Fei Yue Senior Activity Ce… 651210  210A B… onemap… (18820.58 36396.32)\n10 COMNET Senior Activity Cen… 540182  Blk 18… onemap…  (36446.37 41376.9)\n# … with 123 more rows, and abbreviated variable names ¹​ADDRESSPOSTALCODE,\n#   ²​ADDRESSSTREETNAME, ³​ICON_NAME\n\n\nHawker\n\ngeo_hawker\n\nSimple feature collection with 125 features and 28 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 12874.19 ymin: 28355.97 xmax: 45241.4 ymax: 47872.53\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 125 × 29\n   NAME  DESCR…¹ ADDRE…² ADDRE…³ ADDRE…⁴ PHOTO…⁵ LANDX…⁶ LANDY…⁷ CLEAN…⁸ LATIT…⁹\n * <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 Camb… HUP Re… 41A     211041  Cambri… http:/… 29881.… 33159.8 21/10/… 1.3162…\n 2 Chan… HUP St… 2&3     500002  Changi… http:/… 45241.4 41231.… 11/10/… 1.3897…\n 3 Chom… HUP St… 20      557269  Kensin… http:/… 31696.… 38475   16/12/… 1.3642…\n 4 Ci Y… New Ce… 51      538776  Hougan… http:/… 33526.… 39713.… 2/12/2… 1.3749…\n 5 Circ… HUP St… 79/79A  370079  Circui… http:/… 33756.… 34297.… TBC     1.3266…\n 6 Circ… HUP Re… 80      370080  Circui… http:/… 33988.5 34452.… 7/10/2… 1.3279…\n 7 Circ… HUP St… 89      370089  Circui… http:/… 33801.… 33965.… 23/12/… 1.3236…\n 8 Clem… HUP St… 353     120353  Clemen… http:/… 21046.… 32961.… 19/11/… 1.3143…\n 9 Clem… HUP St… 448     120448  Clemen… http:/… 20342.… 32839.… 5/12/2… 1.3133…\n10 Clem… HUP St… 726     120726  Clemen… http:/… 20314.9 31791.… 19/11/… 1.3039…\n# … with 115 more rows, 19 more variables: EST_ORIGINAL_COMPLETION_DATE <chr>,\n#   STATUS <chr>, CLEANINGSTARTDATE <chr>, NO_OF_FOOD_STALLS <chr>,\n#   REGION <chr>, LONGITUDE <chr>, NO_OF_MARKET_STALLS <chr>,\n#   ADDRESSTYPE <chr>, RNR_STATUS <chr>, HUP_COMPLETION_DATE <chr>,\n#   DESCRIPTION_MYENV <chr>, ADDRESS_MYENV <chr>, ICON_NAME <chr>,\n#   APPROXIMATE_GFA <chr>, INFO_ON_CO_LOCATORS <chr>,\n#   ADDRESSBUILDINGNAME <chr>, AWARDED_DATE <chr>, IMPLEMENTATION_DATE <chr>, …\n\n\nKindergartens\n\ngeo_kindergartens\n\nSimple feature collection with 448 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11909.7 ymin: 25596.33 xmax: 43395.47 ymax: 48562.06\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 448 × 6\n   NAME                DESCR…¹ ADDRE…² ADDRE…³ ICON_…⁴            geometry\n * <chr>               <chr>   <chr>   <chr>   <chr>           <POINT [m]>\n 1 PCF Sparkletots Pr… Kinder… 560435  435 An… school… (30325.45 38859.25)\n 2 PCF Sparkletots Pr… Kinder… 560533  533 An… school… (30190.51 39574.18)\n 3 PCF Sparkletots Pr… Kinder… 560556  556 An… school…  (30705.05 39337.9)\n 4 PCF Sparkletots Pr… Kinder… 760107  107 Yi… school… (27354.73 45992.92)\n 5 PCF Sparkletots Pr… Kinder… 760122  122 Yi… school… (27755.87 46300.26)\n 6 PCF Sparkletots Pr… Kinder… 680010  10 Tec… school… (19307.62 40271.08)\n 7 PCF Sparkletots Pr… Kinder… 120330  330 Cl… school… (20706.39 32892.83)\n 8 PCF Sparkletots Pr… Kinder… 470616  616 Be… school…  (37089.3 34892.34)\n 9 PCF Sparkletots Pr… Kinder… 460126  126 Be… school… (39752.13 34487.87)\n10 PCF Sparkletots Pr… Kinder… 791416  416A F… school… (33190.98 41392.37)\n# … with 438 more rows, and abbreviated variable names ¹​DESCRIPTION,\n#   ²​ADDRESSPOSTALCODE, ³​ADDRESSSTREETNAME, ⁴​ICON_NAME\n\n\n\n\n\nGreat! Now everything is in SVY21 Projected Coordinate System."
  },
  {
    "objectID": "exercises/thex03.html#transform-datasets",
    "href": "exercises/thex03.html#transform-datasets",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "3.3 Transform Datasets",
    "text": "3.3 Transform Datasets\n\n3.3.1 Fixing Master Plan Subzone Boundary Geometries\nAs we recall for exercises in class, there are issues with invalid geometries in the dataset.\n\nlength(which(st_is_valid(mpsz) == FALSE))\n\n[1] 6\n\n\nHere, we will fix it by using st_make_valid()\n\nmpsz <- st_make_valid(mpsz)\nlength(which(st_is_valid(mpsz) == FALSE))\n\n[1] 0\n\n\nGreat, its fixed!\n\n\n3.3.2 Fixing KML Data\nWhen we look at the MRT/LRT Station and Railway Line stations, we find that the labels are KML_1, KML_2, etc which are not useful for our analysis.\n\nglimpse(geo_mrt_lrt_stn)\n\nRows: 257\nColumns: 3\n$ Name        <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description <chr> \"<center><table><tr><th colspan='2' align='center'><em>Att…\n$ geometry    <MULTIPOLYGON [m]> MULTIPOLYGON (((35733.24 43..., MULTIPOLYGON …\n\n\n\nglimpse(geo_railway_line)\n\nRows: 1,366\nColumns: 3\n$ Name        <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description <chr> \"<center><table><tr><th colspan='2' align='center'><em>Att…\n$ geometry    <MULTILINESTRING [m]> MULTILINESTRING ((20846.61 ..., MULTILINES…\n\n\nHere, we can see that many of the attributes are nested in a HTML format under the description column, We will now fix the KML imported data for MRT/LRT Station and Railway Line datasets so we can access the attributes to filter it effectively for our further analysis. The code referenced is from StackOverflow:\n\nattributes <- lapply(X = 1:nrow(geo_mrt_lrt_stn), \n                     FUN = function(x) {\n\n                       geo_mrt_lrt_stn %>% \n                         slice(x) %>%\n                         pull(Description) %>%\n                         read_html() %>%\n                         html_node(\"table\") %>%\n                         html_table(header = TRUE, trim = TRUE, dec = \".\", fill = TRUE) %>%\n                         as_tibble(.name_repair = ~ make.names(c(\"Attribute\", \"Value\"))) %>% \n                         pivot_wider(names_from = Attribute, values_from = Value)\n\n                     })\ngeo_mrt_lrt_stn <- \n  geo_mrt_lrt_stn %>%\n  bind_cols(bind_rows(attributes)) %>%\n  select(-Description)\n\nglimpse(geo_mrt_lrt_stn)\n\nRows: 257\nColumns: 7\n$ Name       <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml_…\n$ GRND_LEVEL <chr> \"ABOVEGROUND\", \"ABOVEGROUND\", \"UNDERGROUND\", \"ABOVEGROUND\",…\n$ RAIL_TYPE  <chr> \"LRT\", \"LRT\", \"MRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"MRT\", \"LR…\n$ NAME       <chr> \"PUNGGOL CENTRAL\", \"KANGKAR\", \"SENGKANG\", \"PUNGGOL POINT\", …\n$ INC_CRC    <chr> \"5ED154CD47409638\", \"B4ACD980B1469EC8\", \"632967D234F4FBC1\",…\n$ FMEL_UPD_D <chr> \"20191209180316\", \"20191209180316\", \"20191209180316\", \"2019…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((35733.24 43..., MULTIPOLYGON (…\n\n\n\nattributes <- lapply(X = 1:nrow(geo_railway_line), \n                     FUN = function(x) {\n\n                       geo_railway_line %>% \n                         slice(x) %>%\n                         pull(Description) %>%\n                         read_html() %>%\n                         html_node(\"table\") %>%\n                         html_table(header = TRUE, trim = TRUE, dec = \".\", fill = TRUE) %>%\n                         as_tibble(.name_repair = ~ make.names(c(\"Attribute\", \"Value\"))) %>% \n                         pivot_wider(names_from = Attribute, values_from = Value)\n\n                     })\ngeo_railway_line <- \n  geo_railway_line %>%\n  bind_cols(bind_rows(attributes)) %>%\n  select(-Description)\n\nglimpse(geo_railway_line)\n\nRows: 1,366\nColumns: 6\n$ Name       <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml_…\n$ GRND_LEVEL <chr> \"ABOVEGROUND\", \"UNDERGROUND\", \"UNDERGROUND\", \"ABOVEGROUND\",…\n$ RAIL_TYPE  <chr> \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MR…\n$ INC_CRC    <chr> \"19247B0E0E15AF87\", \"66F16A9502E84AAB\", \"33321452CB2EF3CA\",…\n$ FMEL_UPD_D <chr> \"20191209172332\", \"20191209172332\", \"20191209172332\", \"2019…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((20846.61 ..., MULTILINEST…\n\n\nGreat now we have extracted the attributes into its own columns where we can use it for further analysis.\n\n\n3.3.3 Transforming and Modifying MRT/LRT Station Data\nLet us view geo_mrt_lrt_stn data on a map and the table and fix any NA values we might find:\n\nMapGlimpseChecking and fixing NA Values\n\n\n\ntmap_mode(\"plot\") +\n  tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\", alpha = 0.1, border.alpha = 0.1) +\n  tm_shape(geo_mrt_lrt_stn) +\n  tm_fill(\"RAIL_TYPE\", palette =c(\"red\", \"blue\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n          title= 'MRT/LRT Stations in Singapore', \n          title.position = c('right', 'top'))\n\n\n\n\n\n\n\nglimpse(geo_mrt_lrt_stn)\n\nRows: 257\nColumns: 7\n$ Name       <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml_…\n$ GRND_LEVEL <chr> \"ABOVEGROUND\", \"ABOVEGROUND\", \"UNDERGROUND\", \"ABOVEGROUND\",…\n$ RAIL_TYPE  <chr> \"LRT\", \"LRT\", \"MRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"MRT\", \"LR…\n$ NAME       <chr> \"PUNGGOL CENTRAL\", \"KANGKAR\", \"SENGKANG\", \"PUNGGOL POINT\", …\n$ INC_CRC    <chr> \"5ED154CD47409638\", \"B4ACD980B1469EC8\", \"632967D234F4FBC1\",…\n$ FMEL_UPD_D <chr> \"20191209180316\", \"20191209180316\", \"20191209180316\", \"2019…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((35733.24 43..., MULTIPOLYGON (…\n\n\n\n\nFilter and view data\n\ngeo_stn_na <- filter(geo_mrt_lrt_stn,NAME == \"\")\ngeo_stn_na\n\nSimple feature collection with 9 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 26284.4 ymin: 26002.6 xmax: 31443.34 ymax: 32930.38\nProjected CRS: SVY21 / Singapore TM\n     Name  GRND_LEVEL RAIL_TYPE NAME          INC_CRC     FMEL_UPD_D\n1  kml_74 ABOVEGROUND       LRT      6E7738D952D979E6 20191209180316\n2  kml_75 ABOVEGROUND       LRT      063BB9671365F6AE 20191209180316\n3  kml_77 UNDERGROUND       MRT      77802D2E751C9B73 20191209180316\n4  kml_80 UNDERGROUND       MRT      A090AC90C1A289F3 20191209180316\n5  kml_92 UNDERGROUND       MRT      16771CD5289886F0 20191209180316\n6  kml_97 UNDERGROUND       MRT      D49FFB88DCDF2480 20191209180316\n7 kml_107 ABOVEGROUND       LRT      1AC0878EDEF194AC 20191209180316\n8 kml_150 UNDERGROUND       MRT      629E735F6C7BBF76 20191209180316\n9 kml_203 UNDERGROUND       MRT      F129512398A35F02 20191209180316\n                        geometry\n1 MULTIPOLYGON (((26459.27 26...\n2 MULTIPOLYGON (((26284.4 260...\n3 MULTIPOLYGON (((30163.74 29...\n4 MULTIPOLYGON (((29285.32 29...\n5 MULTIPOLYGON (((28521.81 32...\n6 MULTIPOLYGON (((29188.18 29...\n7 MULTIPOLYGON (((26636.92 26...\n8 MULTIPOLYGON (((31385.21 28...\n9 MULTIPOLYGON (((26920.72 31...\n\n\nView on a map\n\ntmap_mode(\"view\") +\n  tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\", alpha = 0.1, border.alpha = 0.1) +\n  tm_shape(geo_stn_na) +\n  tm_fill(\"Name\", palette =c(\"red\", \"blue\"), popup.vars=c(\"NAME\" = \"NAME\"))\n\n\n\n\n\n\nFrom the map and data above, we can see 9 stations has its names missing as shown below:\n\n\n\nName (KML Name)\nNAME (Station Name)\n\n\n\n\nkml_74\nImbiah (Sentosa Express)\n\n\nkml_75\nBeach (Sentosa Express)\n\n\nkml_77\nDowntown (DTL)\n\n\nkml_80\nChinatown (DTL)\n\n\nkml_92\nNewton (DTL)\n\n\nkml_97\nMaxwell (TEL)\n\n\nkml_107\nWaterfront (Sentosa Express)\n\n\nkml_150\nMarina East (TEL)\n\n\nkml_203\nOrchard Boulevard (TEL)\n\n\n\nWe don’t want the Sentosa Express data as it serves more for leisure purpose. We will drop it from the dataframe later.\nFixing Data\n\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_74\", \"NAME\"] <- \"IMBIAH\"\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_75\", \"NAME\"] <- \"BEACH\"\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_77\", \"NAME\"] <- \"DOWNTOWN\"\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_80\", \"NAME\"] <- \"CHINATOWN\"\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_92\", \"NAME\"] <- \"NEWTON\"\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_97\", \"NAME\"] <- \"MAXWELL\"\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_107\", \"NAME\"] <- \"WATERFRONT\"\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_150\", \"NAME\"] <- \"MARINA SOUTH\"\ngeo_mrt_lrt_stn[geo_mrt_lrt_stn$Name == \"kml_203\", \"NAME\"] <- \"ORCHARD BOULEVARD\"\n\n\n\n\nThere are a few steps to obtaining the data in the format we want.\nWe want the data in three dataframes:\n\nExisting MRT stations - North South Line, East West Line, Changi Airport Line, North East Line, Circle Line, Downtown Line, Thomson East Coast Line 1, 2 and 3\nExisting LRT stations - Bukit Panjang LRT, Sengkang LRT, Punggol LRT\nFuture MRT stations - Thomson East Coast Line 4, 5, Jurong Region Line, Cross Island Line 1, Punggol Extension (we need to manually insert the stations)\n\nThe reason why Cross Island Line 2 was not included is that it is only announced on 20 Sep 2022 which is outside of our model data range. Hence, those stations would not have affected the housing prices in any way. We also want to exclude stations that do not have a definite opening date (Bukit Brown, Marina South and Mount Pleasant).\nThere are also a few other hurdles we need to go through:\n\nInterchange MRT stations have multiple polygons and records, we need to merge them\nFor our analysis, we want to convert the polygons to points to be able to perform our analysis.\n\n\n\n3.3.4 Extraction of Data into Different DataFrames\n\nFuture MRTExisting LRTExisting MRT\n\n\n\nFUTURE_MRT = c(\"CHOA CHU KANG WEST\", \"TENGAH\", \"TENGAH PLANTATION\", \"TENGAH PARK\", \"BUKIT BATOK WEST\", \"TOH GUAN\", \"JURONG TOWN HALL\", \"PANDAN RESERVOIR\", \"HONG KAH\", \"CORPORATION\", \"JURONG WEST\", \"BAHAR JUNCTION\", \"GEK POH\", \"TAWAS\", \"NANYANG GATEWAY\", \"NANYANG CRESCENT\", \"PENG KANG HILL\", \"ENTERPRISE\", \"TUKANG\", \"JURONG HILL\", \"JURONG PIER\", \"FOUNDERS' MEMORIAL\", \"TANJONG RHU\", \"KATONG PARK\", \"TANJONG KATONG\", \"MARINE PARADE\", \"MARINE TERRACE\", \"SIGLAP\", \"BAYSHORE\", \"BEDOK SOUTH\", \"SUNGEI BEDOK\", \"XILIN\", \"AVIATION PARK\", \"LOYANG\", \"PASIR RIS EAST\", \"TAMPINES NORTH\", \"DEFU\", \"SERANGOON NORTH\", \"TAVISTOCK\", \"TECK GHEE\", \"HUME\", \"KEPPEL\", \"CANTONMENT\", \"PRINCE EDWARD ROAD\", \"PUNGGOL COAST\")\n\nEXCLUDE = c(\"MARINA SOUTH\", \"BUKIT BROWN\", \"MOUNT PLEASANT\", \"WATERFRONT\", \"BEACH\", \"IMBIAH\")\n\ngeo_mrt_future <- geo_mrt_lrt_stn %>%\n  filter(NAME %in%  FUTURE_MRT)\n\nglimpse(geo_mrt_future)\n\nRows: 45\nColumns: 7\n$ Name       <chr> \"kml_112\", \"kml_113\", \"kml_114\", \"kml_115\", \"kml_117\", \"kml…\n$ GRND_LEVEL <chr> \"UNDERGROUND\", \"UNDERGROUND\", \"UNDERGROUND\", \"UNDERGROUND\",…\n$ RAIL_TYPE  <chr> \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MR…\n$ NAME       <chr> \"KEPPEL\", \"PRINCE EDWARD ROAD\", \"MARINE TERRACE\", \"TANJONG …\n$ INC_CRC    <chr> \"EB7F6899585EF37F\", \"39C6C15CF1F42E35\", \"82E332FCCD9A7844\",…\n$ FMEL_UPD_D <chr> \"20191209180316\", \"20191209180316\", \"20191209180316\", \"2019…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((27779.18 28..., MULTIPOLYGON (…\n\n\nLooks correct! We have 44 unique future MRT stations that are new (excludes new interchanges with existing lines), 1 unique station is Sungei Bedok which is an interchange on TEL and DTL, hence, 44 records.\n\n\n\ngeo_lrt <- geo_mrt_lrt_stn %>%\n  filter(RAIL_TYPE == \"LRT\") %>% filter(!NAME %in% EXCLUDE)\n\nglimpse(geo_lrt)\n\nRows: 42\nColumns: 7\n$ Name       <chr> \"kml_1\", \"kml_2\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml_7\", \"kml_…\n$ GRND_LEVEL <chr> \"ABOVEGROUND\", \"ABOVEGROUND\", \"ABOVEGROUND\", \"ABOVEGROUND\",…\n$ RAIL_TYPE  <chr> \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LR…\n$ NAME       <chr> \"PUNGGOL CENTRAL\", \"KANGKAR\", \"PUNGGOL POINT\", \"TONGKANG\", …\n$ INC_CRC    <chr> \"5ED154CD47409638\", \"B4ACD980B1469EC8\", \"933DB538DAED1131\",…\n$ FMEL_UPD_D <chr> \"20191209180316\", \"20191209180316\", \"20191209180316\", \"2019…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((35733.24 43..., MULTIPOLYGON (…\n\n\nLooks correct! We have 42 LRT stations in Singapore.\n\n\n\ngeo_mrt_existing <- geo_mrt_lrt_stn %>%\n  filter(RAIL_TYPE == \"MRT\") %>% filter(!NAME %in% EXCLUDE) %>% filter(!NAME %in% FUTURE_MRT)\ngeo_mrt_existing\n\nSimple feature collection with 164 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 6071.311 ymin: 27478.44 xmax: 45377.5 ymax: 47909.19\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name  GRND_LEVEL RAIL_TYPE                   NAME          INC_CRC\n1   kml_3 UNDERGROUND       MRT               SENGKANG 632967D234F4FBC1\n2   kml_8 UNDERGROUND       MRT  SERANGOON INTERCHANGE 10AD56727C54F2E3\n3  kml_10 UNDERGROUND       MRT  SERANGOON INTERCHANGE E7D5531A772135B5\n4  kml_11 UNDERGROUND       MRT    HOUGANG INTERCHANGE 032485860BA27411\n5  kml_20 ABOVEGROUND       MRT ANG MO KIO INTERCHANGE D64E567C239205F5\n6  kml_21 UNDERGROUND       MRT               BUANGKOK FD00A32769DEBB52\n7  kml_25 UNDERGROUND       MRT                PUNGGOL 95F1A1BF2CBD6BAB\n8  kml_32 UNDERGROUND       MRT           LORONG CHUAN 5FCC9E048B7E6A46\n9  kml_33 UNDERGROUND       MRT                  KOVAN 775AEAABC9BE428A\n10 kml_34 UNDERGROUND       MRT               TAI SENG 0D7A0B79F3C6ED17\n       FMEL_UPD_D                       geometry\n1  20191209180316 MULTIPOLYGON (((34864.22 41...\n2  20191209180316 MULTIPOLYGON (((32441.88 36...\n3  20191209180316 MULTIPOLYGON (((32244.31 36...\n4  20191209180316 MULTIPOLYGON (((34598.99 39...\n5  20191209180316 MULTIPOLYGON (((29843.49 39...\n6  20191209180316 MULTIPOLYGON (((34646.22 40...\n7  20191209180316 MULTIPOLYGON (((35594.52 42...\n8  20191209180316 MULTIPOLYGON (((31301.07 37...\n9  20191209180316 MULTIPOLYGON (((33691.69 37...\n10 20191209180316 MULTIPOLYGON (((34040.35 35...\n\n\nBy looking through the dataframe, the data looks correct!\n\n\n\n\n3.3.4.1 Merging Polygons for Data Frame\nFor geo_mrt which contains data of existing MRT stations, there are interchange stations which has seperate polygons. For example, Dhoby Ghaut MRT station is an interchange between 3 lines and hence has 3 polygons and records as seen below:\n\nfilter(geo_mrt_existing, NAME == \"DHOBY GHAUT INTERCHANGE\")\n\nSimple feature collection with 3 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 29264.89 ymin: 31193.36 xmax: 29514.18 ymax: 31463.67\nProjected CRS: SVY21 / Singapore TM\n     Name  GRND_LEVEL RAIL_TYPE                    NAME          INC_CRC\n1 kml_156 UNDERGROUND       MRT DHOBY GHAUT INTERCHANGE A6CB94C5971F5F03\n2 kml_157 UNDERGROUND       MRT DHOBY GHAUT INTERCHANGE 17D85BD34169ABF7\n3 kml_158 UNDERGROUND       MRT DHOBY GHAUT INTERCHANGE 72739458BF8AB3E7\n      FMEL_UPD_D                       geometry\n1 20191209180316 MULTIPOLYGON (((29385.16 31...\n2 20191209180316 MULTIPOLYGON (((29293.51 31...\n3 20191209180316 MULTIPOLYGON (((29385.16 31...\n\n\nWe want to merge the records to obtain a single spatial point for each MRT station. Below, we will identify the interchange stations and merge their records and polgons manually.\n\nMerge FunctionsMerging Polygons\n\n\nFunction to merge 2 and 3 rows respectively\n\nmerge_2 <- function(df, kml_1, kml_2){\n  operation <- st_union(filter(df,  Name == kml_1), filter(df,  Name == kml_2))\n  operation <- select(operation, \"geometry\")\n  df[df$Name == kml_1, \"geometry\"] <- operation\n  df <- subset(df, Name != kml_2)\n  \n  return(df)\n}\n\nmerge_3 <- function(df, kml_1, kml_2, kml_3){\n  operation <- st_union(filter(df,  Name == kml_1), filter(df,  Name == kml_2))\n  operation <- select(operation, c(0:6, \"geometry\"))\n  operation <- st_union(operation, filter(df,  Name == kml_3))\n  operation <- select(operation, \"geometry\")\n  df[df$Name == kml_1, \"geometry\"] <- operation\n  df <- subset(df, Name != kml_2)\n  df <- subset(df, Name != kml_3)\n  \n  return(df)\n}\n\n\n\nThe polygons are merged for the stations as indicated in the code block\n\n# ANG MO KIO\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_20\", \"kml_236\")\n# BISHAN\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_43\", \"kml_247\")\n# BOON LAY\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_180\", \"kml_205\")\n# BOTANIC GARDENS\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_210\", \"kml_211\")\n# BONUA VISTA\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_227\", \"kml_228\")\n# CALDECOTT\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_231\", \"kml_232\")\n# CHINATOWN\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_80\", \"kml_165\")\n# CHOA CHU KANG\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_118\", \"kml_187\")\n# DHOBY GHAUT\ngeo_mrt_existing <- merge_3(geo_mrt_existing, \"kml_156\", \"kml_157\", \"kml_158\")\n# EXPO\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_108\", \"kml_174\")\n# HARBOURFRONT\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_58\", \"kml_59\")\n# HOUGANG\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_11\", \"kml_245\")\n# JURONG EAST\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_135\", \"kml_136\")\n# LITTLE INDIA\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_160\", \"kml_161\")\n# MACPHERSON\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_222\", \"kml_223\")\n# MARINA BAY\ngeo_mrt_existing <- merge_3(geo_mrt_existing, \"kml_68\", \"kml_78\", \"kml_147\")\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_68\", \"kml_148\")\n# NEWTON\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_72\", \"kml_92\")\n# ORCHARD\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_98\", \"kml_154\")\n# OUTRAM PARK\ngeo_mrt_existing <- merge_3(geo_mrt_existing, \"kml_100\", \"kml_151\", \"kml_251\")\n# PASIR RIS\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_239\", \"kml_243\")\n# PAYA LEBAR\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_153\", \"kml_212\")\n# SERANGOON\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_8\", \"kml_10\")\n# STEVENS\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_105\", \"kml_209\")\n# TAMPINES\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_35\", \"kml_166\")\n# WOODLANDS\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_64\", \"kml_169\")\n# BUGIS\ngeo_mrt_existing <- merge_2(geo_mrt_existing, \"kml_81\", \"kml_70\")\n\nThat’s right, we have 134 unique existing MRT stations\n\n\n\n\n\n3.3.4.2 Converting Spatial Polygons to Spatial Points\n\ngeo_mrt_existing <- st_centroid(geo_mrt_existing)\ngeo_lrt <- st_centroid(geo_lrt)\ngeo_mrt_future <- st_centroid(geo_mrt_future)\n\n\n\n3.3.4.3 Insert Cross Island Line Punggol Future Stations\nThe Master Plan 2019 MRT/LRT Station data excludes the Cross Island Line Punggol Stations, so we have to add them. 2 New MRT stations (that are not an existing interchange station with existing lines needs to be added). These are: Riveriaand Elias\n\nnew_df <- data.frame(Name = \"kml_998\", GRND_LEVEL = \"UNDERGROUND\", RAIL_TYPE = \"MRT\", NAME = \"ELIAS\", INC_CRC = \"\", FMEL_UPD_D = \"\", lng = \"103.984\", lat = \"1.384\")\nnew_df_coords <- st_as_sf(new_df, coords = c(\"lng\", \"lat\"), crs=4326) \nnew_df_coords <- new_df_coords %>% st_transform(3414)\ngeo_mrt_future <- rbind(new_df_coords, geo_mrt_future)\n\nnew_df <- data.frame(Name = \"kml_999\", GRND_LEVEL = \"UNDERGROUND\", RAIL_TYPE = \"MRT\", NAME = \"RIVERIA\", INC_CRC = \"\", FMEL_UPD_D = \"\", lng = \"103.916772\", lat = \"1.394439\")\nnew_df_coords <- st_as_sf(new_df, coords = c(\"lng\", \"lat\"), crs=4326) \nnew_df_coords <- new_df_coords %>% st_transform(3414)\ngeo_mrt_future <- rbind(new_df_coords, geo_mrt_future)\n\n\n\n\n3.3.5 Verifying MRT/LRT Data\n\ntmap_mode(\"plot\") +\n  tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\", alpha = 0.05, border.alpha = 0.05) +\n  tm_shape(geo_mrt_existing) +\n  tm_dots(\"RAIL_TYPE\", palette = \"darkgreen\", title = \"Existing MRT\", size = 0.02) +\n  tm_shape(geo_lrt) +\n  tm_dots(\"RAIL_TYPE\", palette = \"blue\", title = \"Existing LRT\", size = 0.02) +\n  tm_shape(geo_mrt_future) +\n  tm_dots(\"RAIL_TYPE\", palette = \"red\", title = \"Future MRT\", size = 0.02) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            title= 'MRT/LRT Stations in Singapore', \n            title.position = c('right', 'top'))\n\n\n\n\nEverything looks to be plotted correctly.\n\n\n3.3.6 Transforming Railway Line\n\ntmap_mode(\"plot\") +\n  tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\", alpha = 0.05, border.alpha = 0.05) +\n  tm_shape(geo_railway_line) +\n  tm_lines(c(\"GRND_LEVEL\", \"RAIL_TYPE\"), palette = c(\"red\", \"blue\", \"darkgreen\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            title= 'Railway Line in Singapore', \n            title.position = c('right', 'top'))\n\n\n\n\nAs we can see from our tmap plot above, the dataset contains:\n\nGRND_LEVEL - Whether the track segment is above or underground\nRAIL_TYPE - Whether the track belongs to LRT, MRT or RAILWAY (KTM train)\n\nDo note that since the data is extracted from URA Master Plan 2019 Rail Line, we will be able to see all current and future rail lines (Thomson East Coast Lines Stages 4, 5, Cross Island Line 1, Jurong Region Line).\nFor our analysis, we only want the above ground segments, seperated by RAIL_TYPE but excluding KTM data, as generally above ground segments affects residents the most. The reason why we seperate it by RAIL_TYPE is that LRT makes lesser noise than MRT and may not adversely impact housing prices as much as MRT. For MRTs, NUS researchers found that housing values were impacted by noise.\nThe rationale of including future aboveground lines like the Jurong Region Line in our analysis is that housing prices could be affected by the construction or announcement of future MRT lines which may cause housing prices to fall.\n\n3.3.6.1 Splitting MRT/LRT Datasets\n\nFilterCheck\n\n\nMRT\n\ngeo_rail_mrt_above <- geo_railway_line %>% filter(GRND_LEVEL == \"ABOVEGROUND\") %>% filter(RAIL_TYPE == \"MRT\")\n\nLRT\n\ngeo_rail_lrt_above <- geo_railway_line %>% filter(GRND_LEVEL == \"ABOVEGROUND\") %>% filter(RAIL_TYPE == \"LRT\")\n\n\n\nMRT\n\nglimpse(geo_rail_mrt_above)\n\nRows: 341\nColumns: 6\n$ Name       <chr> \"kml_1\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml_7\", \"kml_24\", \"kml…\n$ GRND_LEVEL <chr> \"ABOVEGROUND\", \"ABOVEGROUND\", \"ABOVEGROUND\", \"ABOVEGROUND\",…\n$ RAIL_TYPE  <chr> \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MR…\n$ INC_CRC    <chr> \"19247B0E0E15AF87\", \"4E3C7F23EFA39E37\", \"F49903A9C3D88B3E\",…\n$ FMEL_UPD_D <chr> \"20191209172332\", \"20191209172332\", \"20191209172332\", \"2019…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((20846.61 ..., MULTILINEST…\n\n\nLRT\n\nglimpse(geo_rail_lrt_above)\n\nRows: 116\nColumns: 6\n$ Name       <chr> \"kml_60\", \"kml_61\", \"kml_62\", \"kml_63\", \"kml_73\", \"kml_319\"…\n$ GRND_LEVEL <chr> \"ABOVEGROUND\", \"ABOVEGROUND\", \"ABOVEGROUND\", \"ABOVEGROUND\",…\n$ RAIL_TYPE  <chr> \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LRT\", \"LR…\n$ INC_CRC    <chr> \"91095B49D361DDB8\", \"C00FE7321D9283D7\", \"828BF093EA1BA1A8\",…\n$ FMEL_UPD_D <chr> \"20191209172332\", \"20191209172332\", \"20191209172332\", \"2019…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((26936.7 2..., MULTILINEST…\n\n\n\n\n\n\n\n3.3.6.2 Verifying MRT/LRT Aboveground Railway Line\n\ntmap_mode(\"plot\") +\n  tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\", alpha = 0.05, border.alpha = 0.05) +\n  tm_shape(geo_rail_mrt_above) +\n  tm_lines(\"RAIL_TYPE\", palette = \"red\") +\n  tm_shape(geo_rail_lrt_above) +\n  tm_lines(\"RAIL_TYPE\", palette = \"blue\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            title= 'MRT/LRT Track Line in Singapore', \n            title.position = c('right', 'top'))\n\n\n\n\n\n\n\n3.3.7 Transform Parks Dataset\nLet us view our parks dataset\n\nglimpse(geo_parks)\n\nRows: 421\nColumns: 3\n$ Name        <chr> \"JANGGUS GARDEN\", \"JLN LIMAU MANIS PG\", \"GARDEN VIEW PG\", …\n$ Description <chr> \"<html xmlns:fo=\\\"http://www.w3.org/1999/XSL/Format\\\" xmln…\n$ geometry    <MULTIPOLYGON [m]> MULTIPOLYGON (((28392.92 48..., MULTIPOLYGON …\n\n\n\ntmap_mode(\"plot\") +\n  tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\", alpha = 0.05, border.alpha = 0.05) +\n  tm_shape(geo_parks) +\n  tm_fill(\"darkgreen\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            title= 'Parks in Singapore', \n            title.position = c('right', 'top'))\n\n\n\n\nFirstly, as we recognise that parks comes in different shapes and sizes. Parks like Punggol Waterway Park are long by nature and spans the entire width of Punggol. Hence, using a Spatial Points by obtaining its centroid is not the most accurate as the entire length is a park. Hence, we opt to use the park polygon instead.\nOur data is in the MULTIPOLYGON format. As we want to calculate the proximity from homes to the edges of parks, we need to convert it to LINESTRING. The code block uses st_cast() to help us cast the format from MULTIPOLYGON to LINESTRING\n\ngeo_parks <- geo_parks %>% st_cast(\"MULTILINESTRING\") %>% st_cast(\"LINESTRING\")\n\nNow, let us check and plot the map of the parks data.\n\nglimpse(geo_parks)\n\nRows: 687\nColumns: 3\n$ Name        <chr> \"JANGGUS GARDEN\", \"JLN LIMAU MANIS PG\", \"GARDEN VIEW PG\", …\n$ Description <chr> \"<html xmlns:fo=\\\"http://www.w3.org/1999/XSL/Format\\\" xmln…\n$ geometry    <LINESTRING [m]> LINESTRING (28392.92 48794...., LINESTRING (408…\n\n\n\ntmap_mode(\"plot\") +\n  tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\", alpha = 0.05, border.alpha = 0.05) +\n  tm_shape(geo_parks) +\n  tm_lines(\"darkgreen\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            title= 'Parks in Singapore', \n            title.position = c('right', 'top'))\n\n\n\n\nGreat! We have successfully converted the data to LINESTRING!\n\n\n3.3.8 Prepare Good Primary Schools Dataset\nschlah.com provides a good breakdown of factors that contributes to a school’s ranking, based on the following extracted from their website:\n\nGifted Education Programme (GEP): 20%\nPopularity in Primary 1 (P1) Registration: 20%\nSpecial Assistance Plan (SAP): 15%\nSingapore Youth Festival Arts Presentation: 15%\nSingapore National School Games: 15%\nSingapore Uniformed Groups Unit Recognition: 15%\n\nIn our analysis, we want to see if good schools can contribute to increased housing prices in Singapore. For our analysis, we will take that the top 10% (16) of primary schools in Singapore are ‘good schools’\nThe code chunk below will extract the top 16 good primary schools for our analysis.\n\nTOP_10PCT_SCHS = c(\"NANYANG PRIMARY SCHOOL\",\n                  \"TAO NAN SCHOOL\",\n                  \"CATHOLIC HIGH SCHOOL\",\n                  \"NAN HUA PRIMARY SCHOOL\",\n                  \"ST. HILDA'S PRIMARY SCHOOL\",\n                  \"HENRY PARK PRIMARY SCHOOL\",\n                  \"ANGLO-CHINESE SCHOOL (PRIMARY)\",\n                  \"RAFFLES GIRLS' PRIMARY SCHOOL\",\n                  \"PEI HWA PRESBYTERIAN PRIMARY SCHOOL\",\n                  \"CHIJ ST. NICHOLAS GIRLS' SCHOOL\",\n                  \"ROSYTH SCHOOL\",\n                  \"KONG HWA SCHOOL\",\n                  \"POI CHING SCHOOL\",\n                  \"HOLY INNOCENTS' PRIMARY SCHOOL\",\n                  \"AI TONG SCHOOL\",\n                  \"RED SWASTIKA SCHOOL\")\n\ngeo_top_schools = geo_schools %>% filter(SCHOOLNAME %in% TOP_10PCT_SCHS)\nglimpse(geo_top_schools)\n\nRows: 16\nColumns: 14\n$ SCHOOLNAME      <chr> \"AI TONG SCHOOL\", \"ANGLO-CHINESE SCHOOL (PRIMARY)\", \"C…\n$ SCH_HSE_BLK_NUM <chr> \"100\", \"50\", \"9\", \"501\", \"1\", \"5\", \"350\", \"30\", \"52\", …\n$ HSE_BLK_NUM     <chr> \"100\", \"50\", \"9\", \"501\", \"1\", \"5\", \"350\", \"30\", \"52\", …\n$ SCH_POSTAL_CODE <chr> \"579646\", \"309918\", \"579767\", \"569405\", \"278790\", \"536…\n$ POSTAL_CODE     <chr> \"579646\", \"309918\", \"579767\", \"569405\", \"278790\", \"536…\n$ SCH_ROAD_NAME   <chr> \"BRIGHT HILL DRIVE\", \"BARKER ROAD\", \"BISHAN STREET 22\"…\n$ ROAD_NAME       <chr> \"BRIGHT HILL DRIVE\", \"BARKER ROAD\", \"BISHAN STREET 22\"…\n$ HYPERLINK       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n$ MOREINFO        <chr> \"https://www.moe.gov.sg/schoolfinder\", \"https://www.mo…\n$ LATITUDE        <chr> \"1.3606564354832\", \"1.3187690519982\", \"1.3548563617849…\n$ LONGITUDE       <chr> \"103.83293164489\", \"103.83570184821\", \"103.84376151132…\n$ GEOMETRY        <chr> \"{{hG_vvxRTAhDEJCFIdAeDFMHKJKJGBCIS_EoAADABEHEHINGL?@C…\n$ SCH_TEXT        <chr> \"Ai Tong Sch\", \"Anglo-Chinese Sch (Pri)\", \"Catholic Hi…\n$ geometry        <POINT [m]> POINT (27956.94 38079.99), POINT (28265.23 33448…\n\n\nThere we have it, we have successfully extracted the top 10% of primary schools in Singapore (16 schools).\n\n\n3.3.9 Prepare CBD Outline\nFrom Wikipedia, we know that Singapore’s CBD is also called DOWNTOWN CORE. To be accurate in our analysis, we will calculate the proximity to CBD based on the following rules:\n\nif outside CBD boundary, we will calcualte the distance to the LINESTRING.\nif within CBD, distance will be 0\n\nThe codeblock below achieves a few things:\n\nFilter to get the subzones of DOWNTOWN CORE planning area\nCombine the polygons to obtain the outline of DOWNTOWN CORE (CBD)\nConvert the geometry from POLYGON to LINESTRING format\n\n\ncbd_sf <- mpsz %>% filter(mpsz$PLN_AREA_N == \"DOWNTOWN CORE\")\ncbd_geom <- st_union(cbd_sf)\ncbd_geom <- st_cast(cbd_geom, \"LINESTRING\")"
  },
  {
    "objectID": "exercises/thex03.html#importing-aspatial-data",
    "href": "exercises/thex03.html#importing-aspatial-data",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "4.1 Importing Aspatial Data",
    "text": "4.1 Importing Aspatial Data\nIn the various tabs below, we will import each individual dataset from its respective folders, with a brief explanation of the use cases of each dataset.\n\nCHAS ClinicsHDB HIP MUPHDB Resale Flat PricingShopping Malls\n\n\n\nCHAS_raw = read_xlsx(\"Take-Home_Ex03/aspatial/CHAS.xlsx\") \nglimpse(CHAS_raw)\n\nRows: 1,910\nColumns: 7\n$ Name                   <chr> \"1 Aljunied Medical\", \"1 BISHAN MEDICAL\", \"1 ME…\n$ Address                <chr> \"Singapore 367874\", \"283, Bishan Street, #01- 1…\n$ Postal                 <chr> \"367874\", \"570283\", \"560410\", \"560704\", \"600135…\n$ Telephone              <chr> NA, \"64561600\", \"62517030\", \"96311728\", \"977017…\n$ Type                   <chr> \"Medical\", \"Medical, Cervical\\r\\nCancer Screen\"…\n$ Website                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ `Pap Test\\r\\nServices` <chr> \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n\n\n\n\n\nhdb_hip_mup_raw = read_xlsx(\"Take-Home_Ex03/aspatial/HDB_HIP-MUP-20230312.xlsx\")\nglimpse(hdb_hip_mup_raw)\n\nRows: 2,769\nColumns: 4\n$ BLK    <chr> \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"225\", \"226\", \"226B\",…\n$ STREET <chr> \"ANG MO KIO AVE 1\", \"ANG MO KIO AVE 1\", \"ANG MO KIO AVE 1\", \"AN…\n$ TYPE   <chr> \"HIP\", \"HIP\", \"HIP\", \"HIP\", \"HIP\", \"HIP\", \"HIP\", \"HIP\", \"HIP\", …\n$ TOWN   <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO…\n\n\n\n\n\nhdb_resale_raw = read_csv(\"Take-Home_Ex03/aspatial/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\nglimpse(hdb_resale_raw)\n\nRows: 148,373\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01\", \"2017-01\", \"2017-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"601\", \"150\", \"447\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 4\", \"ANG MO K…\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"0…\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67, 68, 67, 68, 67, 67…\n$ flat_model          <chr> \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, 1981, 1979, 1976, 19…\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 years 07 months\", \"62 ye…\n$ resale_price        <dbl> 232000, 250000, 262000, 265000, 265000, 275000, 28…\n\n\n\n\n\nshopping_malls_raw = read_xlsx(\"Take-Home_Ex03/aspatial/malls-20230320.xlsx\")"
  },
  {
    "objectID": "exercises/thex03.html#filtering-hdb-resale-flat-data",
    "href": "exercises/thex03.html#filtering-hdb-resale-flat-data",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "4.2 Filtering HDB Resale Flat Data",
    "text": "4.2 Filtering HDB Resale Flat Data\nWe will now filter the HDB Resale to focus on the target months, Jan 2020 to Feb 2023, and 5 Room HDBs to construct the predictive model. We will use:\n\nfilter() to filter out the desired room type and months\nunique() to check if the desired room type and months has been filtered correctly\nglimpse() to check the data structure of the filtered dataset\n\n\nFilter CodeGlimpse VariablesUnique Month and Flat_Type\n\n\n\nhdb_resale <- filter(hdb_resale_raw, flat_type == \"5 ROOM\") %>%\n              filter(month >= \"2020-01\" & month <= \"2023-02\")\n\n\n\n\nglimpse(hdb_resale)\n\nRows: 21,500\nColumns: 11\n$ month               <chr> \"2020-01\", \"2020-01\", \"2020-01\", \"2020-01\", \"2020-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", …\n$ block               <chr> \"439\", \"401\", \"439\", \"458\", \"101\", \"423\", \"501\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG MO …\n$ storey_range        <chr> \"01 TO 03\", \"01 TO 03\", \"10 TO 12\", \"16 TO 18\", \"0…\n$ floor_area_sqm      <dbl> 119, 119, 119, 120, 117, 133, 121, 118, 117, 110, …\n$ flat_model          <chr> \"Improved\", \"Improved\", \"Improved\", \"Improved\", \"S…\n$ lease_commence_date <dbl> 1979, 1979, 1979, 1980, 1978, 1993, 1981, 1980, 19…\n$ remaining_lease     <chr> \"58 years 01 month\", \"58 years 04 months\", \"58 yea…\n$ resale_price        <dbl> 485000, 465000, 535000, 580000, 450000, 700000, 53…\n\n\n\n\n\nunique(hdb_resale$month)\n\n [1] \"2020-01\" \"2020-02\" \"2020-03\" \"2020-04\" \"2020-05\" \"2020-06\" \"2020-07\"\n [8] \"2020-08\" \"2020-09\" \"2020-10\" \"2020-11\" \"2020-12\" \"2021-01\" \"2021-02\"\n[15] \"2021-03\" \"2021-04\" \"2021-05\" \"2021-06\" \"2021-07\" \"2021-08\" \"2021-09\"\n[22] \"2021-10\" \"2021-11\" \"2021-12\" \"2022-01\" \"2022-02\" \"2022-03\" \"2022-04\"\n[29] \"2022-05\" \"2022-06\" \"2022-07\" \"2022-08\" \"2022-09\" \"2022-10\" \"2022-11\"\n[36] \"2022-12\" \"2023-01\" \"2023-02\"\n\n\n\nunique(hdb_resale$flat_type)\n\n[1] \"5 ROOM\"\n\n\n\n\n\nFrom the code and results in the respective tabs (Glimpse Variables and Unique Month and Flat Type), we can see that:\n\nThere are 21,500 transactions between Jan 2020 to Feb 2023.\nThe month and flat_type has been extracted correctly."
  },
  {
    "objectID": "exercises/thex03.html#transforming-aspatial-data---create-new-columns-with-values",
    "href": "exercises/thex03.html#transforming-aspatial-data---create-new-columns-with-values",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "4.3 Transforming Aspatial Data - Create New Columns with Values",
    "text": "4.3 Transforming Aspatial Data - Create New Columns with Values\nNext, we transform the Aspatial Datasets into more meaningful values:\n\nCHAS Clinics - There is nothing to transform, since as noted earlier, there is already a postal column provided\nHDB HIP MUP - We need to obtain the address for geocoding (obtaining the SVY21 X and Y coordinates) by combining the BLK and STREET fields\nHDB Resale Flat Pricing - We need to obtain the address for geocoding (obtaining the SVY21 X and Y coordinates) by combining the block and street_name fields, and also convert the remaining lease from the form of YY years MM months to a more machine-readable format (ie. MM months)\nShopping Malls - Nothing to transform, we can use the Mall_Name as the search term to obtain the geocode (SVY X and Y coordinates)\n\nThe code chunks will assist with the transformation using mutate() further explained below:\n\nHDB HIP MUPHDB Resale Flat Pricing\n\n\nWe mutate() the hdb_hip_mup_raw dataset by pasting the BLK and STREET columns together into the address column to a new sf dataframe called hdb_hip_mup_trans\n\nhdb_hip_mup_trans <- hdb_hip_mup_raw %>%\n  mutate(hdb_hip_mup_raw, address = paste(BLK, STREET))\n\n\n\nWe mutate() the hdb_resale dataset by pasting the block and street_name columns together into the address column to a new variable called hdb_hip_mup_trans. We also used mutate() to modify the existing remaining_lease data to the form of MM.\nThe first section of the code as.integer(str_sub(remaining_lease, 0, 2)) * 12 extracts the year numbers as YY and converts it into string and then multiplying it by 12 to convert it to number of months.\nThe next part of the code checks if there is any numerical MM (month) present, if there is no month present, the value will be NA and 0 will be assigned in place of NA. Else, if present, we take the MM.\nThe integer month is summed with the year in months to form this column remaining_lease_mths in the new sf dataframe hdb_resale_trans\n\nhdb_resale_trans <- hdb_resale %>%\n  mutate(hdb_resale, address = paste(block, street_name)) %>%\n  mutate(hdb_resale, remaining_lease_mths = (as.integer(str_sub(remaining_lease, 0, 2)) * 12 + ifelse(is.na(as.integer(str_sub(remaining_lease, 9, 11))), 0,  as.integer(str_sub(remaining_lease, 9, 11)))))\n\nNext, let us left join the HDB HIP MUP data into HDB Resale Transactions so that we know which HDB units have already completed their upgrading.\n\nhdb_resale_trans <- left_join(hdb_resale_trans, hdb_hip_mup_trans)\nglimpse(hdb_resale_trans)\n\nRows: 21,548\nColumns: 17\n$ month                <chr> \"2020-01\", \"2020-01\", \"2020-01\", \"2020-01\", \"2020…\n$ town                 <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO…\n$ flat_type            <chr> \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", \"5 ROOM\",…\n$ block                <chr> \"439\", \"401\", \"439\", \"458\", \"101\", \"423\", \"501\", …\n$ street_name          <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG MO…\n$ storey_range         <chr> \"01 TO 03\", \"01 TO 03\", \"10 TO 12\", \"16 TO 18\", \"…\n$ floor_area_sqm       <dbl> 119, 119, 119, 120, 117, 133, 121, 118, 117, 110,…\n$ flat_model           <chr> \"Improved\", \"Improved\", \"Improved\", \"Improved\", \"…\n$ lease_commence_date  <dbl> 1979, 1979, 1979, 1980, 1978, 1993, 1981, 1980, 1…\n$ remaining_lease      <chr> \"58 years 01 month\", \"58 years 04 months\", \"58 ye…\n$ resale_price         <dbl> 485000, 465000, 535000, 580000, 450000, 700000, 5…\n$ address              <chr> \"439 ANG MO KIO AVE 10\", \"401 ANG MO KIO AVE 10\",…\n$ remaining_lease_mths <dbl> 697, 700, 696, 708, 685, 867, 720, 715, 718, 983,…\n$ BLK                  <chr> \"439\", \"401\", \"439\", \"458\", \"101\", \"423\", \"501\", …\n$ STREET               <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG MO…\n$ TYPE                 <chr> \"HIP\", \"HIP\", \"HIP\", \"MUP\", \"MUP\", \"MUP\", \"HIP\", …\n$ TOWN                 <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO…\n\n\nThen we’ll select only the unnecessary columns:\n\nhdb_resale_trans <- hdb_resale_trans %>% select(c(1:13, 16))"
  },
  {
    "objectID": "exercises/thex03.html#retrieving-svy21-coordinate-of-addresses",
    "href": "exercises/thex03.html#retrieving-svy21-coordinate-of-addresses",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "4.4 Retrieving SVY21 Coordinate of Addresses",
    "text": "4.4 Retrieving SVY21 Coordinate of Addresses\nThis section will focus on retrieving relavant data such as coordinates of the address which we could use in further spatial analysis to obtain proximity to locational factors later.\nWe are interested in obtaining the SVY21 X and Y coordinates as they are in the Projected Coordinate System, which allows us to perform measure directly without any additional transformations.\n\n4.4.1 Create a List Storing Unique Addresses/Postal Codes\nSince some addresses/postal codes are duplicated, we store and check unique addresses to reduce the amount of GET requests sent to the OneMap API:\n\nFaster\nOneMap API has a rate limit of 250 API calls a minute\nIt makes it easier for us to locate errors and correct it\n\nHere, we will obtain a list of unique addresses/postal codes for each data set.\n\nCHAS ClinicsHDB Resale Flat PricingShopping Malls\n\n\n\naddr_lst.chas <- sort(unique(CHAS_raw$Postal))\nglimpse(addr_lst.chas)\n\n chr [1:1128] \"018935\" \"018972\" \"018981\" \"018982\" \"018984\" \"018987\" ...\n\n\n\n\n\naddr_lst.resale <- sort(unique(hdb_resale_trans$address))\nglimpse(addr_lst.resale)\n\n chr [1:4283] \"1 CHAI CHEE RD\" \"1 DELTA AVE\" \"1 EVERTON PK\" \"1 MARINE TER\" ...\n\n\n\n\n\naddr_lst.malls <- sort(unique(shopping_malls_raw$Mall_Name))\nglimpse(addr_lst.malls)\n\n chr [1:166] \"100 AM\" \"313@Somerset\" \"321 Clementi\" \"888 Plaza\" ...\n\n\n\n\n\n\n\n4.4.2 Create Function to Retrieve Coordinates from OneMap.sg API\nThe following function uses OneMap.sg Search API to obtain coordinates (SVY21 X, Y) using part of an address or postal code.\nThis is how the function get_coordinates() below will work:\n\nnew_coords datafame is created to store all the new coordinate data and its original address that is input to the GET request API\nfor each addr in addr_lst where addr_lst is the list passed into the function, we will query each record and append accordingly:\n\nIf there is 1 or more records, we append the top record’s SVY21 X, Y coordinates and addr to a temporary dataframe called new_row,\nElse, NA for it’s X and Y columns and the addr is stored in new_row.\n\nThe GET Request has various parameters:\n\nsearchVal - the value to pass to OneMap Search to obtain the Geocode (in this case we are interested in SVY21 X, Y coordinates)\nreturnGeom - return details about geometry (ie. SVY21 X, Y or Lat Lon), Y in this case as we want SVY21 X, Y coordinates\ngetAddrDetails - get more details about the address, N in this case as we don’t require further information.\n\nfromJSON() helps us convert the JSON format to a list format for manipulation\n\nthe function rawToChar() was used as the received type for reply$content is RAW, which requires conversion before we can read the values\n\nLastly, we will combine the new_row data into the main new_coords dataframe using rbind() as they are both dataframes.\n\n\n\nget_coordinates <- function(addr_lst){\n  \n  # Create a data frame to store all retrieved coordinates\n  new_coords <- data.frame()\n    \n  for (addr in addr_lst){\n    #print(i)\n\n    reply <- GET('https://developers.onemap.sg/commonapi/search?',\n           query = list(searchVal = addr,\n                        returnGeom = 'Y',\n                        getAddrDetails = 'N'))\n    \n    output <- fromJSON(rawToChar(reply$content))\n    found <- output$found\n    res <- output$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found >= 1){\n      res_1 <- head(res, n = 1)\n      x <- res_1$X\n      y <- res_1$Y\n      new_row <- data.frame(address = addr, x = x, y = y)\n    }\n\n    else {\n      new_row <- data.frame(address = addr, x = NA, y = NA)\n    }\n    \n    # Add the row\n    new_coords <- rbind(new_coords, new_row)\n  }\n  return(new_coords)\n}\n\n\n\n\n4.4.3 Call get_coordinates() Function to Obtain Coordinates\nWe use get_coordinates() function created earlier to obtain the coordinates of the address. glimpse() allows us to view and check if the data has been properly created.\nRDS Scripts contains scripts to import/export the coordinates R objects to RDS file format (R Data Serialisation) prevent having to call the API each time on every render.\n\nget_coordinates() FunctionRDS ScriptsGlimpse Records\n\n\nCHAS Clinics\n\ncoords_chas <- get_coordinates(addr_lst.chas)\n\nHDB Resale Flat Pricing\n\ncoords_resale <- get_coordinates(addr_lst.resale)\n\nShopping Malls\n\ncoords_malls <- get_coordinates(addr_lst.malls)\n\n\n\nWriting RDS\n\nwrite_rds(coords_chas, \"Take-Home_Ex03/rds/coords_chas.rds\")\nwrite_rds(coords_resale, \"Take-Home_Ex03/rds/coords_resale.rds\")\nwrite_rds(coords_malls, \"Take-Home_Ex03/rds/coords_malls.rds\")\n\nReading RDS\n\ncoords_chas <- read_rds(\"Take-Home_Ex03/rds/coords_chas.rds\")\ncoords_resale <- read_rds(\"Take-Home_Ex03/rds/coords_resale.rds\")\ncoords_malls <- read_rds(\"Take-Home_Ex03/rds/coords_malls.rds\")\n\n\n\nCHAS Clinics\n\nglimpse(coords_chas)\n\nRows: 1,128\nColumns: 3\n$ address <chr> \"018935\", \"018972\", \"018981\", \"018982\", \"018984\", \"018987\", \"0…\n$ x       <chr> \"30173.1125663621\", \"30856.1576845003\", \"30325.5481859585\", \"3…\n$ y       <chr> \"28870.8731260244\", \"29629.71109147\", \"29166.1214467622\", \"290…\n\n\nHDB Resale Flat Pricing\n\nglimpse(coords_resale)\n\nRows: 4,283\nColumns: 3\n$ address <chr> \"1 CHAI CHEE RD\", \"1 DELTA AVE\", \"1 EVERTON PK\", \"1 MARINE TER…\n$ x       <chr> \"37949.0264732633\", \"27473.0907973954\", \"28899.2285061181\", \"3…\n$ y       <chr> \"34465.7385691088\", \"30496.6361175738\", \"28663.7158067878\", \"3…\n\n\nShopping Malls\n\nglimpse(coords_malls)\n\nRows: 166\nColumns: 3\n$ address <chr> \"100 AM\", \"313@Somerset\", \"321 Clementi\", \"888 Plaza\", \"Admira…\n$ x       <chr> \"29131.8164707171\", \"28561.1386390822\", \"20395.3064215332\", \"2…\n$ y       <chr> \"28573.4721462838\", \"31485.0772309396\", \"32700.1500842664\", \"4…"
  },
  {
    "objectID": "exercises/thex03.html#data-verification-for-coordinate-data",
    "href": "exercises/thex03.html#data-verification-for-coordinate-data",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "4.5 Data Verification for Coordinate Data",
    "text": "4.5 Data Verification for Coordinate Data\nWith the retrieved data, we need to inspect and verify the data received and correct any errors made along the way. We will do all the steps in parallel for each dataset, outlined in step format below:\n\nMerge coordinate data and original dataframe\n\nWe do this as the CHAS Clinics coordinates are derived from Postal Code and it might be hard to figure out which place are we looking at by looking at just the postal code\n\nCheck for NA X/Y values and manually amend if required\nConvert DataFrame into a sf Object\nPlot a tmap and check if points are plotted in the correct regions\n\nAt any step if there are issues, we will detail steps to fix or recover from it.\n\n4.5.1 CHAS Clinics\n\nMerge Coordinate Data and Original Dataframe\n\ntemp_chas <- left_join(CHAS_raw, coords_chas, by=c(\"Postal\" = \"address\"))\n\nCheck for NA X/Y values and manually amend if required\n\nfilter(temp_chas, is.na(x) == TRUE)\n\n# A tibble: 8 × 9\n  Name                  Address Postal Telep…¹ Type  Website Pap T…² x     y    \n  <chr>                 <chr>   <chr>  <chr>   <chr> <chr>   <chr>   <chr> <chr>\n1 \"Atlantic Dental Sur… \"189, … 188332 633871… Dent… <NA>    No      <NA>  <NA> \n2 \"DA CLINIC @ TAMAN\\r… \"140, … 610410 695410… Medi… <NA>    No      <NA>  <NA> \n3 \"International Denta… \"6, Ge… 69249  637200… Dent… <NA>    No      <NA>  <NA> \n4 \"Lifecare Family Cli… \"102, … 760102 675804… Medi… <NA>    No      <NA>  <NA> \n5 \"Lok Dentist\"         \"34, C… 089673 622501… Dent… <NA>    No      <NA>  <NA> \n6 \"People's Dental Sur… \"1, Ro… 180001 629276… Dent… <NA>    No      <NA>  <NA> \n7 \"Raffles Medical (Ou… \"51, T… 529684 631121… Medi… <NA>    No      <NA>  <NA> \n8 \"Unity Denticare (GS… \"50, M… 048940 659044… Dent… <NA>    No      <NA>  <NA> \n# … with abbreviated variable names ¹​Telephone, ²​`Pap Test\\r\\nServices`\n\n\nHere, using filter() and is.na(), we find out which records do not have a valid location assigned to it. Now, let us manually check through the records and fix the issue.\n\n\n\n\n\n\n\nCHAS Clinic Address\nIssue\n\n\n\n\n189, Selegie Road, Selegie Centre, #01- 05, Singapore 188332\nNo longer exists based on Onemap and Google Map, we will remove it\n\n\n140, Corporation Drive, #01- 03\nPostal Code number 610140 according to OneMap, we will amend accordingly\n\n\n6, Gemmill Lane\nPostal Code number 069249 according to OneMap, we will amend accordingly\n\n\n102, Yishun Avenue 5, #01- 133, Singapore\\r\\n760102\nNo longer exists based on Onemap and Google Map, we will remove it\n\n\n34, Craig Road, Chinatown Plaza, #01- 04,\\r\\nSingapore 089673\nNo longer exists based on Onemap and Google Map, we will remove it\n\n\n1, Rochor Road, Rochor Centre, #03- 516,\\r\\nSingapore 180001\nNo longer exists based on Onemap and Google Map, we will remove it\n\n\n51, TAMPINES AVENUE 4, OUR TAMPINES\\r\\nHUB, #B1- 04/05\nRecords are appended as 528523 on OneMap, we will amend accordingly\n\n\n50, Market Street, Golden Shoe Car Park,\\r\\n#01- 30, Singapore 048940\nNo longer exists based on OneMap and Google Map, we will remove it\n\n\n\nNow, let us update:\n4.5.1.1 Fixing Data\n\n1. Update Records2. Rerun get_coordinates()3. Combine DataFrame and verify\n\n\nWe remove the clinics that are non-existent using filter()\n\nchas_updated <- filter(CHAS_raw, !Address %in%\n  c(\"189, Selegie Road, Selegie Centre, #01- 05,\\r\\nSingapore 188332\",\n    \"102, Yishun Avenue 5, #01- 133, Singapore\\r\\n760102\",\n    \"34, Craig Road, Chinatown Plaza, #01- 04,\\r\\nSingapore 089673\",\n    \"1, Rochor Road, Rochor Centre, #03- 516,\\r\\nSingapore 180001\",\n    \"50, Market Street, Golden Shoe Car Park,\\r\\n#01- 30, Singapore 048940\"))\n\nNext, we use mutate() and ifelse() condition to update the Postal Codes of the clinics at the relavant addresses.\n\nchas_updated <- chas_updated %>% \n  mutate(Postal = ifelse(Address == \"140, Corporation Drive, #01- 03\", \"610140\", Postal)) %>%\n  mutate(Postal = ifelse(Address == \"6, Gemmill Lane\", \"069249\", Postal)) %>%\n  mutate(Postal = ifelse(Address == \"51, TAMPINES AVENUE 4, OUR TAMPINES\\r\\nHUB, #B1- 04/05\", \"528523\", Postal))\n\nLastly, we regenerate the list of unique Postal Codes to be geocoded.\n\naddr_lst.chas_upd <- sort(unique(chas_updated$Postal))\nglimpse(addr_lst.chas_upd)\n\n chr [1:1122] \"018935\" \"018972\" \"018981\" \"018982\" \"018984\" \"018987\" ...\n\n\n\n\nWe get the SVY21 X,Y coordinates using our get_coordinates() function\n\ncoords_chas_upd <- get_coordinates(addr_lst.chas_upd)\n\nSaving the DataFrame as .rds for future use to prevent rerunning get_coordinates() GET API everytime a render is run\n\nwrite_rds(coords_chas_upd, \"Take-Home_Ex03/rds/coords_chas_upd.rds\")\n\nLoad the DataFrame from .rds\n\ncoords_chas_upd <- read_rds(\"Take-Home_Ex03/rds/coords_chas_upd.rds\")\n\n\n\nWe left join the chas_updated main table and coordinates and filter the x column for any null values\n\ntemp_chas <- left_join(chas_updated, coords_chas_upd, by=c(\"Postal\" = \"address\"))\nfilter(temp_chas, is.na(x) == TRUE)\n\n# A tibble: 0 × 9\n# … with 9 variables: Name <chr>, Address <chr>, Postal <chr>, Telephone <chr>,\n#   Type <chr>, Website <chr>, Pap Test\nServices <chr>, x <chr>, y <chr>\n\n\nNo null values found, we have completed this step!\n\n\n\nConvert a DataFrame into a sf Object\nWe specify the SVY21 X and Y coordinates to be used as the coordinate geometry. The crs specified is 3414 which refers to SVY21.\n\nchas_sf <- st_as_sf(temp_chas,\n                        coords = c(\"x\", \"y\"),\n                        crs = 3414)\n\nPlot a tmap and check if points are plotted in the correct regions\nNow, we will plot an interactive tmap to check if our points are correct.\n\ntmap_mode(\"view\")\ntm_shape(chas_sf) +\n  tm_dots(\"Type\",\n          popup.vars=c(\"Name\"=\"Name\", \"Address\"=\"Address\", \"Type\" = \"Type\", \"Telephone\" = \"Telephone\"))\n\n\n\n\n\n\nFrom our analysis, the points looks to be correctly located.\n\n\n\n4.5.2 HDB Resale Flat Pricing\n\nMerge Coordinate Data and Original Dataframe\n\ntemp_hdb_resale_trans <- left_join(hdb_resale_trans, coords_resale, by=c(\"address\" = \"address\"))\n\nCheck for NA X/Y values and manually amend if required\n\nfilter(temp_hdb_resale_trans, is.na(x) == TRUE)\n\n# A tibble: 0 × 16\n# … with 16 variables: month <chr>, town <chr>, flat_type <chr>, block <chr>,\n#   street_name <chr>, storey_range <chr>, floor_area_sqm <dbl>,\n#   flat_model <chr>, lease_commence_date <dbl>, remaining_lease <chr>,\n#   resale_price <dbl>, address <chr>, remaining_lease_mths <dbl>, TYPE <chr>,\n#   x <chr>, y <chr>\n\n\nNo NA values, great!\nConvert a DataFrame into a sf Object\nWe specify the SVY21 X and Y coordinates to be used as the coordinate geometry. The crs specified is 3414 which refers to SVY21.\n\nhdb_resale_sf <- st_as_sf(temp_hdb_resale_trans,\n                        coords = c(\"x\", \"y\"),\n                        crs = 3414)\n\nPlot a tmap and check if points are plotted in the correct regions\nNow, we will plot an interactive tmap to check if our points are correct. We overlay the URA Master Plan Regions for a quick overlay to roughly check if the HDBs are located in the correct areas. Do note that HDB Towns differ from URA Planning Areas.\nGenerate external interactive plot\n\ntmap_mode(\"plot\")\nhdb_plot1 <- tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\",\n              alpha = 0.5) +\ntm_shape(hdb_resale_sf) +\n  tm_dots(\"town\",\n          popup.vars=c(\"block\"=\"block\", \"street_name\"=\"street_name\", \"flat_model\" = \"flat_model\", \"town\" = \"town\", \"resale_price\" = \"resale_price\", \"remaining_lease_mths\", \"remaining_lease_mths\"))\ntmap_save(hdb_plot1, \"thex03_hdbplot1.html\")\n\nStatic Plot\n\ntmap_mode(\"plot\")\ntm_shape(mpsz) +\n  tm_polygons(\"REGION_N\",\n              alpha = 0.5) +\ntm_shape(hdb_resale_sf) +\n  tm_dots(\"town\", size = 0.02)\n\n\n\n\nView Interactive Version of Map here! [20+mb]\nOddly, 27 Marine Cres appeared as a point on Sembcorp Marine Tuas Crescent and 54 Kent Rd somehow appeared as a point on 54J SOUTH BUONA VISTA ROAD KENT RIDGE HILL RESIDENCES. There are also some other differences, so let us now recode some of the addresses to get them to the right locations:\n4.5.2.1 Fixing Data\n\n1. Update Records2. Rerun get_coordinates()3. Combine DataFrame and verify4. Convert a DataFrame into a sf Object5. Plot a tmap and check if points are plotted in the correct regions\n\n\nWe use mutate() to replace the existing addresses with more specific ones that we found on OneMap.\n\nmod_hdb_resale_trans <- hdb_resale_trans %>% \n  mutate(address = ifelse(address == \"10 JLN BATU\", \"10 JALAN BATU DI TANJONG RHU\", address)) %>%\n  mutate(address = ifelse(address == \"11 JLN BATU\", \"11 JALAN BATU DI TANJONG RHU\", address)) %>%     \n  mutate(address = ifelse(address == \"54 KENT RD\", \"54 KENT ROAD KENT VILLE\", address)) %>%    \n  mutate(address = ifelse(address == \"27 MARINE CRES\", \"27 MARINE CRESCENT MARINE CRESCENT VILLE\", address))\n\n\ntemp_hdb_resale_trans <- left_join(mod_hdb_resale_trans, coords_resale, by=c(\"address\" = \"address\"))\n\nLastly, we regenerate the list of unique Postal Codes to be geocoded.\n\naddr_lst.resale_upd <- sort(unique(mod_hdb_resale_trans$address))\nglimpse(addr_lst.resale_upd)\n\n chr [1:4283] \"1 CHAI CHEE RD\" \"1 DELTA AVE\" \"1 EVERTON PK\" \"1 MARINE TER\" ...\n\n\n\n\nWe get the SVY21 X,Y coordinates using our get_coordinates() function\n\ncoords_resale_upd <- get_coordinates(addr_lst.resale_upd)\n\nSaving the DataFrame as .rds for future use to prevent rerunning get_coordinates() GET API everytime a render is run\n\nwrite_rds(coords_resale_upd, \"Take-Home_Ex03/rds/coords_resale_upd.rds\")\n\nLoad the DataFrame from .rds\n\ncoords_resale_upd <- read_rds(\"Take-Home_Ex03/rds/coords_resale_upd.rds\")\n\n\n\nWe left join the hdb_hip_mup_trans_upd main table and coordinates and filter the x column for any null values\n\ntemp_hdb_resale_trans <- left_join(mod_hdb_resale_trans, coords_resale_upd, by=c(\"address\" = \"address\"))\nfilter(temp_hdb_resale_trans, is.na(x) == TRUE)\n\n# A tibble: 0 × 16\n# … with 16 variables: month <chr>, town <chr>, flat_type <chr>, block <chr>,\n#   street_name <chr>, storey_range <chr>, floor_area_sqm <dbl>,\n#   flat_model <chr>, lease_commence_date <dbl>, remaining_lease <chr>,\n#   resale_price <dbl>, address <chr>, remaining_lease_mths <dbl>, TYPE <chr>,\n#   x <chr>, y <chr>\n\n\nNo null values found, we have completed this step!\n\n\n\nhdb_resale_sf <- st_as_sf(temp_hdb_resale_trans,\n                        coords = c(\"x\", \"y\"),\n                        crs = 3414)\n\n\n\nGenerate external interactive map\n\ntmap_mode(\"plot\")\nhdb_plot2 <- tm_shape(mpsz) +\n  tm_polygons(\"REGION_N\",\n              alpha = 0.5) +\ntm_shape(hdb_resale_sf) +\n  tm_dots(\"town\",\n          popup.vars=c(\"block\"=\"block\", \"street_name\"=\"street_name\", \"flat_model\" = \"flat_model\", \"town\" = \"town\", \"resale_price\" = \"resale_price\", \"remaining_lease_mths\", \"remaining_lease_mths\"))\ntmap_save(hdb_plot2, \"thex03_hdbplot2.html\")\n\nStatic Plot\n\ntmap_mode(\"plot\")\ntm_shape(mpsz) +\n  tm_polygons(\"REGION_N\",\n              alpha = 0.5) +\ntm_shape(hdb_resale_sf) +\n  tm_dots(\"town\")\n\n\n\n\nView Interactive Version of Map here! [20+mb]\nGreat! All the blocks looks to be plotted in the correct locations!\n\n\n\n\n\n\n4.5.3 Shopping Malls\n\nMerge Coordinate Data and Original Dataframe\n\ntemp_malls <- left_join(shopping_malls_raw, coords_malls, by=c(\"Mall_Name\" = \"address\"))\n\nCheck for NA X/Y values and manually amend if required\n\nfilter(temp_malls, is.na(x) == TRUE)\n\n# A tibble: 0 × 4\n# … with 4 variables: Mall_Name <chr>, Region <chr>, x <chr>, y <chr>\n\n\nNo NA values, great!\nConvert a DataFrame into a sf Object\nWe specify the SVY21 X and Y coordinates to be used as the coordinate geometry. The crs specified is 3414 which refers to SVY21.\n\ngeo_malls <- st_as_sf(temp_malls,\n                        coords = c(\"x\", \"y\"),\n                        crs = 3414)\n\nPlot a tmap and check if points are plotted in the correct regions\nNow, we will plot an interactive tmap to check if our points are correct. We overlay the URA Master Plan Regions for a quick overlay to roughly check if the malls are located in the correct areas. Do note that mall region may differ from URA Planning Areas.\n\ntmap_mode(\"view\")\ntm_shape(mpsz) +\n  tm_polygons(\"REGION_N\",\n              alpha = 0.5) +\ntm_shape(geo_malls) +\n  tm_dots(\"Region\",\n          popup.vars=c(\"Mall_Name\"=\"Mall_Name\", \"Region\"=\"Region\"),\n          size = 0.05,\n          palette = \"Set2\")\n\n\n\n\n\n\nNice! All the malls seems to be in their right locations."
  },
  {
    "objectID": "exercises/thex03.html#functions",
    "href": "exercises/thex03.html#functions",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "5.1 Functions",
    "text": "5.1 Functions\n\n5.1.1 Get Proximity Locational Factors\nThe get_prox() function below takes in an origin and destination dataframe and creates a distance matrix of origin and destination pairs based on st_distance(). Next, we use mutate and apply to locate the destination that is located the minimum distance away from the origin and save it to the corresponding row in origin_df under the PROX column. The 1 in apply is to apply the function row by row, which corresponds directly to the origin_df rows.\nNext, we rename the columns based on whats specified by the input parameter and return the dataframe.\nFor the code below, we will use it to detect for 2 types of spatial types for destinations, Points and Linestring.\nFor our two linestring datasets, we know that there are:\n\nNo HDBs within park boundaries\nNo HDBs within Downtown Core\n\nHence, the following datasets will only need to factor distance to the boundary and there are no concerns that there are HDBs within those regions.\n\nget_prox <- function(origin_df, dest_df, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)           \n  \n  # find the nearest location_factor and create new data frame\n  near <- origin_df %>% \n    mutate(PROX = apply(dist_matrix, 1, function(x) min(x)) / 1000) \n  \n  # rename column name according to input parameter\n  names(near)[names(near) == 'PROX'] <- col_name\n\n  # Return df\n  return(near)\n}\n\n\n\n5.1.2 Get Num Within Locational Factors\nThe get_within() function below takes in an origin and destination dataframe and creates a distance matrix of origin and destination pairs based on st_distance().\nNext, we use mutate and apply to obtain the sum of destinations that fits less than or equal to the threshold_dist specified and save the sum value to the corresponding row in origin_df under the PROX column. The 1 in apply is to apply the function row by row, which corresponds directly to the origin_df rows.\nNext, we rename the columns based on whats specified by the input parameter and return the dataframe.\n\nget_within <- function(origin_df, dest_df, threshold_dist, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)   \n  \n  # count the number of location_factors within threshold_dist and create new data frame\n  wdist <- origin_df %>% \n    mutate(WITHIN_DT = apply(dist_matrix, 1, function(x) sum(x <= threshold_dist)))\n  \n  # rename column name according to input parameter\n  names(wdist)[names(wdist) == 'WITHIN_DT'] <- col_name\n\n  # Return df\n  return(wdist)\n}"
  },
  {
    "objectID": "exercises/thex03.html#generating-proximity-locational-factors",
    "href": "exercises/thex03.html#generating-proximity-locational-factors",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "5.2 Generating Proximity Locational Factors",
    "text": "5.2 Generating Proximity Locational Factors\n\ngeo_hdb_resale <- hdb_resale_sf\ngeo_hdb_resale <- get_prox(geo_hdb_resale, cbd_geom, \"PROX_CBD\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_eldercare, \"PROX_ELDER\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_hawker, \"PROX_HAWKER\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_mrt_existing, \"PROX_MRT_E\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_parks, \"PROX_PARK\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_top_schools, \"PROX_TOP_SCH\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_malls, \"PROX_MALL\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_supermarkets, \"PROX_SUPMKT\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_rail_mrt_above, \"PROX_TRK_MRT\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_rail_lrt_above, \"PROX_TRK_LRT\")"
  },
  {
    "objectID": "exercises/thex03.html#generating-num-within-locational-factors",
    "href": "exercises/thex03.html#generating-num-within-locational-factors",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "5.3 Generating Num Within Locational Factors",
    "text": "5.3 Generating Num Within Locational Factors\n\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_childcare, 350, \"NUM_350_CHILD\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_kindergartens, 350, \"NUM_350_KINDER\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_bus_stop, 350, \"NUM_350_BUS\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_schools, 1000, \"NUM_1000_SCH\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_mrt_future, 800, \"NUM_800_MRT_F\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_lrt, 350, \"NUM_350_LRT\")"
  },
  {
    "objectID": "exercises/thex03.html#rds-scripts-1",
    "href": "exercises/thex03.html#rds-scripts-1",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "5.4 RDS Scripts",
    "text": "5.4 RDS Scripts\nTo prevent running the code above again, we will save\n\nwrite_rds(geo_hdb_resale, \"Take-Home_Ex03/rds/geo_hdb_resale.rds\")\n\n\ngeo_hdb_resale <- read_rds(\"Take-Home_Ex03/rds/geo_hdb_resale.rds\")\n\n\n#tmap_mode(\"view\")\n#tm_shape(hdb_resale) +\n#  tm_dots(\"resale_price\",\n#      \n#popup.vars=c(\"month\"=\"month\", \"town\"=\"town\", \"block\" = \"block\", \"street_name\" = \"street_name\"))"
  },
  {
    "objectID": "exercises/thex03.html#generating-locational-factors-and-saving-results",
    "href": "exercises/thex03.html#generating-locational-factors-and-saving-results",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "5.2 Generating Locational Factors and Saving Results",
    "text": "5.2 Generating Locational Factors and Saving Results\n\nGenerating Proximity Locational FactorsGenerating Num Within Locational FactorsRDS Scripts\n\n\nUsing the code chunk below, we will generate the proximity to locational factors specified below:\n\ngeo_hdb_resale <- hdb_resale_sf\ngeo_hdb_resale <- get_prox(geo_hdb_resale, cbd_geom, \"PROX_CBD\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_eldercare, \"PROX_ELDER\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_hawker, \"PROX_HAWKER\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_mrt_existing, \"PROX_MRT_E\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_parks, \"PROX_PARK\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_top_schools, \"PROX_TOP_SCH\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_malls, \"PROX_MALL\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_supermarkets, \"PROX_SUPMKT\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_rail_mrt_above, \"PROX_TRK_MRT\")\ngeo_hdb_resale <- get_prox(geo_hdb_resale, geo_rail_lrt_above, \"PROX_TRK_LRT\")\n\n\n\nNow, using the code chunk below, we will obtain the count of location factors specified:\n\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_childcare, 350, \"NUM_350_CHILD\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_kindergartens, 350, \"NUM_350_KINDER\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_bus_stop, 350, \"NUM_350_BUS\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_schools, 1000, \"NUM_1000_SCH\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_mrt_future, 800, \"NUM_800_MRT_F\")\ngeo_hdb_resale <- get_within(geo_hdb_resale, geo_lrt, 350, \"NUM_350_LRT\")\n\n\n\nTo prevent running the code above again on every render, we will save the results to a RDS file. We will use the read script to read the file without having to rerun the processing on every render.\n\nwrite_rds(geo_hdb_resale, \"Take-Home_Ex03/rds/geo_hdb_resale.rds\")\n\n\ngeo_hdb_resale <- read_rds(\"Take-Home_Ex03/rds/geo_hdb_resale.rds\")\n\n\n\n\n\n#tmap_mode(\"view\")\n#tm_shape(hdb_resale) +\n#  tm_dots(\"resale_price\",\n#      \n#popup.vars=c(\"month\"=\"month\", \"town\"=\"town\", \"block\" = \"block\", \"street_name\" = \"street_name\"))"
  },
  {
    "objectID": "exercises/thex03.html#floor-level",
    "href": "exercises/thex03.html#floor-level",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "6.1 Floor Level",
    "text": "6.1 Floor Level\nNow, let us first look at the floor levels.\n\nstoreys <- sort(unique(geo_hdb_resale$storey_range))\nstoreys\n\n [1] \"01 TO 03\" \"04 TO 06\" \"07 TO 09\" \"10 TO 12\" \"13 TO 15\" \"16 TO 18\"\n [7] \"19 TO 21\" \"22 TO 24\" \"25 TO 27\" \"28 TO 30\" \"31 TO 33\" \"34 TO 36\"\n[13] \"37 TO 39\" \"40 TO 42\" \"43 TO 45\" \"46 TO 48\" \"49 TO 51\"\n\n\nFrom the unique values obtained above, we can see that story range is provided as a categorical range of every three floors. In the data above, we can see that there are 17 storey range categories.\nLet us recode the categorical naming to numerical values by assigning 1 to the first range 01 TO 03 and 17 to the last range 49 TO 51.\n\nstorey_order <- 1:length(storeys)\nstorey_range_order <- data.frame(storeys, storey_order)\nstorey_range_order\n\n    storeys storey_order\n1  01 TO 03            1\n2  04 TO 06            2\n3  07 TO 09            3\n4  10 TO 12            4\n5  13 TO 15            5\n6  16 TO 18            6\n7  19 TO 21            7\n8  22 TO 24            8\n9  25 TO 27            9\n10 28 TO 30           10\n11 31 TO 33           11\n12 34 TO 36           12\n13 37 TO 39           13\n14 40 TO 42           14\n15 43 TO 45           15\n16 46 TO 48           16\n17 49 TO 51           17\n\n\nFrom our data frame above, we have obtained the storey ranges and storey_order. Using the code below, we will use left_join to join storey_order to the main geo_hdb_resale dataframe.\n\ngeo_hdb_resale <- left_join(geo_hdb_resale,  storey_range_order, by = c(\"storey_range\" = \"storeys\"))\n\nThere we go, we have combined the recorded storey range values as storey_order."
  },
  {
    "objectID": "exercises/thex03.html#hdb-apartment-model-and-multi-storey",
    "href": "exercises/thex03.html#hdb-apartment-model-and-multi-storey",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "6.2 HDB Apartment Model and Multi-storey",
    "text": "6.2 HDB Apartment Model and Multi-storey\nNot all HDB Apartments are built the same, there are different HDB Models and some HDB units are multi-storey. Let us explore what kinds of models do we have in our dataset:\n\nunique(geo_hdb_resale$flat_model)\n\n [1] \"Improved\"               \"Standard\"               \"DBSS\"                  \n [4] \"Model A\"                \"Adjoined flat\"          \"Premium Apartment\"     \n [7] \"Type S2\"                \"Model A-Maisonette\"     \"Premium Apartment Loft\"\n[10] \"Improved-Maisonette\"    \"3Gen\"                  \n\n\nFrom our data above, we can see that we have 11 distinct categories of HDB Apartment Types. Some of these terminologies changed over time and may refer to the configuration or whether the apartments came with furnishings.\nLet use understand what some of the terms mean:\n\nDesign Build Sell Scheme (DBSS) flats may call for a higher value than regular HDB flats as they are designed, build and sold by 3rd party developers although they are still HDB Flats. They are supposed to be better than premium flats\nPremium flats which come with pre-installed fittings and furnishings over standard apartments which comes with none\nStandard flats are opposite of premium, they don’t come with furnishings or fittings\nMaisonette / Loft comes with a second floor of apartment space\n3Gen is a new type of single-key unit with additional bedroom and bathroom for grandparents to live in\nAdjoined flats are units where two HDB units are combined (may or may not have 2 front doors)\nType S2 are types assigned to 5-room units in The Pinnacle at Duxton\n\nLet us recode them so that the model can generalise better.\n\nRecode ValuesCreate Multistorey ColumnsRecodeGlimpse\n\n\n\n\n\n\n\n\n\n\nOriginal Values\nRecoded Values (model_<valuename>)\nRecoded Values (multistorey)\n\n\n\n\nImproved\nStandard = 1\n0\n\n\nStandard\nStandard = 1\n0\n\n\nDBSS\nDBSS = 1\n0\n\n\nModel A\nStandard = 1\n0\n\n\nAdjoined flat\nAdjoined = 1\n0\n\n\nPremium Apartment\nPremium = 1\n0\n\n\nType S2\nS2 = 1\n0\n\n\nModel A-Maisonette\nStandard = 1\n1\n\n\nPremium Apartment Loft\nPremium = 1\n1\n\n\nImproved - Maisonette\nStandard = 1\n1\n\n\n3Gen\n3Gen = 1\n0\n\n\n\n\n\nUsing the code chunk below, we will check if the flat_model corresponds to the following types, if it is, we code the value in the multistorey as 1. Else, 0 is assigned.\n\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(multistorey = ifelse(flat_model %in% c(\"Improved-Maisonette\", \"Model A-Maisonette\", \"Premium Apartment Loft\"), 1, 0 ))\n\n\n\n\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(model_standard = ifelse(flat_model %in% c(\"Improved\", \"Standard\", \"Model A\", \"Model A-Maisonette\", \"Improved-Maisonette\"), 1, 0))\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(model_premium = ifelse(flat_model %in% c(\"Premium Apartment\", \"Premium Apartment Loft\"), 1, 0))\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(model_dbss = ifelse(flat_model %in% c(\"DBSS\"), 1, 0))\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(model_adjoined = ifelse(flat_model %in% c(\"Adjoined\"), 1, 0))\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(model_3gen = ifelse(flat_model %in% c(\"3Gen\"), 1, 0))\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(model_s2 = ifelse(flat_model %in% c(\"S2\"), 1, 0))\n\nNice, we have completed our recoding, let us view a snippet of our data\n\n\n\nglimpse(geo_hdb_resale)\n\nRows: 21,548\nColumns: 39\n$ month                <chr> \"2020-01\", \"2020-01\", \"2020-01\", \"2020-01\", \"2020…\n$ town                 <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO…\n$ flat_type            <chr> \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", \"5 ROOM\",…\n$ block                <chr> \"439\", \"401\", \"439\", \"458\", \"101\", \"423\", \"501\", …\n$ street_name          <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG MO…\n$ storey_range         <chr> \"01 TO 03\", \"01 TO 03\", \"10 TO 12\", \"16 TO 18\", \"…\n$ floor_area_sqm       <dbl> 119, 119, 119, 120, 117, 133, 121, 118, 117, 110,…\n$ flat_model           <chr> \"Improved\", \"Improved\", \"Improved\", \"Improved\", \"…\n$ lease_commence_date  <dbl> 1979, 1979, 1979, 1980, 1978, 1993, 1981, 1980, 1…\n$ remaining_lease      <chr> \"58 years 01 month\", \"58 years 04 months\", \"58 ye…\n$ resale_price         <dbl> 485000, 465000, 535000, 580000, 450000, 700000, 5…\n$ address              <chr> \"439 ANG MO KIO AVE 10\", \"401 ANG MO KIO AVE 10\",…\n$ remaining_lease_mths <dbl> 697, 700, 696, 708, 685, 867, 720, 715, 718, 983,…\n$ TYPE                 <chr> \"HIP\", \"HIP\", \"HIP\", \"MUP\", \"MUP\", \"MUP\", \"HIP\", …\n$ geometry             <POINT [m]> POINT (30245.54 38703.15), POINT (30456.02 …\n$ PROX_CBD             <dbl> 6.989768, 6.378015, 6.989768, 6.916461, 7.610195,…\n$ PROX_ELDER           <dbl> 0.1492226, 0.4113172, 0.1492226, 0.4029423, 0.410…\n$ PROX_HAWKER          <dbl> 0.3839028, 0.1936557, 0.3839028, 0.4087359, 0.339…\n$ PROX_MRT_E           <dbl> 0.4803328, 1.0801394, 0.4803328, 1.0555181, 0.362…\n$ PROX_PARK            <dbl> 0.43496397, 0.38750860, 0.43496397, 0.11487028, 0…\n$ PROX_TOP_SCH         <dbl> 1.6651215, 1.4622530, 1.6651215, 1.7972139, 0.745…\n$ PROX_MALL            <dbl> 0.65512784, 1.17809882, 0.65512784, 0.63634263, 0…\n$ PROX_SUPMKT          <dbl> 0.1163858, 0.5528965, 0.1163858, 0.5984122, 0.426…\n$ PROX_TRK_MRT         <dbl> 0.18387595, 0.25476802, 0.18387595, 0.80169673, 1…\n$ PROX_TRK_LRT         <dbl> 3.785476, 4.106396, 3.785476, 3.333021, 4.741474,…\n$ NUM_350_CHILD        <int> 4, 0, 4, 3, 5, 3, 1, 4, 5, 4, 6, 5, 8, 8, 8, 1, 2…\n$ NUM_350_KINDER       <int> 1, 0, 1, 2, 0, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0…\n$ NUM_350_BUS          <int> 5, 7, 5, 5, 6, 6, 9, 6, 9, 7, 7, 9, 10, 8, 7, 6, …\n$ NUM_1000_SCH         <int> 3, 2, 3, 2, 3, 3, 2, 3, 3, 3, 2, 2, 3, 4, 4, 4, 3…\n$ NUM_800_MRT_F        <int> 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ NUM_350_LRT          <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_order         <int> 1, 1, 4, 6, 3, 1, 4, 4, 6, 10, 3, 4, 7, 9, 6, 2, …\n$ multistorey          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_standard       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1…\n$ model_premium        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_dbss           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0…\n$ model_adjoined       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_3gen           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_s2             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…"
  },
  {
    "objectID": "exercises/thex03.html#hdb-hip-mup-2",
    "href": "exercises/thex03.html#hdb-hip-mup-2",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "6.3 HDB HIP MUP",
    "text": "6.3 HDB HIP MUP\nSimilarly for HIP MUP data, since there are all coded as HIP or MUP or NA cateogrical values, we need to convert them to numbers so that the model will be able to build.\nIn this case, we will create two new columns, HIP and MUP to track which kind of upgrading project has been done on the unit.\n\nRecodeGlimpse\n\n\nUsing the code chunk, we will recode the respective values into the respective columns as 1 (true) or 0 (false).\n\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(hip = ifelse(is.na(TYPE), 0, ifelse(TYPE == \"HIP\", 1, 0)))\ngeo_hdb_resale <- geo_hdb_resale %>% mutate(hip = ifelse(is.na(TYPE), 0, ifelse(TYPE == \"MUP\", 1, 0)))\n\nThe manipulation is complete, let us glimpse the values.\n\n\n\nglimpse(geo_hdb_resale)\n\nRows: 21,548\nColumns: 40\n$ month                <chr> \"2020-01\", \"2020-01\", \"2020-01\", \"2020-01\", \"2020…\n$ town                 <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO…\n$ flat_type            <chr> \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", \"5 ROOM\", \"5 ROOM\",…\n$ block                <chr> \"439\", \"401\", \"439\", \"458\", \"101\", \"423\", \"501\", …\n$ street_name          <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG MO…\n$ storey_range         <chr> \"01 TO 03\", \"01 TO 03\", \"10 TO 12\", \"16 TO 18\", \"…\n$ floor_area_sqm       <dbl> 119, 119, 119, 120, 117, 133, 121, 118, 117, 110,…\n$ flat_model           <chr> \"Improved\", \"Improved\", \"Improved\", \"Improved\", \"…\n$ lease_commence_date  <dbl> 1979, 1979, 1979, 1980, 1978, 1993, 1981, 1980, 1…\n$ remaining_lease      <chr> \"58 years 01 month\", \"58 years 04 months\", \"58 ye…\n$ resale_price         <dbl> 485000, 465000, 535000, 580000, 450000, 700000, 5…\n$ address              <chr> \"439 ANG MO KIO AVE 10\", \"401 ANG MO KIO AVE 10\",…\n$ remaining_lease_mths <dbl> 697, 700, 696, 708, 685, 867, 720, 715, 718, 983,…\n$ TYPE                 <chr> \"HIP\", \"HIP\", \"HIP\", \"MUP\", \"MUP\", \"MUP\", \"HIP\", …\n$ geometry             <POINT [m]> POINT (30245.54 38703.15), POINT (30456.02 …\n$ PROX_CBD             <dbl> 6.989768, 6.378015, 6.989768, 6.916461, 7.610195,…\n$ PROX_ELDER           <dbl> 0.1492226, 0.4113172, 0.1492226, 0.4029423, 0.410…\n$ PROX_HAWKER          <dbl> 0.3839028, 0.1936557, 0.3839028, 0.4087359, 0.339…\n$ PROX_MRT_E           <dbl> 0.4803328, 1.0801394, 0.4803328, 1.0555181, 0.362…\n$ PROX_PARK            <dbl> 0.43496397, 0.38750860, 0.43496397, 0.11487028, 0…\n$ PROX_TOP_SCH         <dbl> 1.6651215, 1.4622530, 1.6651215, 1.7972139, 0.745…\n$ PROX_MALL            <dbl> 0.65512784, 1.17809882, 0.65512784, 0.63634263, 0…\n$ PROX_SUPMKT          <dbl> 0.1163858, 0.5528965, 0.1163858, 0.5984122, 0.426…\n$ PROX_TRK_MRT         <dbl> 0.18387595, 0.25476802, 0.18387595, 0.80169673, 1…\n$ PROX_TRK_LRT         <dbl> 3.785476, 4.106396, 3.785476, 3.333021, 4.741474,…\n$ NUM_350_CHILD        <int> 4, 0, 4, 3, 5, 3, 1, 4, 5, 4, 6, 5, 8, 8, 8, 1, 2…\n$ NUM_350_KINDER       <int> 1, 0, 1, 2, 0, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0…\n$ NUM_350_BUS          <int> 5, 7, 5, 5, 6, 6, 9, 6, 9, 7, 7, 9, 10, 8, 7, 6, …\n$ NUM_1000_SCH         <int> 3, 2, 3, 2, 3, 3, 2, 3, 3, 3, 2, 2, 3, 4, 4, 4, 3…\n$ NUM_800_MRT_F        <int> 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ NUM_350_LRT          <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_order         <int> 1, 1, 4, 6, 3, 1, 4, 4, 6, 10, 3, 4, 7, 9, 6, 2, …\n$ multistorey          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_standard       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1…\n$ model_premium        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_dbss           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0…\n$ model_adjoined       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_3gen           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_s2             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ hip                  <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…"
  },
  {
    "objectID": "exercises/thex03.html#rds-scripts-and-preparing-for-eda",
    "href": "exercises/thex03.html#rds-scripts-and-preparing-for-eda",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "6.4 RDS Scripts and Preparing for EDA",
    "text": "6.4 RDS Scripts and Preparing for EDA\nWe will now save our prepared HDB Resale dataset and mpsz to a RDS file and clear all variables to free up the memory before reloading the dataset as final_resale.\nThe rm(list=ls()) function will clear all variables\n\nwrite_rds(geo_hdb_resale,\"Take-Home_Ex03/rds/final_resale.rds\")\nwrite_rds(mpsz,\"Take-Home_Ex03/rds/mpsz.rds\")\n\n\nrm(list=ls())\n\n\nfinal_resale <- read_rds(\"Take-Home_Ex03/rds/final_resale.rds\")\nmpsz <- read_rds(\"Take-Home_Ex03/rds/mpsz.rds\")"
  },
  {
    "objectID": "exercises/thex03.html#removing-columns-not-required-for-analysis",
    "href": "exercises/thex03.html#removing-columns-not-required-for-analysis",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "7.1 Removing Columns Not Required For Analysis",
    "text": "7.1 Removing Columns Not Required For Analysis\nFirstly, let us remove the columns that are not required for further analysis to save on memory space.\nTo do this, we use the select() function and indicate the columns we want to remove by having the prefix-\n\nfinal_resale <- select(final_resale, c(-flat_type,-storey_range,-flat_model, -lease_commence_date, -address, -TYPE, -remaining_lease))\n\nNow, let us view the columns remaining.\n\nglimpse(final_resale)\n\nRows: 21,548\nColumns: 34\n$ month                <chr> \"2020-01\", \"2020-01\", \"2020-01\", \"2020-01\", \"2020…\n$ town                 <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO…\n$ block                <chr> \"439\", \"401\", \"439\", \"458\", \"101\", \"423\", \"501\", …\n$ street_name          <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG MO…\n$ floor_area_sqm       <dbl> 119, 119, 119, 120, 117, 133, 121, 118, 117, 110,…\n$ resale_price         <dbl> 485000, 465000, 535000, 580000, 450000, 700000, 5…\n$ remaining_lease_mths <dbl> 697, 700, 696, 708, 685, 867, 720, 715, 718, 983,…\n$ geometry             <POINT [m]> POINT (30245.54 38703.15), POINT (30456.02 …\n$ PROX_CBD             <dbl> 6.989768, 6.378015, 6.989768, 6.916461, 7.610195,…\n$ PROX_ELDER           <dbl> 0.1492226, 0.4113172, 0.1492226, 0.4029423, 0.410…\n$ PROX_HAWKER          <dbl> 0.3839028, 0.1936557, 0.3839028, 0.4087359, 0.339…\n$ PROX_MRT_E           <dbl> 0.4803328, 1.0801394, 0.4803328, 1.0555181, 0.362…\n$ PROX_PARK            <dbl> 0.43496397, 0.38750860, 0.43496397, 0.11487028, 0…\n$ PROX_TOP_SCH         <dbl> 1.6651215, 1.4622530, 1.6651215, 1.7972139, 0.745…\n$ PROX_MALL            <dbl> 0.65512784, 1.17809882, 0.65512784, 0.63634263, 0…\n$ PROX_SUPMKT          <dbl> 0.1163858, 0.5528965, 0.1163858, 0.5984122, 0.426…\n$ PROX_TRK_MRT         <dbl> 0.18387595, 0.25476802, 0.18387595, 0.80169673, 1…\n$ PROX_TRK_LRT         <dbl> 3.785476, 4.106396, 3.785476, 3.333021, 4.741474,…\n$ NUM_350_CHILD        <int> 4, 0, 4, 3, 5, 3, 1, 4, 5, 4, 6, 5, 8, 8, 8, 1, 2…\n$ NUM_350_KINDER       <int> 1, 0, 1, 2, 0, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0…\n$ NUM_350_BUS          <int> 5, 7, 5, 5, 6, 6, 9, 6, 9, 7, 7, 9, 10, 8, 7, 6, …\n$ NUM_1000_SCH         <int> 3, 2, 3, 2, 3, 3, 2, 3, 3, 3, 2, 2, 3, 4, 4, 4, 3…\n$ NUM_800_MRT_F        <int> 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ NUM_350_LRT          <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ storey_order         <int> 1, 1, 4, 6, 3, 1, 4, 4, 6, 10, 3, 4, 7, 9, 6, 2, …\n$ multistorey          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_standard       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1…\n$ model_premium        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_dbss           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0…\n$ model_adjoined       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_3gen           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ model_s2             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ hip                  <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n$ mup                  <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 0, NA, NA, NA, 0, 0, 0, 1…"
  },
  {
    "objectID": "exercises/thex03.html#understanding-resale-prices",
    "href": "exercises/thex03.html#understanding-resale-prices",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "7.2 Understanding Resale Prices",
    "text": "7.2 Understanding Resale Prices\nNow, let us plot a histogram to understand the pricing of 5-Room resale flats between Jan 2020 to Feb 2023.\n\nggplot(final_resale, aes(x=resale_price)) +\n  geom_histogram(bins = 20, color = \"black\", fill = \"lightblue\")\n\n\n\n\nFrom our graph above, we can see that:\n\nRight-skewed distribution of resale_prices\nMost resale HDBs are transacted near the $500,000 range.\nOutliers are seen where HDB prices are transacted near $1 million or more\n\nIn this scenerio, while we can take log of resale_price, we will not perform the transformation to make it a normal distribution as:\n\nresale_price is the value to be predicted, we do not want to predict the log of resale_price\nUsing the log of resale_price will cause it to have a high correlation with actual resale_price"
  },
  {
    "objectID": "exercises/thex03.html#understanding-structural-factors",
    "href": "exercises/thex03.html#understanding-structural-factors",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "7.3 Understanding Structural Factors",
    "text": "7.3 Understanding Structural Factors"
  },
  {
    "objectID": "exercises/thex03.html#understanding-locational-factors",
    "href": "exercises/thex03.html#understanding-locational-factors",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "7.4 Understanding Locational Factors",
    "text": "7.4 Understanding Locational Factors"
  },
  {
    "objectID": "exercises/thex03.html#statistical-point-map",
    "href": "exercises/thex03.html#statistical-point-map",
    "title": "Take-Home Exercise 03: Predicting HDB Public Housing Resale Prices Using Geographically Weighted Methods",
    "section": "7.5 Statistical Point Map",
    "text": "7.5 Statistical Point Map\nLet\n\ntmap_options(\"view\")\ntm_shape(mpsz) +\n  tm_polygons(\"REGION_N\",\n              alpha = 0.5) +\ntm_shape(final_resale) +\n  tm_dots(\"resale_price\",\n          popup.vars= TRUE,\n          size = 0.05,\n          palette = \"Set2\")"
  }
]