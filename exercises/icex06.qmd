---
title: "In-Class Exercise 6: Spatial Weights and Applications"
description: " "
author: "Teo Ren Jie"
date: "02/13/2023"
number-sections: true
categories: ["In-Class Exercise", "sf", "tidyverse", "tmap"]
title-block-banner: true
image: In-Class_Ex06/preview.png
execute:
  message: true
  warning: true
---

# Getting Started

## Installing and Loading Packages

Pacman assists us by helping us load R packages that we require, `sf`, `sfdep`, `tidyverse` and `tmap`.

```{r}
pacman::p_load(tidyverse, tmap, sf, sfdep)
```

## Data Acquisition

The following public datasets are used:

| Dataset Name                  | Source   |
|-------------------------------|----------|
| Hunan *(Hunan.shp)*           | Prof Kam |
| Hunan 2021 *(Hunan-2021.csv)* | Prof Kam |

# Spatial Data Wrangling

## Importing Spatial Data

We will use *st_read()* of sf package to import the three geospatial datasets.

```{r}
hunan <- st_read(dsn = "In-Class_Ex06/data/geospatial", layer = "hunan")
```

```{r}
hunan_2012 <- read_csv("In-Class_Ex06/data/aspatial/Hunan_2012.csv")
```

## Combining both data frame by using left join

```{r}
hunan_GDPPC <- left_join(hunan, hunan_2012) %>%
  select(1:4, 7, 15)
```

If two columns have the same name, they will automatically be joined, else, the following code has to be specified after the dataframes to be joined. `A == B`

# Plotting a Chloropleth Map

```{r}
tmap_mode("plot")
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Blues",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per capita by district",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

# Identify Area Neighbours

Before a spatial weight matrix can be derived, the neighbours need to be identified first.

## Contiguity Neighbours Methods

In the code chunk below `st_contiguity()` is used to derive a contiguity neighbour list by using Queen's method.

```{r}
cn_queen <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
```

```{r}
cn_rook <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         queen = FALSE,
         .before = 1)
```

# Computing Contiguity Weights

## Contiguity Weights: Queen's Method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb),
         .before = 1)
```

## Contiguity Weights: Rook's Method

```{r}
wm_r <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb),
         queen = FALSE,
         .before = 1)
```
