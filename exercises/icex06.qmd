---
title: "In-Class Exercise 6: Spatial Weights and Applications"
description: "Computing Contiguity and Distance-Based Weights in Hunan, China"
author: "Teo Ren Jie"
date: "02/13/2023"
number-sections: true
categories: ["In-Class Exercise", "sf", "sfdep", "tidyverse", "tmap"]
title-block-banner: true
image: In-Class_Ex06/preview.png
execute:
  message: true
  warning: true
---

# Getting Started

## Installing and Loading Packages

Pacman assists us by helping us load R packages that we require, `sf`, `sfdep`, `tidyverse` and `tmap`.

```{r}
pacman::p_load(tidyverse, tmap, sf, sfdep)
```

## Data Acquisition

The following datasets are used:

| Dataset Name                  | Source   |
|-------------------------------|----------|
| Hunan *(Hunan.shp)*           | Prof Kam |
| Hunan 2021 *(Hunan-2021.csv)* | Prof Kam |

# Spatial Data Wrangling

## Importing Spatial Data

We will use *st_read()* of sf package to import the three geospatial datasets.

```{r}
hunan <- st_read(dsn = "In-Class_Ex06/data/geospatial", layer = "hunan")
```

```{r}
hunan_2012 <- read_csv("In-Class_Ex06/data/aspatial/Hunan_2012.csv")
```

## Combining both data frame by using left join

```{r}
hunan_GDPPC <- left_join(hunan, hunan_2012) %>%
  select(1:4, 7, 15)
```

If two columns have the same name, they will automatically be joined, else, the following code has to be specified after the dataframes to be joined. `A == B`

# Plotting a Chloropleth Map

```{r}
tmap_mode("plot")
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Blues",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per capita by district",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

# Identify Area Neighbours

Before a spatial weight matrix can be derived, the neighbours need to be identified first.

## Contiguity Neighbours Methods

### Queen's Method

In the code chunk below `st_contiguity()` is used to derive a contiguity neighbour list by using Queen's method.

```{r}
nb_queen <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
```

The code chunk below prints the neighbours found using the Queen's method:

```{r}
summary(nb_queen)
```

### Rook's Method

```{r}
nb_rook <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry, queen = FALSE),
         .before = 1)
```

The code chunk below prints the neighbours found using the Rook's method:

```{r}
summary(nb_rook)
```

# Computing Contiguity Weights

## Contiguity Weights: Queen's Method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb),
         .before = 1)
```

```{r}
wm_q
```

## Contiguity Weights: Rook's Method

```{r}
wm_r <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry, queen = FALSE),
         wt = st_weights(nb),
         .before = 1)
```

```{r}
wm_r
```

# Distance Based Weights

There are three popular distance-based spatial weights that are being used:

1.  Fixed distance weights
2.  Adaptive distance weights
3.  Inverse distance weights (IDW)

## Deriving Fixed Distance Weights

Before we can derive the fixed distance weights, we need to determine the upper limit for distance band using the code chunk below

```{r}
geo <- sf::st_geometry((hunan_GDPPC))
nb <- st_knn(geo, longlat = TRUE)
dists <- unlist(st_nb_dists(geo, nb))
```

From the code chunk above, we can know that:

`st_nb_dists()`Â of *sfdep* is used to calculate nearest neighbour distance. It outputs a list of distances for each observation's neighbours list.

`unlist()` of *Base R* is used to return output as vector so the summary statistics of nearest neighbour distances can be derived

Now, let's derived the summary statistics of nearest neighbour distances vector (ie. dists) by using the code chunk below:

```{r}
summary(dists)
```

From the code chunk above, we know that the maximum nearest neighbour distance is `65.80km`. By using a threshold value of 66km, we can ensure that each area has at least one neighbour.

Now, we will go ahead to compute the fixed distance weights using the code chunk below.

```{r}
wm_fd <- hunan_GDPPC %>% 
  mutate(nb = st_dist_band(geometry, upper = 66),
         wt = st_weights(nb),
         .before = 1)
```

From the code above, we can know that:

`st_dists_band()` of *sfdep* is used to identity neighbours based on a distance band. Output is a list of neighbours

`st_weights()` is used to calculate polygon spatial weights of nb list.

-   the default *style* argument is set to "W" for row standardised weights and

-   the default *allow_zero* is set to TRUE, assigns zero as lagged value to zone without neighbours

Let us examine the dataframe of the fixed distance weights

```{r}
wm_fd
```

## Deriving Adaptive Distance Weights

```{r}
wm_ad <- hunan_GDPPC %>%
  mutate(nb = st_knn(geometry,
                     k = 8),
         wt = st_weights(nb),
         .before = 1)
```

From the code above, we can learn that:

`st_knn()` of sfdep is used to identify neighbours based on k (ie. k = 8 indicates 8 nearest neighbours). Output similarly is a list of neighbours (ie. nb)

`st_weights()` is used to calculate polygon spatial weights of nb list. Note

-   the default *style* argument is set to "W" for row standardised weights and

-   the default *allow_zero* is set to TRUE, assigns zero as lagged value to zone without neighbours

```{r}
wm_ad
```

## Deriving Inverse Distance Weights

```{r}
wm_idw <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

From the code above, we can learn that:

`st_contiguity()` of sfdep is used to identify neighbours by contiguity criteria. The output is a list of neighbours (ie. nb)

`st_inverse_distance()` is used to calculate inverse distance weights of neighbours on the nb list

Note:

-   the default *style* argument is set to "W" for row standardised weights and

-   the default *allow_zero* is set to TRUE, assigns zero as lagged value to zone without neighbours

```{r}
wm_idw
```
