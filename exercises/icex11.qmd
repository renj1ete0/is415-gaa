---
title: "In-Class Exercise 11: Calibrating Spatial Interaction Models (SIM)"
description: "Modelling Geographical Accessibility"
author: "Teo Ren Jie"
date: "03/27/2023"
number-sections: true
categories: ["In-Class Exercise", "sf", "sfdep", "tidyverse", "tmap"]
title-block-banner: true
image: In-Class_Ex11/preview.png
execute:
  message: true
  warning: true
---

# Getting Started

## Installing and Loading Packages

Pacman assists us by helping us load R packages that we require.

```{r}
pacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)
```

## Data Acquisition

The following datasets are used:

| Dataset Name                          | Source                     |
|---------------------------------------|----------------------------|
| URA Master Plan 2014 Subzone Boundary | [data.gov.sg](data.gov.sg) |
| 250m Hexagon GIS Data                 | Prof Kam                   |
| Eldercare                             | Prof Kam                   |
| OD Matrix                             | Prof Kam                   |

# Preparing the Flow Data

## Importing the OD Data

Firstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downlaoded from LTA DataMall using *read_csv().*

```{r}
odbus <- read_csv("In-Class_Ex11/data/aspatial/origin_destination_bus_202210.csv")
```

A quick check of the ORIGIN_PT_CODE and DESTINATION_PT_CODE columns found that they are in numerical values instead of character. The issue is the data will be taken as nominal data instead of categorical data. The code chunk below will convert the data.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

As we are only interested in the peak hour (7 to 9am) weekday commuting flows, we will extract the commuting flow data between 7am and 9am on weekdays using the code chunk below.

```{r}
odbus7_9 <- odbus %>% filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>% 
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

## Importing Geospatial Data

Now, we will import the bus stop and URA Master Plan Subzone Boundary.

```{r}
busstop <- st_read(dsn = "In-Class_Ex11/data/geospatial", 
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "In-Class_Ex11/data/geospatial", 
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
mpsz
```

Now, using the code chunk below, we will populat ethe subzone code of the mpsz sf data frame into busstop sf data frame.

::: callout-note
Note that if we want the geometry from busstop (ie. busstop point geometry), we need to put that first before the mpsz sf dataframe)
:::

```{r}
busstop_mpsz <- st_intersection(busstop,mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

Next, we will merge the `busstop_mpsz` dataframe onto the `odbus7_9` dataframe.

```{r}
od_data <- left_join(odbus7_9, busstop_mpsz,
                     by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)

od_data <- left_join(od_data, busstop_mpsz,
                     by = c("DESTIN_BS" = "BUS_STOP_N"))
```

Before continuing, it is a good practice to check for duplicating records.

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup()
```

If duplicated records are found, the code chunk below will be used to retain

```{r}
od_data <- unique(od_data)
```

```{r}
duplicate <- od_data %>% group_by_all %>%
  filter(n() > 1) %>%
  ungroup()
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na()
```

It is time to save the output into an RDS file format

```{r eval=FALSE}
write_rds(od_data, "In-Class_Ex11/data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("In-Class_Ex11/data/rds/od_data.rds")
```

# Visualising the Geospatial Plot

```{r}
tmap_mode("plot")
qtm(mpsz)
```

# Viewing the Subzone Boundary

```{r}
head(mpsz)
```

# Isolation SBUZONE_C (subzone_code) into a new df

```{r}
mpsz <- mpsz[order(mpsz$SUBZONE_C),]
head(mpsz, 10)
```

# Computing the Distance Matrix

## Converting sf to Spatial dataframe

```{r}
mpsz_sp <- as(mpsz, "Spatial")
```

## Computing the Distance Matrix

```{r}
dist <- spDists(mpsz_sp)
dist
```

## Extracting and attaching the SUBZONE_C Names

```{r}
sz_names <- mpsz$SUBZONE_C
```

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

## Pivoting Distance Pair

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

## Updating Intra-Zone Distances

A constant distance value of 50m is added into intra-zones

```{r}
distPair$dict <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

# Preparing Flow Data

```{r}
flow_data <- od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarize(TRIPS = sum(TRIPS))
```

```{r}
pop <- read_csv("In-Class_Ex11/data/aspatial/pop.csv")
```

```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

```{r}
flow_data1 <- flow_data %>%
  left_join(distPair,
            by = c("ORIGIN_SZ" = "orig",
                   "DESTIN_SZ" = "dest"))
```

```{r}
flow_data1 <- flow_data1 %>% 
  left_join(pop, 
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA,SZ_NAME))
```

```{r}
flow_data1 <- flow_data1 %>% 
  left_join(pop, 
            by = c(DESTIN_SZ = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA,SZ_NAME))
```
