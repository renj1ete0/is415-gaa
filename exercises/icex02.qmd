---
title: "In-Class Exercise 2: Geospatial Data Wrangling"
description: "Visualising proportion of functional and non-functional water pumps in Nigeria at LGA level"
author: "Teo Ren Jie"
date: "1/16/2023"
last-modified: "1/21/2023"
categories: ["In-Class Exercise", "tidyverse", "sf", "ggplot2", "funModeling"]
title-block-banner: true
image: In-Class_Ex02/preview.png
execute:
  message: false
  warning: false
---

# 1. Background

------------------------------------------------------------------------

Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.

Developing countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

To address the issue of providing clean and sustainable water supply to the ruralcommunity, a global [Water Point Data Exchange (WPdx)](https://www.waterpointdata.org/about/) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on [WPDx Data Standard](https://www.waterpointdata.org/wp-content/uploads/2021/04/WPDx_Data_Standard.pdf).

## 1.1 Objectives

Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate geospatial data wrangling methods to prepare the data for water point mapping study. For the purpose of this study, Nigeria will be used as the study country.

## 1.2 Task

The specific tasks of this take-home exercise are as follows:

-   Using appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.

-   Using appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.

-   Combining the geospatial and aspatial data frame into simple feature data frame.

-   Visualising the distribution of water point by using appropriate analytical visualisation methods.

# 2. Getting Started

------------------------------------------------------------------------

## 2.1 Installing and Loading Packages

Firstly, the code below will check if **pacman** has been installed. If it has not been installed, R will download and install it, before activating it for use during this session.

```{r}
if (!require('pacman', character.only = T)){
  install.packages('pacman')
}
library('pacman')
```

Next, pacman assists us by helping us load R packages that we require, `sf`, `tidyverse` and funModeling.

```{r}
pacman::p_load(sf, tidyverse, funModeling)
```

## 2.2 Data Acquisition

For the purpose of this exercise, the following public datasets are used:

| Dataset Name                                                                                        | Source                                                                       |
|-----------------------------------------------|-------------------------|
| WPdx+ (*Water_Point_Data_Exchange\_-\_Plus\_\_WPdx\_\_.csv*)                                        | [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) |
| geoBoundaries Nigeria Level-2 Administrative Boundary (*geoBoundaries-NGA-ADM2.shp*) - UN OCHA CODs | [geoBoundaries](https://www.geoboundaries.org/index.html#getdata)            |

The data has been extracted to `In-Class_Ex02/data/geospatial`.

## 2.3 geoBoundaries Nigeria Level-2 Administrative Boundary Dataset

### 2.3.1 Importing geoBoundaries Nigeria Level-2 Administrative Boundary Dataset

In the code below, `dsn` specifies the filepath where the dataset is located and `layer` provides the filename of the dataset excluding the file extension.

```{r}
gbnigeria = st_read(dsn = "In-Class_Ex02/data/geospatial", layer = "geoBoundaries-NGA-ADM2")
```

From the above message, it tells us that the dataset contains `multipolygon` features, containing **774 multipolygon** features and **5 fields** in the `gbnigeria` simple feature data frame and is in the `WGS84` geographic coordinates system.

### 2.3.2 Checking the Coordinate Reference System

In the code below, we will check if the Coordinate Reference System has been specified correctly.

```{r}
st_crs(gbnigeria)
```

As seen above, the file has been configured correctly, having a `WGS84` Geographic Coordinate System which maps to `EPSG:4326`.

### 2.3.2 Converting the Coordinate Reference System

In the code below, we will convert the Geographic Coordinate Reference System from `WGS84` to `EPSG:26391` Projected Coordinate System.

```{r}
gbnigeria26391 <- st_transform(gbnigeria, crs = 26391)
```

```{r}
st_crs(gbnigeria26391)
```

After running the code, we can confirm that the data frame has been converted to `EPSG:26391` Projected Coordinate System.

## 2.4 WPdx+ Aspatial Data

### 2.4.1 Importing WPdx+ Aspatial Data

Since `WPdx+` data set is in `csv` format, we will use read_csv() of **readr** package to import `Water_Point_Data_Exchange_-_Plus__WPdx__.csv` and output it to an R object called `wpdx`.

```{r}
wpdx <- read_csv("In-Class_Ex02/data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

```{r}
list(wpdx)
```

Our output shows our `wpdx` tibble data frame consists of **95,008 rows** and **70 columns**. The useful fields we would be paying attention to is the `#lat_deg` and `#lon_deg` columns, which are in the decimal degree format. By viewing the [Data Standard on wpdx's website](https://www.waterpointdata.org/wp-content/uploads/2021/04/WPDx_Data_Standard.pdf), we know that the latitude and longitude is in the `wgs84` Geographic Coordinate System.

### 2.4.2 Creating a Simple Feature Data Frame from an Aspatial Data Frame and Converting Coordinate System

The code below converts the `wpdx` tibble data fame into a simple feature data frame by using *st_as_sf()* from **sf** packages, which converts foreign data formats to an sf object. At the same time, the st_transform statement will convert the longitude, latitude Geographic Coordinate System from `EPSG:4236` (WGS 84) to `EPSG:26391`, one of Nigeria's Projected Coordinate Systems.

```{r}
wpdx_sf <- st_as_sf(wpdx,
                    coords = c("#lon_deg", "#lat_deg"),
                    crs = 4326) %>%
  st_transform(crs = 26391)
```

```{r}
list(wpdx_sf)
```

Previously, there were **70 columns** in the aspatial data, only **69 columns** exists now. `#lat` and `#lon` columns were dropped and a new column has been created for `geometry`.

# 3. Derive Proportions

------------------------------------------------------------------------

## 3.1 Understanding Category Labels

First, let us have a look at the `#status_clean` column which stores the information about `Functional` and `Non-Functional` data points. The code below returns all unique values that were used in the column.

```{r}
unique(wpdx["#status_clean"])
```

As we are interested in looking into the Proportions of `Functional` and `Non-functional` water points, we can safely disregard the `NA` values.

Next, from our remaining 8 category labels, all except those marked strictly as `Functional` are `Non-functional`. These `Non-functional` labels could include categories marked as `Abadoned`, `Functional but not in use` (which means its non-functional at that point) and `Functional but needs repair`, should be classified

## 3.2 Filtering Data

With our previous knowledge, we can filter the data to obtain functional proportion counts in each LGA level. The functional proportion counts could be obtained through `Functional Proportion = Functional Count / Total Count`

Hence, the code below will filter `Functional Count` (for functional water points) and `Total Count` (for water points that are not NA) into separate data frames.

```{r}
wpdx_func <- wpdx_sf %>% filter(`#status_clean` == "Functional")
wpdx_nonna <- wpdx_sf %>% filter(`#status_clean` != "NA")
```

## 3.3 Point-in-polygon Count

Utilising *st_intersects()* of **sf** package and lengths, we can find how many `Functional` water points and `Total` (non-NA) water points fall under which LGA.

```{r}
gbnigeria26391$`Functional Count` <- lengths(st_intersects(gbnigeria26391, wpdx_func))
gbnigeria26391$`Total Count` <- lengths(st_intersects(gbnigeria26391, wpdx_nonna))
```

Using *summary()* , we can view summary statistics of the newly derived `Functional Count` and `Total Count` fields.

```{r}
summary(gbnigeria26391$`Functional Count`)
```

```{r}
summary(gbnigeria26391$`Total Count`)
```

## 3.4 Calculating Proportion of Water Points

Next, we will use *mutate()*Â of **dplyr** package to compute the proportion of `Functional` and `Non-` water points.

This is given by `Functional Proportion = Functional Count / Total Count`.

```{r}
gbnigeria26391 <- gbnigeria26391 %>%
  mutate(`Functional Proportion` = `Functional Count`/`Total Count`)
            
```

Now, we can view the summary of all LGA.

```{r}
summary(gbnigeria26391$`Functional Proportion`)
```

Why do we see 21 NAs? In 3.2, we have already removed the NA values. Let us check the NA values that are recorded under the `Functional Proportion` column.

```{r}
list(gbnigeria26391 %>% filter(`Functional Proportion` == "NaN") )
```

Oh, so from the records above, it appears that the `Functional Proportion` column is `NA` as there were no *non-NA* records of any water pumps within that LGA. In short, there were no records of water pumps.

# 4. Visualisation and Exploratory Data Analysis

## 4.1 Geospatial Plot

We can plot a simple geospatial visualisation of the map of Nigeria's LGA to the proportion of functional to total water pumps within the LGA.

For white areas, these are areas where there was no data on any water pump (functional or non-functional) in the region.

```{r}
plot(gbnigeria26391['Functional Proportion'],main = "Proportion Functional to Non-Functional Water Points")
```

## 4.2 Exploratory Data Analysis (EDA)

We will save the values to another variable to perform EDA.

```{r}
gbnigeria26391_analysis <- gbnigeria26391
```

In our EDA, let us calculate the area in `m^2` for some correlation analysis later. Let us save it as `int`.

```{r}
gbnigeria26391_analysis$AREA <- as.numeric(st_area(gbnigeria26391_analysis))
```

For our EDA, we need to drop the `geometry` values. We will set the geometry to `NULL` to remove all the geometry values.

```{r}
st_geometry(gbnigeria26391_analysis) <- NULL 
```

By using `profiling_num` of `funModeling` package, we will be able to get some descriptive statistics.

```{r}
profiling_num(gbnigeria26391_analysis)
```

Similarly, using the `plot_num` function of `funModeling` package, we can plot a histogram of the `numerical` columns.

```{r}
plot_num(gbnigeria26391_analysis,bins = 10)
```

```{r}
boxplot(gbnigeria26391_analysis$`Functional Proportion`,
main = "Proportion Functional to Non-Functional Water Points",
horizontal = TRUE)
```

From the numerical plots, boxplot and descriptive statistics generated, we can tell that the functional to non-functional proportion of water points is roughly bell-shaped, with a median of approximately 0.48. There are no extreme outlier values.
